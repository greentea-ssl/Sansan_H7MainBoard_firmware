
sansan_H7MainBoard_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800c880  0800c880  0001c880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb80  0800cb80  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb80  0800cb80  0001cb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb88  0800cb88  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb88  0800cb88  0001cb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb8c  0800cb8c  0001cb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800cb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  240001e0  0800cd70  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000848  0800cd70  00020848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029be8  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aaf  00000000  00000000  00049df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c70  00000000  00000000  0004d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b08  00000000  00000000  0004f518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003c00c  00000000  00000000  00051020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016345  00000000  00000000  0008d02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00185b68  00000000  00000000  000a3371  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00228ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008838  00000000  00000000  00228f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e0 	.word	0x240001e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c868 	.word	0x0800c868

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e4 	.word	0x240001e4
 80002d4:	0800c868 	.word	0x0800c868

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	2301      	movs	r3, #1
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <__io_putchar+0x20>)
 80005fa:	f007 fbd1 	bl	8007da0 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000714 	.word	0x24000714

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f001 fcc6 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f824 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fe80 	bl	800131c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800061c:	f000 f98a 	bl	8000934 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000620:	f000 f912 	bl	8000848 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000624:	f000 fa4e 	bl	8000ac4 <MX_I2C2_Init>
  MX_SPI4_Init();
 8000628:	f000 fa8c 	bl	8000b44 <MX_SPI4_Init>
  MX_TIM1_Init();
 800062c:	f000 fada 	bl	8000be4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000630:	f000 fb84 	bl	8000d3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000634:	f000 fbf8 	bl	8000e28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fc66 	bl	8000f08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800063c:	f000 fd3e 	bl	80010bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000640:	f000 fd88 	bl	8001154 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000644:	f000 fdd2 	bl	80011ec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000648:	f000 fe1c 	bl	8001284 <MX_USART6_UART_Init>
  MX_FDCAN2_Init();
 800064c:	f000 f9d6 	bl	80009fc <MX_FDCAN2_Init>
  MX_UART5_Init();
 8000650:	f000 fce6 	bl	8001020 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  printf("oppai..\n");
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <main+0x50>)
 8000656:	f00a fc01 	bl	800ae5c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x4e>
 800065c:	0800c880 	.word	0x0800c880

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0cc      	sub	sp, #304	; 0x130
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800066a:	224c      	movs	r2, #76	; 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a f869 	bl	800a746 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000678:	2220      	movs	r2, #32
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f00a f862 	bl	800a746 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4618      	mov	r0, r3
 8000688:	23bc      	movs	r3, #188	; 0xbc
 800068a:	461a      	mov	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f00a f85a 	bl	800a746 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000692:	2002      	movs	r0, #2
 8000694:	f003 fc8c 	bl	8003fb0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <SystemClock_Config+0x1d8>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a65      	ldr	r2, [pc, #404]	; (8000838 <SystemClock_Config+0x1d8>)
 80006a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <SystemClock_Config+0x1d8>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	4b61      	ldr	r3, [pc, #388]	; (800083c <SystemClock_Config+0x1dc>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	4a60      	ldr	r2, [pc, #384]	; (800083c <SystemClock_Config+0x1dc>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c2:	4b5e      	ldr	r3, [pc, #376]	; (800083c <SystemClock_Config+0x1dc>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	f003 0201 	and.w	r2, r3, #1
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d2:	bf00      	nop
 80006d4:	4b58      	ldr	r3, [pc, #352]	; (8000838 <SystemClock_Config+0x1d8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e0:	d1f8      	bne.n	80006d4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006e2:	4b57      	ldr	r3, [pc, #348]	; (8000840 <SystemClock_Config+0x1e0>)
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	f023 0303 	bic.w	r3, r3, #3
 80006ea:	4a55      	ldr	r2, [pc, #340]	; (8000840 <SystemClock_Config+0x1e0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 480;
 8000712:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000716:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800072c:	2304      	movs	r3, #4
 800072e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fc6e 	bl	8004024 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800074e:	f000 feb7 	bl	80014c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	233f      	movs	r3, #63	; 0x3f
 8000754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2303      	movs	r3, #3
 800075a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000764:	2308      	movs	r3, #8
 8000766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000784:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f822 	bl	80047d4 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000796:	f000 fe93 	bl	80014c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <SystemClock_Config+0x1e4>)
 80007a0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_FDCAN
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2204      	movs	r2, #4
 80007a8:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2250      	movs	r2, #80	; 0x50
 80007b0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2202      	movs	r2, #2
 80007b8:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2202      	movs	r2, #2
 80007c0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2202      	movs	r2, #2
 80007c8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2240      	movs	r2, #64	; 0x40
 80007d0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2220      	movs	r2, #32
 80007d8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007f2:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fb5d 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x1cc>
  {
    Error_Handler();
 8000828:	f000 fe4a 	bl	80014c0 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58024800 	.word	0x58024800
 800083c:	58000400 	.word	0x58000400
 8000840:	58024400 	.word	0x58024400
 8000844:	0008a00b 	.word	0x0008a00b

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_ADC1_Init+0xe0>)
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <MX_ADC1_Init+0xe4>)
 8000870:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_ADC1_Init+0xe0>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000886:	2204      	movs	r2, #4
 8000888:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_ADC1_Init+0xe0>)
 800088c:	2200      	movs	r2, #0
 800088e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000892:	2200      	movs	r2, #0
 8000894:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000898:	2201      	movs	r2, #1
 800089a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_ADC1_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c8:	4817      	ldr	r0, [pc, #92]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008ca:	f001 fd87 	bl	80023dc <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 fdf4 	bl	80014c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_ADC1_Init+0xe0>)
 80008e4:	f002 fb4c 	bl	8002f80 <HAL_ADCEx_MultiModeConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ee:	f000 fde7 	bl	80014c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ADC1_Init+0xe8>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC1_Init+0xe0>)
 8000912:	f001 ff03 	bl	800271c <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800091c:	f000 fdd0 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	240003f0 	.word	0x240003f0
 800092c:	40022000 	.word	0x40022000
 8000930:	2a000400 	.word	0x2a000400

08000934 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000938:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <MX_FDCAN1_Init+0xc4>)
 800093c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800095e:	2201      	movs	r2, #1
 8000960:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000964:	2201      	movs	r2, #1
 8000966:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800096a:	2202      	movs	r2, #2
 800096c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000970:	2202      	movs	r2, #2
 8000972:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000976:	2201      	movs	r2, #1
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800097c:	2201      	movs	r2, #1
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000982:	2201      	movs	r2, #1
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000988:	2201      	movs	r2, #1
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009be:	2204      	movs	r2, #4
 80009c0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009dc:	2204      	movs	r2, #4
 80009de:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_FDCAN1_Init+0xc0>)
 80009e2:	f002 fc8b 	bl	80032fc <HAL_FDCAN_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009ec:	f000 fd68 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	24000568 	.word	0x24000568
 80009f8:	4000a000 	.word	0x4000a000

080009fc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <MX_FDCAN2_Init+0xc4>)
 8000a04:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_FDCAN2_Init+0xc0>)
 8000aaa:	f002 fc27 	bl	80032fc <HAL_FDCAN_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ab4:	f000 fd04 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	240007a0 	.word	0x240007a0
 8000ac0:	4000a400 	.word	0x4000a400

08000ac4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_I2C2_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_I2C2_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000b00:	f003 f92e 	bl	8003d60 <HAL_I2C_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 fcd9 	bl	80014c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000b12:	f003 f9b5 	bl	8003e80 <HAL_I2CEx_ConfigAnalogFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 fcd0 	bl	80014c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_I2C2_Init+0x74>)
 8000b24:	f003 f9f7 	bl	8003f16 <HAL_I2CEx_ConfigDigitalFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 fcc7 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240002d8 	.word	0x240002d8
 8000b3c:	40005800 	.word	0x40005800
 8000b40:	307075b1 	.word	0x307075b1

08000b44 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <MX_SPI4_Init+0x9c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_SPI4_Init+0x98>)
 8000bc8:	f006 f83c 	bl	8006c44 <HAL_SPI_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_SPI4_Init+0x92>
  {
    Error_Handler();
 8000bd2:	f000 fc75 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240004e0 	.word	0x240004e0
 8000be0:	40013400 	.word	0x40013400

08000be4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09a      	sub	sp, #104	; 0x68
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	222c      	movs	r2, #44	; 0x2c
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f009 fd91 	bl	800a746 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c26:	4a44      	ldr	r2, [pc, #272]	; (8000d38 <MX_TIM1_Init+0x154>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c4e:	4839      	ldr	r0, [pc, #228]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c50:	f006 f90b 	bl	8006e6a <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c5a:	f000 fc31 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4832      	ldr	r0, [pc, #200]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c6c:	f006 fa6c 	bl	8007148 <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c76:	f000 fc23 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c7a:	482e      	ldr	r0, [pc, #184]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c7c:	f006 f920 	bl	8006ec0 <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c86:	f000 fc1b 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4825      	ldr	r0, [pc, #148]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000c9e:	f006 ff29 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ca8:	f000 fc0a 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cac:	2360      	movs	r3, #96	; 0x60
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000cd2:	f006 f921 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000cdc:	f000 fbf0 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000d16:	f006 ff75 	bl	8007c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000d20:	f000 fbce 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM1_Init+0x150>)
 8000d26:	f000 fdcf 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3768      	adds	r7, #104	; 0x68
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24000608 	.word	0x24000608
 8000d38:	40010000 	.word	0x40010000

08000d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d96:	f006 f868 	bl	8006e6a <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000da0:	f000 fb8e 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dae:	4619      	mov	r1, r3
 8000db0:	481c      	ldr	r0, [pc, #112]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000db2:	f006 f9c9 	bl	8007148 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f000 fb80 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000dc2:	f006 f87d 	bl	8006ec0 <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000dcc:	f000 fb78 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000de0:	f006 fe88 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dea:	f000 fb69 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000e06:	f006 f887 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e10:	f000 fb56 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000e16:	f000 fd57 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	240006d4 	.word	0x240006d4

08000e28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <MX_TIM3_Init+0xdc>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e72:	f006 f825 	bl	8006ec0 <HAL_TIM_PWM_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fb20 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000e90:	f006 fe30 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e9a:	f000 fb11 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	; 0x60
 8000ea0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000eb6:	f006 f82f 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f000 fafe 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000ecc:	f006 f824 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ed6:	f000 faf3 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000ee2:	f006 f819 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000eec:	f000 fae8 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM3_Init+0xd8>)
 8000ef2:	f000 fce9 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	24000324 	.word	0x24000324
 8000f04:	40000400 	.word	0x40000400

08000f08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f3c:	4a37      	ldr	r2, [pc, #220]	; (800101c <MX_TIM4_Init+0x114>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f40:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f5e:	482e      	ldr	r0, [pc, #184]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f60:	f005 ff83 	bl	8006e6a <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f6a:	f000 faa9 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4827      	ldr	r0, [pc, #156]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f7c:	f006 f8e4 	bl	8007148 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f86:	f000 fa9b 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f8a:	4823      	ldr	r0, [pc, #140]	; (8001018 <MX_TIM4_Init+0x110>)
 8000f8c:	f005 ff98 	bl	8006ec0 <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f96:	f000 fa93 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <MX_TIM4_Init+0x110>)
 8000faa:	f006 fda3 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000fb4:	f000 fa84 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb8:	2360      	movs	r3, #96	; 0x60
 8000fba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <MX_TIM4_Init+0x110>)
 8000fd0:	f005 ffa2 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000fda:	f000 fa71 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <MX_TIM4_Init+0x110>)
 8000fe6:	f005 ff97 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ff0:	f000 fa66 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM4_Init+0x110>)
 8000ffc:	f005 ff8c 	bl	8006f18 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001006:	f000 fa5b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM4_Init+0x110>)
 800100c:	f000 fc5c 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2400020c 	.word	0x2400020c
 800101c:	40000800 	.word	0x40000800

08001020 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_UART5_Init+0x94>)
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <MX_UART5_Init+0x98>)
 8001028:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_UART5_Init+0x94>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_UART5_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_UART5_Init+0x94>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_UART5_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_UART5_Init+0x94>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_UART5_Init+0x94>)
 800104c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001050:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_UART5_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_UART5_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_UART5_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_UART5_Init+0x94>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_UART5_Init+0x94>)
 800106c:	f006 fe48 	bl	8007d00 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001076:	f000 fa23 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_UART5_Init+0x94>)
 800107e:	f009 fa48 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 8001088:	f000 fa1a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_UART5_Init+0x94>)
 8001090:	f009 fa7d 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 800109a:	f000 fa11 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_UART5_Init+0x94>)
 80010a0:	f009 f9fe 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 fa09 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000364 	.word	0x24000364
 80010b8:	40005000 	.word	0x40005000

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART1_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001106:	f006 fdfb 	bl	8007d00 <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 f9d6 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001118:	f009 f9fb 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 f9cd 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x90>)
 800112a:	f009 fa30 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 f9c4 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART1_UART_Init+0x90>)
 800113a:	f009 f9b1 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f9bc 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24000454 	.word	0x24000454
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_USART2_UART_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800119e:	f006 fdaf 	bl	8007d00 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f98a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011b0:	f009 f9af 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 f981 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011c2:	f009 f9e4 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f978 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011d2:	f009 f965 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f970 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24000714 	.word	0x24000714
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <MX_USART3_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001236:	f006 fd63 	bl	8007d00 <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 f93e 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001248:	f009 f963 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 f935 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x90>)
 800125a:	f009 f998 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 f92c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART3_UART_Init+0x90>)
 800126a:	f009 f919 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f924 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400024c 	.word	0x2400024c
 8001280:	40004800 	.word	0x40004800

08001284 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_USART6_UART_Init+0x90>)
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_USART6_UART_Init+0x94>)
 800128c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_USART6_UART_Init+0x90>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_USART6_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_USART6_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012ce:	f006 fd17 	bl	8007d00 <HAL_UART_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80012d8:	f000 f8f2 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012e0:	f009 f917 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f8e9 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_USART6_UART_Init+0x90>)
 80012f2:	f009 f94c 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f000 f8e0 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_USART6_UART_Init+0x90>)
 8001302:	f009 f8cd 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f8d8 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000648 	.word	0x24000648
 8001318:	40011400 	.word	0x40011400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <MX_GPIO_Init+0x194>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001350:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	4a56      	ldr	r2, [pc, #344]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <MX_GPIO_Init+0x194>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <MX_GPIO_Init+0x194>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <MX_GPIO_Init+0x194>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <MX_GPIO_Init+0x194>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, KICKMODE_Pin|KICK_Pin|BOOST_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80013ec:	4831      	ldr	r0, [pc, #196]	; (80014b4 <MX_GPIO_Init+0x198>)
 80013ee:	f002 fc9d 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ALIVE_Pin|POWER_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013f8:	482f      	ldr	r0, [pc, #188]	; (80014b8 <MX_GPIO_Init+0x19c>)
 80013fa:	f002 fc97 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DONE_Pin */
  GPIO_InitStruct.Pin = DONE_Pin;
 80013fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DONE_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <MX_GPIO_Init+0x198>)
 8001414:	f002 fada 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : KICKMODE_Pin KICK_Pin BOOST_Pin */
  GPIO_InitStruct.Pin = KICKMODE_Pin|KICK_Pin|BOOST_Pin;
 8001418:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4820      	ldr	r0, [pc, #128]	; (80014b4 <MX_GPIO_Init+0x198>)
 8001432:	f002 facb 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIPSW_1_Pin DIPSW_2_Pin */
  GPIO_InitStruct.Pin = DIPSW_1_Pin|DIPSW_2_Pin;
 8001436:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_GPIO_Init+0x1a0>)
 800144c:	f002 fabe 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIPSW_3_Pin DIPSW_4_Pin EMO_Pin USER_SW0_Pin 
                           USER_SW1_Pin */
  GPIO_InitStruct.Pin = DIPSW_3_Pin|DIPSW_4_Pin|EMO_Pin|USER_SW0_Pin 
 8001450:	f641 4303 	movw	r3, #7171	; 0x1c03
 8001454:	61fb      	str	r3, [r7, #28]
                          |USER_SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4814      	ldr	r0, [pc, #80]	; (80014b8 <MX_GPIO_Init+0x19c>)
 8001466:	f002 fab1 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ALIVE_Pin POWER_Pin */
  GPIO_InitStruct.Pin = ALIVE_Pin|POWER_Pin;
 800146a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_GPIO_Init+0x19c>)
 8001484:	f002 faa2 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001488:	2303      	movs	r3, #3
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001498:	2308      	movs	r3, #8
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_GPIO_Init+0x198>)
 80014a4:	f002 fa92 	bl	80039cc <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58021000 	.word	0x58021000
 80014b8:	58020c00 	.word	0x58020c00
 80014bc:	58020400 	.word	0x58020400

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_MspInit+0x30>)
 80014d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_MspInit+0x30>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_MspInit+0x30>)
 80014e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	58024400 	.word	0x58024400

08001504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <HAL_ADC_MspInit+0x80>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d129      	bne.n	800157a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_MspInit+0x84>)
 8001528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800152c:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_ADC_MspInit+0x84>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_ADC_MspInit+0x84>)
 8001538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_ADC_MspInit+0x84>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0x84>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_ADC_MspInit+0x84>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_ADC_MspInit+0x88>)
 8001576:	f002 fa29 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000
 8001588:	58024400 	.word	0x58024400
 800158c:	58020800 	.word	0x58020800

08001590 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <HAL_FDCAN_MspInit+0x118>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d138      	bne.n	8001624 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a3c      	ldr	r2, [pc, #240]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 80015ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10e      	bne.n	80015e2 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ca:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001600:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001612:	2309      	movs	r3, #9
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4825      	ldr	r0, [pc, #148]	; (80016b4 <HAL_FDCAN_MspInit+0x124>)
 800161e:	f002 f9d5 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001622:	e03c      	b.n	800169e <HAL_FDCAN_MspInit+0x10e>
  else if(hfdcan->Instance==FDCAN2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_FDCAN_MspInit+0x128>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d137      	bne.n	800169e <HAL_FDCAN_MspInit+0x10e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 8001636:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_FDCAN_MspInit+0x11c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10e      	bne.n	800165e <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001642:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001646:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001652:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_FDCAN_MspInit+0x120>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800167c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800168e:	2309      	movs	r3, #9
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <HAL_FDCAN_MspInit+0x12c>)
 800169a:	f002 f997 	bl	80039cc <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	4000a000 	.word	0x4000a000
 80016ac:	240001fc 	.word	0x240001fc
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58020000 	.word	0x58020000
 80016b8:	4000a400 	.word	0x4000a400
 80016bc:	58020400 	.word	0x58020400

080016c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_I2C_MspInit+0x88>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12e      	bne.n	8001740 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_I2C_MspInit+0x8c>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001700:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001712:	2304      	movs	r3, #4
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <HAL_I2C_MspInit+0x90>)
 800171e:	f002 f955 	bl	80039cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_I2C_MspInit+0x8c>)
 8001724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x8c>)
 800172a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800172e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x8c>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40005800 	.word	0x40005800
 800174c:	58024400 	.word	0x58024400
 8001750:	58020400 	.word	0x58020400

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_SPI_MspInit+0x88>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12d      	bne.n	80017d2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 800177e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017b2:	2374      	movs	r3, #116	; 0x74
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017c2:	2305      	movs	r3, #5
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_SPI_MspInit+0x90>)
 80017ce:	f002 f8fd 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013400 	.word	0x40013400
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58021000 	.word	0x58021000

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_TIM_Base_MspInit+0x90>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10f      	bne.n	800181a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 80017fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 800180c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001818:	e028      	b.n	800186c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001822:	d10f      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
}
 8001842:	e013      	b.n	800186c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM4)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_TIM_Base_MspInit+0x98>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10e      	bne.n	800186c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001854:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_TIM_Base_MspInit+0x94>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40010000 	.word	0x40010000
 800187c:	58024400 	.word	0x58024400
 8001880:	40000800 	.word	0x40000800

08001884 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_TIM_PWM_MspInit+0x40>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189c:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_PWM_MspInit+0x40>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_PWM_MspInit+0x40>)
 80018a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40000400 	.word	0x40000400
 80018c4:	58024400 	.word	0x58024400

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5a      	ldr	r2, [pc, #360]	; (8001a50 <HAL_TIM_MspPostInit+0x188>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d120      	bne.n	800192c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800191a:	2301      	movs	r3, #1
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	484c      	ldr	r0, [pc, #304]	; (8001a58 <HAL_TIM_MspPostInit+0x190>)
 8001926:	f002 f851 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800192a:	e08d      	b.n	8001a48 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d11f      	bne.n	8001976 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193c:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001964:	2301      	movs	r3, #1
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	483a      	ldr	r0, [pc, #232]	; (8001a58 <HAL_TIM_MspPostInit+0x190>)
 8001970:	f002 f82c 	bl	80039cc <HAL_GPIO_Init>
}
 8001974:	e068      	b.n	8001a48 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <HAL_TIM_MspPostInit+0x194>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d13e      	bne.n	80019fe <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019cc:	2302      	movs	r3, #2
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	4820      	ldr	r0, [pc, #128]	; (8001a58 <HAL_TIM_MspPostInit+0x190>)
 80019d8:	f001 fff8 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019dc:	2301      	movs	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ec:	2302      	movs	r3, #2
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	481a      	ldr	r0, [pc, #104]	; (8001a60 <HAL_TIM_MspPostInit+0x198>)
 80019f8:	f001 ffe8 	bl	80039cc <HAL_GPIO_Init>
}
 80019fc:	e024      	b.n	8001a48 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM4)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <HAL_TIM_MspPostInit+0x19c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d11f      	bne.n	8001a48 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_TIM_MspPostInit+0x18c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a26:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <HAL_TIM_MspPostInit+0x198>)
 8001a44:	f001 ffc2 	bl	80039cc <HAL_GPIO_Init>
}
 8001a48:	bf00      	nop
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40010000 	.word	0x40010000
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58020000 	.word	0x58020000
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	58020400 	.word	0x58020400
 8001a64:	40000800 	.word	0x40000800

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b092      	sub	sp, #72	; 0x48
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a93      	ldr	r2, [pc, #588]	; (8001cd4 <HAL_UART_MspInit+0x26c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d14e      	bne.n	8001b28 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a8a:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a90:	4a91      	ldr	r2, [pc, #580]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a9a:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	4a8a      	ldr	r2, [pc, #552]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab8:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	4b84      	ldr	r3, [pc, #528]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	4a82      	ldr	r2, [pc, #520]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad6:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8001ae4:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001af6:	2308      	movs	r3, #8
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001afe:	4619      	mov	r1, r3
 8001b00:	4876      	ldr	r0, [pc, #472]	; (8001cdc <HAL_UART_MspInit+0x274>)
 8001b02:	f001 ff63 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b06:	2304      	movs	r3, #4
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b16:	2308      	movs	r3, #8
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1e:	4619      	mov	r1, r3
 8001b20:	486f      	ldr	r0, [pc, #444]	; (8001ce0 <HAL_UART_MspInit+0x278>)
 8001b22:	f001 ff53 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b26:	e0d0      	b.n	8001cca <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6d      	ldr	r2, [pc, #436]	; (8001ce4 <HAL_UART_MspInit+0x27c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12f      	bne.n	8001b92 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b32:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b42:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	4a60      	ldr	r2, [pc, #384]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b60:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b80:	2307      	movs	r3, #7
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4857      	ldr	r0, [pc, #348]	; (8001ce8 <HAL_UART_MspInit+0x280>)
 8001b8c:	f001 ff1e 	bl	80039cc <HAL_GPIO_Init>
}
 8001b90:	e09b      	b.n	8001cca <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a55      	ldr	r2, [pc, #340]	; (8001cec <HAL_UART_MspInit+0x284>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d12e      	bne.n	8001bfa <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba2:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bd8:	230c      	movs	r3, #12
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be8:	2307      	movs	r3, #7
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	483d      	ldr	r0, [pc, #244]	; (8001ce8 <HAL_UART_MspInit+0x280>)
 8001bf4:	f001 feea 	bl	80039cc <HAL_GPIO_Init>
}
 8001bf8:	e067      	b.n	8001cca <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART3)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <HAL_UART_MspInit+0x288>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d12f      	bne.n	8001c64 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c52:	2307      	movs	r3, #7
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <HAL_UART_MspInit+0x278>)
 8001c5e:	f001 feb5 	bl	80039cc <HAL_GPIO_Init>
}
 8001c62:	e032      	b.n	8001cca <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART6)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_UART_MspInit+0x28c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12d      	bne.n	8001cca <HAL_UART_MspInit+0x262>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_UART_MspInit+0x270>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <HAL_UART_MspInit+0x274>)
 8001cc6:	f001 fe81 	bl	80039cc <HAL_GPIO_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	3748      	adds	r7, #72	; 0x48
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40005000 	.word	0x40005000
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58020800 	.word	0x58020800
 8001ce0:	58020c00 	.word	0x58020c00
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	58020000 	.word	0x58020000
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40004800 	.word	0x40004800
 8001cf4:	40011400 	.word	0x40011400

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 f99a 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
	}

return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fc1d 	bl	80005e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
	}
	return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x16>
		heap_end = &end;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <_sbrk+0x50>)
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <_sbrk+0x54>)
 8001e44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <_sbrk+0x50>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <_sbrk+0x50>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	466a      	mov	r2, sp
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d907      	bls.n	8001e6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e5a:	f008 fc3f 	bl	800a6dc <__errno>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	230c      	movs	r3, #12
 8001e62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	e006      	b.n	8001e78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <_sbrk+0x50>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <_sbrk+0x50>)
 8001e74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	24000200 	.word	0x24000200
 8001e84:	24000848 	.word	0x24000848

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <SystemInit+0xac>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <SystemInit+0xac>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <SystemInit+0xb0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <SystemInit+0xb0>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <SystemInit+0xb0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <SystemInit+0xb0>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4921      	ldr	r1, [pc, #132]	; (8001f38 <SystemInit+0xb0>)
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <SystemInit+0xb4>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <SystemInit+0xb0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <SystemInit+0xb0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <SystemInit+0xb0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <SystemInit+0xb0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <SystemInit+0xb0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <SystemInit+0xb0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <SystemInit+0xb0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <SystemInit+0xb0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <SystemInit+0xb0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <SystemInit+0xb0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SystemInit+0xb0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <SystemInit+0xb0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <SystemInit+0xb0>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <SystemInit+0xb0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <SystemInit+0xb8>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <SystemInit+0xbc>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1a:	d202      	bcs.n	8001f22 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <SystemInit+0xc0>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SystemInit+0xac>)
 8001f24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f28:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f40:	5c001000 	.word	0x5c001000
 8001f44:	ffff0000 	.word	0xffff0000
 8001f48:	51008108 	.word	0x51008108

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f52:	e003      	b.n	8001f5c <LoopCopyDataInit>

08001f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f5a:	3104      	adds	r1, #4

08001f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f5c:	480b      	ldr	r0, [pc, #44]	; (8001f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f64:	d3f6      	bcc.n	8001f54 <CopyDataInit>
  ldr  r2, =_sbss
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f68:	e002      	b.n	8001f70 <LoopFillZerobss>

08001f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f6c:	f842 3b04 	str.w	r3, [r2], #4

08001f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f74:	d3f9      	bcc.n	8001f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f76:	f7ff ff87 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f008 fbb5 	bl	800a6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe fb45 	bl	800060c <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f88:	0800cb90 	.word	0x0800cb90
  ldr  r0, =_sdata
 8001f8c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f90:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8001f94:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8001f98:	24000848 	.word	0x24000848

08001f9c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC3_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	f001 f976 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fac:	f002 fdc8 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_Init+0x68>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_Init+0x6c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_Init+0x68>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_Init+0x6c>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_Init+0x70>)
 8001fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_Init+0x74>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f814 	bl	8002018 <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e002      	b.n	8002000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffa:	f7ff fa69 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58024400 	.word	0x58024400
 800200c:	0800c8e4 	.word	0x0800c8e4
 8002010:	24000004 	.word	0x24000004
 8002014:	24000000 	.word	0x24000000

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_InitTick+0x60>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e021      	b.n	8002070 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_InitTick+0x64>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_InitTick+0x60>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f001 f94d 	bl	80032e2 <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f001 f925 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x68>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2400000c 	.word	0x2400000c
 800207c:	24000000 	.word	0x24000000
 8002080:	24000008 	.word	0x24000008

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2400000c 	.word	0x2400000c
 80020a8:	24000840 	.word	0x24000840

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	24000840 	.word	0x24000840

080020c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetREVID+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0c1b      	lsrs	r3, r3, #16
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	5c001000 	.word	0x5c001000

080020dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	430b      	orrs	r3, r1
 8002170:	4313      	orrs	r3, r2
 8002172:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bc90      	pop	{r4, r7}
 800217c:	4770      	bx	lr

0800217e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	611a      	str	r2, [r3, #16]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80021b0:	b490      	push	{r4, r7}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3360      	adds	r3, #96	; 0x60
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	6023      	str	r3, [r4, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc90      	pop	{r4, r7}
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3330      	adds	r3, #48	; 0x30
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	4413      	add	r3, r2
 80021fe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	211f      	movs	r1, #31
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	f003 011f 	and.w	r1, r3, #31
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bc90      	pop	{r4, r7}
 8002230:	4770      	bx	lr

08002232 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002232:	b490      	push	{r4, r7}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3314      	adds	r3, #20
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0e5b      	lsrs	r3, r3, #25
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0d1b      	lsrs	r3, r3, #20
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2107      	movs	r1, #7
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	401a      	ands	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bc90      	pop	{r4, r7}
 8002280:	4770      	bx	lr
	...

08002284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0318 	and.w	r3, r3, #24
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a8:	40d9      	lsrs	r1, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	400b      	ands	r3, r1
 80022ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	000fffff 	.word	0x000fffff

080022cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6093      	str	r3, [r2, #8]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	5fffffc0 	.word	0x5fffffc0

080022f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d101      	bne.n	800230a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <LL_ADC_EnableInternalRegulator+0x24>)
 8002326:	4013      	ands	r3, r2
 8002328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	6fffffc0 	.word	0x6fffffc0

08002340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002354:	d101      	bne.n	800235a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <LL_ADC_IsEnabled+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <LL_ADC_IsEnabled+0x1a>
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e18e      	b.n	8002714 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff f87d 	bl	8001504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff67 	bl	80022f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff4d 	bl	80022cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff82 	bl	8002340 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff66 	bl	8002318 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800244c:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <HAL_ADC_Init+0x2dc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	4a9a      	ldr	r2, [pc, #616]	; (80026bc <HAL_ADC_Init+0x2e0>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff66 	bl	8002340 <LL_ADC_IsInternalRegulatorEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff77 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80024a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8129 	bne.w	8002702 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8125 	bne.w	8002702 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff4b 	bl	8002368 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d136      	bne.n	8002546 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a78      	ldr	r2, [pc, #480]	; (80026c0 <HAL_ADC_Init+0x2e4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_Init+0x110>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a77      	ldr	r2, [pc, #476]	; (80026c4 <HAL_ADC_Init+0x2e8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d10e      	bne.n	800250a <HAL_ADC_Init+0x12e>
 80024ec:	4874      	ldr	r0, [pc, #464]	; (80026c0 <HAL_ADC_Init+0x2e4>)
 80024ee:	f7ff ff3b 	bl	8002368 <LL_ADC_IsEnabled>
 80024f2:	4604      	mov	r4, r0
 80024f4:	4873      	ldr	r0, [pc, #460]	; (80026c4 <HAL_ADC_Init+0x2e8>)
 80024f6:	f7ff ff37 	bl	8002368 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4323      	orrs	r3, r4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	e008      	b.n	800251c <HAL_ADC_Init+0x140>
 800250a:	486f      	ldr	r0, [pc, #444]	; (80026c8 <HAL_ADC_Init+0x2ec>)
 800250c:	f7ff ff2c 	bl	8002368 <LL_ADC_IsEnabled>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_ADC_Init+0x2e4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Init+0x158>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_ADC_Init+0x2e8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_ADC_Init+0x15c>
 8002534:	4a65      	ldr	r2, [pc, #404]	; (80026cc <HAL_ADC_Init+0x2f0>)
 8002536:	e000      	b.n	800253a <HAL_ADC_Init+0x15e>
 8002538:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_ADC_Init+0x2f4>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7ff fdcb 	bl	80020dc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002546:	f7ff fdbd 	bl	80020c4 <HAL_GetREVID>
 800254a:	4602      	mov	r2, r0
 800254c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002550:	429a      	cmp	r2, r3
 8002552:	d914      	bls.n	800257e <HAL_ADC_Init+0x1a2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b10      	cmp	r3, #16
 800255a:	d110      	bne.n	800257e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7d5b      	ldrb	r3, [r3, #21]
 8002560:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002566:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800256c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7f1b      	ldrb	r3, [r3, #28]
 8002572:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002574:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002576:	f043 030c 	orr.w	r3, r3, #12
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e00d      	b.n	800259a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7d5b      	ldrb	r3, [r3, #21]
 8002582:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002588:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800258e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7f1b      	ldrb	r3, [r3, #28]
 8002594:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7f1b      	ldrb	r3, [r3, #28]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d106      	bne.n	80025b0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	045b      	lsls	r3, r3, #17
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_ADC_Init+0x2f8>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	430b      	orrs	r3, r1
 80025de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fed2 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80025ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fedf 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 80025f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d14a      	bne.n	8002694 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d147      	bne.n	8002694 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7d1b      	ldrb	r3, [r3, #20]
 8002608:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_ADC_Init+0x2fc>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	430b      	orrs	r3, r1
 8002624:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262c:	2b01      	cmp	r3, #1
 800262e:	d11b      	bne.n	8002668 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_ADC_Init+0x300>)
 800263e:	4013      	ands	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002644:	3a01      	subs	r2, #1
 8002646:	0411      	lsls	r1, r2, #16
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002658:	430a      	orrs	r2, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	e007      	b.n	8002678 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fb58 	bl	8002d44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d121      	bne.n	80026e0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f023 010f 	bic.w	r1, r3, #15
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	1e5a      	subs	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
 80026b4:	e01c      	b.n	80026f0 <HAL_ADC_Init+0x314>
 80026b6:	bf00      	nop
 80026b8:	24000000 	.word	0x24000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40022100 	.word	0x40022100
 80026c8:	58026000 	.word	0x58026000
 80026cc:	40022300 	.word	0x40022300
 80026d0:	58026300 	.word	0x58026300
 80026d4:	fff0c003 	.word	0xfff0c003
 80026d8:	ffffbffc 	.word	0xffffbffc
 80026dc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020f 	bic.w	r2, r2, #15
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f023 0303 	bic.w	r3, r3, #3
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002700:	e007      	b.n	8002712 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002712:	7ffb      	ldrb	r3, [r7, #31]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}

0800271c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b099      	sub	sp, #100	; 0x64
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a99      	ldr	r2, [pc, #612]	; (800299c <HAL_ADC_ConfigChannel+0x280>)
 8002736:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x2a>
 8002742:	2302      	movs	r3, #2
 8002744:	e2e6      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5f8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe1b 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 82cb 	bne.w	8002cf6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002768:	2b00      	cmp	r3, #0
 800276a:	d108      	bne.n	800277e <HAL_ADC_ConfigChannel+0x62>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	e00f      	b.n	800279e <HAL_ADC_ConfigChannel+0x82>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2201      	movs	r2, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	69d1      	ldr	r1, [r2, #28]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff fd11 	bl	80021e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fde3 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80027c8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fdf0 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 80027d4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 80b3 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 80af 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f7ff fd1d 	bl	8002232 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027f8:	4b69      	ldr	r3, [pc, #420]	; (80029a0 <HAL_ADC_ConfigChannel+0x284>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002804:	d10b      	bne.n	800281e <HAL_ADC_ConfigChannel+0x102>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	e01d      	b.n	800285a <HAL_ADC_ConfigChannel+0x13e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x128>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	e00a      	b.n	800285a <HAL_ADC_ConfigChannel+0x13e>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d027      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6919      	ldr	r1, [r3, #16]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002872:	f7ff fc67 	bl	8002144 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6919      	ldr	r1, [r3, #16]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7e5b      	ldrb	r3, [r3, #25]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_ADC_ConfigChannel+0x170>
 8002886:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800288a:	e000      	b.n	800288e <HAL_ADC_ConfigChannel+0x172>
 800288c:	2300      	movs	r3, #0
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff fc8e 	bl	80021b0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6919      	ldr	r1, [r3, #16]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x18e>
 80028a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028a8:	e000      	b.n	80028ac <HAL_ADC_ConfigChannel+0x190>
 80028aa:	2300      	movs	r3, #0
 80028ac:	461a      	mov	r2, r3
 80028ae:	f7ff fc66 	bl	800217e <LL_ADC_SetDataRightShift>
 80028b2:	e047      	b.n	8002944 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002942:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fd0d 	bl	8002368 <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 81d9 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f7ff fc8e 	bl	8002284 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_ADC_ConfigChannel+0x280>)
 800296e:	4293      	cmp	r3, r2
 8002970:	f040 8101 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x288>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	3301      	adds	r3, #1
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2b09      	cmp	r3, #9
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e016      	b.n	80029ca <HAL_ADC_ConfigChannel+0x2ae>
 800299c:	47ff0000 	.word	0x47ff0000
 80029a0:	5c001000 	.word	0x5c001000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d064      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x2ce>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	3301      	adds	r3, #1
 80029e2:	069b      	lsls	r3, r3, #26
 80029e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e8:	e00e      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x2ec>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x30c>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	e010      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x32e>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	ea42 0103 	orr.w	r1, r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x354>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	3301      	adds	r3, #1
 8002a62:	f003 021f 	and.w	r2, r3, #31
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	e011      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x378>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a94:	430b      	orrs	r3, r1
 8002a96:	e069      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x398>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	3301      	adds	r3, #1
 8002aac:	069b      	lsls	r3, r3, #26
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab2:	e00e      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3b6>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	069b      	lsls	r3, r3, #26
 8002ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x3d6>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	e010      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x3f8>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	617b      	str	r3, [r7, #20]
  return result;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10d      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x424>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	3b1e      	subs	r3, #30
 8002b38:	051b      	lsls	r3, r3, #20
 8002b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	e014      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x44e>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
  return result;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	051b      	lsls	r3, r3, #20
 8002b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7ff fb5e 	bl	8002232 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f280 80c4 	bge.w	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x478>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x47c>
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_ADC_ConfigChannel+0x608>)
 8002b96:	e000      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x47e>
 8002b98:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_ADC_ConfigChannel+0x60c>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fac4 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 8002ba0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5d      	ldr	r2, [pc, #372]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x49a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x4b8>
 8002bb6:	4859      	ldr	r0, [pc, #356]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002bb8:	f7ff fbd6 	bl	8002368 <LL_ADC_IsEnabled>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	4858      	ldr	r0, [pc, #352]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002bc0:	f7ff fbd2 	bl	8002368 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4323      	orrs	r3, r4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e008      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x4ca>
 8002bd4:	4855      	ldr	r0, [pc, #340]	; (8002d2c <HAL_ADC_ConfigChannel+0x610>)
 8002bd6:	f7ff fbc7 	bl	8002368 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07b      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_ADC_ConfigChannel+0x614>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d12e      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x536>
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d129      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_ADC_ConfigChannel+0x610>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d17f      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a43      	ldr	r2, [pc, #268]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x500>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a42      	ldr	r2, [pc, #264]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x504>
 8002c1c:	4a41      	ldr	r2, [pc, #260]	; (8002d24 <HAL_ADC_ConfigChannel+0x608>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x506>
 8002c20:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <HAL_ADC_ConfigChannel+0x60c>)
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7ff fa69 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_ADC_ConfigChannel+0x618>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <HAL_ADC_ConfigChannel+0x61c>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002c42:	e002      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c50:	e05a      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	; (8002d3c <HAL_ADC_ConfigChannel+0x620>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d11e      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x57e>
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_ADC_ConfigChannel+0x610>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d14b      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x568>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x56c>
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_ADC_ConfigChannel+0x608>)
 8002c86:	e000      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x56e>
 8002c88:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <HAL_ADC_ConfigChannel+0x60c>)
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f7ff fa35 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c98:	e036      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_ADC_ConfigChannel+0x624>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d131      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12c      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_ADC_ConfigChannel+0x610>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d127      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_ADC_ConfigChannel+0x600>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x5b0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_ADC_ConfigChannel+0x604>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x5b4>
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_ADC_ConfigChannel+0x608>)
 8002cce:	e000      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x5b6>
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_ADC_ConfigChannel+0x60c>)
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7ff fa11 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
 8002ce0:	e012      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cf4:	e008      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3764      	adds	r7, #100	; 0x64
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40022100 	.word	0x40022100
 8002d24:	40022300 	.word	0x40022300
 8002d28:	58026300 	.word	0x58026300
 8002d2c:	58026000 	.word	0x58026000
 8002d30:	cb840000 	.word	0xcb840000
 8002d34:	24000000 	.word	0x24000000
 8002d38:	053e2d63 	.word	0x053e2d63
 8002d3c:	c7520000 	.word	0xc7520000
 8002d40:	cfb80000 	.word	0xcfb80000

08002d44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a70      	ldr	r2, [pc, #448]	; (8002f14 <ADC_ConfigureBoostMode+0x1d0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <ADC_ConfigureBoostMode+0x1c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <ADC_ConfigureBoostMode+0x1d4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d109      	bne.n	8002d74 <ADC_ConfigureBoostMode+0x30>
 8002d60:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <ADC_ConfigureBoostMode+0x1d8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e008      	b.n	8002d86 <ADC_ConfigureBoostMode+0x42>
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <ADC_ConfigureBoostMode+0x1dc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01a      	beq.n	8002dc0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d8a:	f002 f84b 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8002d8e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d98:	d006      	beq.n	8002da8 <ADC_ConfigureBoostMode+0x64>
 8002d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d9e:	d00b      	beq.n	8002db8 <ADC_ConfigureBoostMode+0x74>
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d000      	beq.n	8002da8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002da6:	e05d      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	60fb      	str	r3, [r7, #12]
        break;
 8002db6:	e055      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	60fb      	str	r3, [r7, #12]
        break;
 8002dbe:	e051      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002dc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dc4:	f002 ff68 	bl	8005c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dc8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dd2:	d02a      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
 8002dd4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dd8:	d813      	bhi.n	8002e02 <ADC_ConfigureBoostMode+0xbe>
 8002dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dde:	d024      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
 8002de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002de4:	d806      	bhi.n	8002df4 <ADC_ConfigureBoostMode+0xb0>
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d01e      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
 8002dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002df0:	d01b      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002df2:	e037      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df8:	d017      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
 8002dfa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dfe:	d014      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002e00:	e030      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e06:	d021      	beq.n	8002e4c <ADC_ConfigureBoostMode+0x108>
 8002e08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e0c:	d806      	bhi.n	8002e1c <ADC_ConfigureBoostMode+0xd8>
 8002e0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e12:	d013      	beq.n	8002e3c <ADC_ConfigureBoostMode+0xf8>
 8002e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e18:	d014      	beq.n	8002e44 <ADC_ConfigureBoostMode+0x100>
        break;
 8002e1a:	e023      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e20:	d018      	beq.n	8002e54 <ADC_ConfigureBoostMode+0x110>
 8002e22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e26:	d019      	beq.n	8002e5c <ADC_ConfigureBoostMode+0x118>
        break;
 8002e28:	e01c      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	60fb      	str	r3, [r7, #12]
        break;
 8002e3a:	e013      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
      break;
 8002e42:	e00f      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	60fb      	str	r3, [r7, #12]
        break;
 8002e4a:	e00b      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	60fb      	str	r3, [r7, #12]
        break;
 8002e52:	e007      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	09db      	lsrs	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
        break;
 8002e5a:	e003      	b.n	8002e64 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	60fb      	str	r3, [r7, #12]
        break;
 8002e62:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e64:	f7ff f92e 	bl	80020c4 <HAL_GetREVID>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d815      	bhi.n	8002e9e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <ADC_ConfigureBoostMode+0x1e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d908      	bls.n	8002e8c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e88:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e8a:	e03e      	b.n	8002f0a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	e035      	b.n	8002f0a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <ADC_ConfigureBoostMode+0x1e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d808      	bhi.n	8002ebe <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	e025      	b.n	8002f0a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <ADC_ConfigureBoostMode+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d80a      	bhi.n	8002edc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	e016      	b.n	8002f0a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <ADC_ConfigureBoostMode+0x1ec>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d80a      	bhi.n	8002efa <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	e007      	b.n	8002f0a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f08:	609a      	str	r2, [r3, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40022100 	.word	0x40022100
 8002f1c:	40022300 	.word	0x40022300
 8002f20:	58026300 	.word	0x58026300
 8002f24:	01312d00 	.word	0x01312d00
 8002f28:	005f5e10 	.word	0x005f5e10
 8002f2c:	00bebc20 	.word	0x00bebc20
 8002f30:	017d7840 	.word	0x017d7840

08002f34 <LL_ADC_IsEnabled>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_IsEnabled+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_IsEnabled+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b09f      	sub	sp, #124	; 0x7c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0ba      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d102      	bne.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	e001      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e09d      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffbd 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffb7 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d17f      	bne.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d17c      	bne.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a47      	ldr	r2, [pc, #284]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a46      	ldr	r2, [pc, #280]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800300c:	4b45      	ldr	r3, [pc, #276]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800300e:	e000      	b.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003012:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d039      	beq.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	431a      	orrs	r2, r3
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3a      	ldr	r2, [pc, #232]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a38      	ldr	r2, [pc, #224]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10e      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003042:	4836      	ldr	r0, [pc, #216]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003044:	f7ff ff76 	bl	8002f34 <LL_ADC_IsEnabled>
 8003048:	4604      	mov	r4, r0
 800304a:	4835      	ldr	r0, [pc, #212]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800304c:	f7ff ff72 	bl	8002f34 <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	4323      	orrs	r3, r4
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e008      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003060:	4832      	ldr	r0, [pc, #200]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003062:	f7ff ff67 	bl	8002f34 <LL_ADC_IsEnabled>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d047      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800307c:	4013      	ands	r3, r2
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800308e:	e03a      	b.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10e      	bne.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80030b0:	481a      	ldr	r0, [pc, #104]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030b2:	f7ff ff3f 	bl	8002f34 <LL_ADC_IsEnabled>
 80030b6:	4604      	mov	r4, r0
 80030b8:	4819      	ldr	r0, [pc, #100]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030ba:	f7ff ff3b 	bl	8002f34 <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	4323      	orrs	r3, r4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e008      	b.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80030ce:	4817      	ldr	r0, [pc, #92]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030d0:	f7ff ff30 	bl	8002f34 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030f0:	e009      	b.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003104:	e000      	b.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003106:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003110:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003114:	4618      	mov	r0, r3
 8003116:	377c      	adds	r7, #124	; 0x7c
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	40022000 	.word	0x40022000
 8003120:	40022100 	.word	0x40022100
 8003124:	40022300 	.word	0x40022300
 8003128:	58026300 	.word	0x58026300
 800312c:	58026000 	.word	0x58026000
 8003130:	fffff0e0 	.word	0xfffff0e0

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <__NVIC_SetPriorityGrouping+0x40>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x40>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00
 8003178:	05fa0000 	.word	0x05fa0000

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff47 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff5e 	bl	800317c <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff90 	bl	80031ec <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5f 	bl	8003198 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffb2 	bl	8003254 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b098      	sub	sp, #96	; 0x60
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003304:	4a84      	ldr	r2, [pc, #528]	; (8003518 <HAL_FDCAN_Init+0x21c>)
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	4611      	mov	r1, r2
 800330c:	224c      	movs	r2, #76	; 0x4c
 800330e:	4618      	mov	r0, r3
 8003310:	f007 fa0e 	bl	800a730 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1ca      	b.n	80036b4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7e      	ldr	r2, [pc, #504]	; (800351c <HAL_FDCAN_Init+0x220>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d106      	bne.n	8003336 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe f920 	bl	8001590 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0210 	bic.w	r2, r2, #16
 800335e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003360:	f7fe fea4 	bl	80020ac <HAL_GetTick>
 8003364:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003366:	e014      	b.n	8003392 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003368:	f7fe fea0 	bl	80020ac <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b0a      	cmp	r3, #10
 8003374:	d90d      	bls.n	8003392 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e190      	b.n	80036b4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d0e3      	beq.n	8003368 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b0:	f7fe fe7c 	bl	80020ac <HAL_GetTick>
 80033b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033b6:	e014      	b.n	80033e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033b8:	f7fe fe78 	bl	80020ac <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d90d      	bls.n	80033e2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e168      	b.n	80036b4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0e3      	beq.n	80033b8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0202 	orr.w	r2, r2, #2
 80033fe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7c1b      	ldrb	r3, [r3, #16]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e007      	b.n	800342a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003428:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7c5b      	ldrb	r3, [r3, #17]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003440:	619a      	str	r2, [r3, #24]
 8003442:	e007      	b.n	8003454 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003452:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7c9b      	ldrb	r3, [r3, #18]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800346a:	619a      	str	r2, [r3, #24]
 800346c:	e007      	b.n	800347e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80034a2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0210 	bic.w	r2, r2, #16
 80034b2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0204 	orr.w	r2, r2, #4
 80034ca:	619a      	str	r2, [r3, #24]
 80034cc:	e030      	b.n	8003530 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02c      	beq.n	8003530 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d020      	beq.n	8003520 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0210 	orr.w	r2, r2, #16
 80034fc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d114      	bne.n	8003530 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	619a      	str	r2, [r3, #24]
 8003516:	e00b      	b.n	8003530 <HAL_FDCAN_Init+0x234>
 8003518:	0800c888 	.word	0x0800c888
 800351c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	3b01      	subs	r3, #1
 8003536:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	3b01      	subs	r3, #1
 800353e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003540:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003548:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	3b01      	subs	r3, #1
 8003552:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003558:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800355a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003564:	d115      	bne.n	8003592 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	3b01      	subs	r3, #1
 8003572:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003574:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	3b01      	subs	r3, #1
 800357c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800357e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	3b01      	subs	r3, #1
 8003588:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800358e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003590:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	4413      	add	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80035c6:	f023 0107 	bic.w	r1, r3, #7
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035d4:	4413      	add	r3, r2
 80035d6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035f4:	f023 0107 	bic.w	r1, r3, #7
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003602:	4413      	add	r3, r2
 8003604:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	2b00      	cmp	r3, #0
 8003618:	d013      	beq.n	8003642 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003622:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003630:	4413      	add	r3, r2
 8003632:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003636:	011a      	lsls	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	2b00      	cmp	r3, #0
 8003648:	d013      	beq.n	8003672 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003652:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003660:	4413      	add	r3, r2
 8003662:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003666:	021a      	lsls	r2, r3, #8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_FDCAN_Init+0x3c0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d107      	bne.n	800368c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f022 0203 	bic.w	r2, r2, #3
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f80b 	bl	80036c0 <FDCAN_CalcultateRamBlockAddresses>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80036b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3760      	adds	r7, #96	; 0x60
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	4000a000 	.word	0x4000a000

080036c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036d6:	4ba7      	ldr	r3, [pc, #668]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	0091      	lsls	r1, r2, #2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	430b      	orrs	r3, r1
 80036e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	4413      	add	r3, r2
 800370c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003716:	4b97      	ldr	r3, [pc, #604]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	0091      	lsls	r1, r2, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	430b      	orrs	r3, r1
 8003724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003758:	4b86      	ldr	r3, [pc, #536]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	0091      	lsls	r1, r2, #2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003772:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	041a      	lsls	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4413      	add	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037a0:	4b74      	ldr	r3, [pc, #464]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	0091      	lsls	r1, r2, #2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c2:	041a      	lsls	r2, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80037e8:	4b62      	ldr	r3, [pc, #392]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0091      	lsls	r1, r2, #2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003814:	4b57      	ldr	r3, [pc, #348]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	0091      	lsls	r1, r2, #2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800382e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	041a      	lsls	r2, r3, #16
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	4413      	add	r3, r2
 800384c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	0091      	lsls	r1, r2, #2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	430b      	orrs	r3, r1
 8003864:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003870:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800388c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	061a      	lsls	r2, r3, #24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80038a6:	4413      	add	r3, r2
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d915      	bls.n	800399c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003970:	e006      	b.n	8003980 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003972:	bf00      	nop
 8003974:	ffff0003 	.word	0xffff0003
 8003978:	10002b00 	.word	0x10002b00
 800397c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2203      	movs	r2, #3
 8003994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e010      	b.n	80039be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e005      	b.n	80039b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3f3      	bcc.n	80039a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	; 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039da:	4b89      	ldr	r3, [pc, #548]	; (8003c00 <HAL_GPIO_Init+0x234>)
 80039dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039de:	e194      	b.n	8003d0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8186 	beq.w	8003d04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d00b      	beq.n	8003a18 <HAL_GPIO_Init+0x4c>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d007      	beq.n	8003a18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a0c:	2b11      	cmp	r3, #17
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b12      	cmp	r3, #18
 8003a16:	d130      	bne.n	8003a7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a4e:	2201      	movs	r2, #1
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0201 	and.w	r2, r3, #1
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0xee>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b12      	cmp	r3, #18
 8003ab8:	d123      	bne.n	8003b02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0203 	and.w	r2, r3, #3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80e0 	beq.w	8003d04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b44:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_GPIO_Init+0x238>)
 8003b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b4a:	4a2e      	ldr	r2, [pc, #184]	; (8003c04 <HAL_GPIO_Init+0x238>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_GPIO_Init+0x238>)
 8003b56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b62:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <HAL_GPIO_Init+0x23c>)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_GPIO_Init+0x240>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d052      	beq.n	8003c34 <HAL_GPIO_Init+0x268>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <HAL_GPIO_Init+0x244>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_GPIO_Init+0x22e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <HAL_GPIO_Init+0x248>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <HAL_GPIO_Init+0x22a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_GPIO_Init+0x24c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d025      	beq.n	8003bf2 <HAL_GPIO_Init+0x226>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_GPIO_Init+0x250>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01f      	beq.n	8003bee <HAL_GPIO_Init+0x222>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_GPIO_Init+0x254>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d019      	beq.n	8003bea <HAL_GPIO_Init+0x21e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_GPIO_Init+0x258>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_GPIO_Init+0x21a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_GPIO_Init+0x25c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00d      	beq.n	8003be2 <HAL_GPIO_Init+0x216>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_GPIO_Init+0x260>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <HAL_GPIO_Init+0x212>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_GPIO_Init+0x264>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_GPIO_Init+0x20e>
 8003bd6:	2309      	movs	r3, #9
 8003bd8:	e02d      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bda:	230a      	movs	r3, #10
 8003bdc:	e02b      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bde:	2308      	movs	r3, #8
 8003be0:	e029      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003be2:	2307      	movs	r3, #7
 8003be4:	e027      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003be6:	2306      	movs	r3, #6
 8003be8:	e025      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bea:	2305      	movs	r3, #5
 8003bec:	e023      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e021      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e01f      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e01d      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01b      	b.n	8003c36 <HAL_GPIO_Init+0x26a>
 8003bfe:	bf00      	nop
 8003c00:	58000080 	.word	0x58000080
 8003c04:	58024400 	.word	0x58024400
 8003c08:	58000400 	.word	0x58000400
 8003c0c:	58020000 	.word	0x58020000
 8003c10:	58020400 	.word	0x58020400
 8003c14:	58020800 	.word	0x58020800
 8003c18:	58020c00 	.word	0x58020c00
 8003c1c:	58021000 	.word	0x58021000
 8003c20:	58021400 	.word	0x58021400
 8003c24:	58021800 	.word	0x58021800
 8003c28:	58021c00 	.word	0x58021c00
 8003c2c:	58022000 	.word	0x58022000
 8003c30:	58022400 	.word	0x58022400
 8003c34:	2300      	movs	r3, #0
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f002 0203 	and.w	r2, r2, #3
 8003c3c:	0092      	lsls	r2, r2, #2
 8003c3e:	4093      	lsls	r3, r2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c46:	4938      	ldr	r1, [pc, #224]	; (8003d28 <HAL_GPIO_Init+0x35c>)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f ae63 	bne.w	80039e0 <HAL_GPIO_Init+0x14>
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	; 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	58000400 	.word	0x58000400

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d48:	e003      	b.n	8003d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	041a      	lsls	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07f      	b.n	8003e72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fc9a 	bl	80016c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e006      	b.n	8003de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d104      	bne.n	8003dfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_I2C_Init+0x11c>)
 8003e06:	430b      	orrs	r3, r1
 8003e08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	ea42 0103 	orr.w	r1, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	02008000 	.word	0x02008000

08003e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d138      	bne.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e032      	b.n	8003f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d139      	bne.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e033      	b.n	8003fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2224      	movs	r2, #36	; 0x24
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_PWREx_ConfigSupply+0x70>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d00a      	beq.n	8003fda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_PWREx_ConfigSupply+0x70>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01f      	b.n	8004016 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e01d      	b.n	8004016 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_PWREx_ConfigSupply+0x70>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	490f      	ldr	r1, [pc, #60]	; (8004020 <HAL_PWREx_ConfigSupply+0x70>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fea:	f7fe f85f 	bl	80020ac <HAL_GetTick>
 8003fee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ff0:	e009      	b.n	8004006 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ff2:	f7fe f85b 	bl	80020ac <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004000:	d901      	bls.n	8004006 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e007      	b.n	8004016 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_PWREx_ConfigSupply+0x70>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d1ee      	bne.n	8003ff2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	58024800 	.word	0x58024800

08004024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e3c4      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8087 	beq.w	8004152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004044:	4ba2      	ldr	r3, [pc, #648]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800404e:	4ba0      	ldr	r3, [pc, #640]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	2b10      	cmp	r3, #16
 8004058:	d007      	beq.n	800406a <HAL_RCC_OscConfig+0x46>
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	2b18      	cmp	r3, #24
 800405e:	d110      	bne.n	8004082 <HAL_RCC_OscConfig+0x5e>
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d10b      	bne.n	8004082 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406a:	4b99      	ldr	r3, [pc, #612]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d06c      	beq.n	8004150 <HAL_RCC_OscConfig+0x12c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d168      	bne.n	8004150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e39e      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x76>
 800408c:	4b90      	ldr	r3, [pc, #576]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a8f      	ldr	r2, [pc, #572]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e02e      	b.n	80040f8 <HAL_RCC_OscConfig+0xd4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x98>
 80040a2:	4b8b      	ldr	r3, [pc, #556]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a8a      	ldr	r2, [pc, #552]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a87      	ldr	r2, [pc, #540]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xd4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0xbc>
 80040c6:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a81      	ldr	r2, [pc, #516]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b7f      	ldr	r3, [pc, #508]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7e      	ldr	r2, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xd4>
 80040e0:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7a      	ldr	r2, [pc, #488]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b78      	ldr	r3, [pc, #480]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a77      	ldr	r2, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd ffd4 	bl	80020ac <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fd ffd0 	bl	80020ac <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e352      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800411a:	4b6d      	ldr	r3, [pc, #436]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xe4>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd ffc0 	bl	80020ac <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fd ffbc 	bl	80020ac <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e33e      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x10c>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8092 	beq.w	8004284 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004168:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800416a:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_RCC_OscConfig+0x162>
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2b18      	cmp	r3, #24
 800417a:	d12d      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1b4>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d128      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004186:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x17a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e310      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	f7fd ff91 	bl	80020c4 <HAL_GetREVID>
 80041a2:	4602      	mov	r2, r0
 80041a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d80a      	bhi.n	80041c2 <HAL_RCC_OscConfig+0x19e>
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	031b      	lsls	r3, r3, #12
 80041ba:	4945      	ldr	r1, [pc, #276]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c0:	e060      	b.n	8004284 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	493f      	ldr	r1, [pc, #252]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d6:	e055      	b.n	8004284 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d038      	beq.n	8004252 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 0219 	bic.w	r2, r3, #25
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4938      	ldr	r1, [pc, #224]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd ff5b 	bl	80020ac <HAL_GetTick>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fd ff57 	bl	80020ac <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e2d9      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	f7fd ff54 	bl	80020c4 <HAL_GetREVID>
 800421c:	4602      	mov	r2, r0
 800421e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004222:	429a      	cmp	r2, r3
 8004224:	d80a      	bhi.n	800423c <HAL_RCC_OscConfig+0x218>
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	031b      	lsls	r3, r3, #12
 8004234:	4926      	ldr	r1, [pc, #152]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]
 800423a:	e023      	b.n	8004284 <HAL_RCC_OscConfig+0x260>
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	4921      	ldr	r1, [pc, #132]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
 8004250:	e018      	b.n	8004284 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd ff25 	bl	80020ac <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004266:	f7fd ff21 	bl	80020ac <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e2a3      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8091 	beq.w	80043b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d007      	beq.n	80042b8 <HAL_RCC_OscConfig+0x294>
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b18      	cmp	r3, #24
 80042ac:	d12f      	bne.n	800430e <HAL_RCC_OscConfig+0x2ea>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d12a      	bne.n	800430e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_RCC_OscConfig+0x2b0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d003      	beq.n	80042d4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e277      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
 80042d0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042d4:	f7fd fef6 	bl	80020c4 <HAL_GetREVID>
 80042d8:	4602      	mov	r2, r0
 80042da:	f241 0303 	movw	r3, #4099	; 0x1003
 80042de:	429a      	cmp	r2, r3
 80042e0:	d80a      	bhi.n	80042f8 <HAL_RCC_OscConfig+0x2d4>
 80042e2:	4ba2      	ldr	r3, [pc, #648]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	069b      	lsls	r3, r3, #26
 80042f0:	499e      	ldr	r1, [pc, #632]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f6:	e05d      	b.n	80043b4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f8:	4b9c      	ldr	r3, [pc, #624]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	4999      	ldr	r1, [pc, #612]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800430c:	e052      	b.n	80043b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d035      	beq.n	8004382 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004316:	4b95      	ldr	r3, [pc, #596]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a94      	ldr	r2, [pc, #592]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800431c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fd fec3 	bl	80020ac <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800432a:	f7fd febf 	bl	80020ac <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e241      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800433c:	4b8b      	ldr	r3, [pc, #556]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004348:	f7fd febc 	bl	80020c4 <HAL_GetREVID>
 800434c:	4602      	mov	r2, r0
 800434e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004352:	429a      	cmp	r2, r3
 8004354:	d80a      	bhi.n	800436c <HAL_RCC_OscConfig+0x348>
 8004356:	4b85      	ldr	r3, [pc, #532]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	069b      	lsls	r3, r3, #26
 8004364:	4981      	ldr	r1, [pc, #516]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
 800436a:	e023      	b.n	80043b4 <HAL_RCC_OscConfig+0x390>
 800436c:	4b7f      	ldr	r3, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	497c      	ldr	r1, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
 8004380:	e018      	b.n	80043b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004382:	4b7a      	ldr	r3, [pc, #488]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a79      	ldr	r2, [pc, #484]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd fe8d 	bl	80020ac <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004396:	f7fd fe89 	bl	80020ac <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e20b      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043a8:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d036      	beq.n	800442e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d019      	beq.n	80043fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80043ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043cc:	4a67      	ldr	r2, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd fe6a 	bl	80020ac <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd fe66 	bl	80020ac <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1e8      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ee:	4b5f      	ldr	r3, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80043f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x3b8>
 80043fa:	e018      	b.n	800442e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b5b      	ldr	r3, [pc, #364]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80043fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004400:	4a5a      	ldr	r2, [pc, #360]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fd fe50 	bl	80020ac <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004410:	f7fd fe4c 	bl	80020ac <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1ce      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004422:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d036      	beq.n	80044a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004442:	4b4a      	ldr	r3, [pc, #296]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a49      	ldr	r2, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800444c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800444e:	f7fd fe2d 	bl	80020ac <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004456:	f7fd fe29 	bl	80020ac <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1ab      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004468:	4b40      	ldr	r3, [pc, #256]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x432>
 8004474:	e018      	b.n	80044a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3c      	ldr	r2, [pc, #240]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800447c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004482:	f7fd fe13 	bl	80020ac <HAL_GetTick>
 8004486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800448a:	f7fd fe0f 	bl	80020ac <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e191      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800449c:	4b33      	ldr	r3, [pc, #204]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8086 	beq.w	80045c2 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b6:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <HAL_RCC_OscConfig+0x54c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x54c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c2:	f7fd fdf3 	bl	80020ac <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fd fdef 	bl	80020ac <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e171      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x54c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x4da>
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_RCC_OscConfig+0x548>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
 80044fc:	e02d      	b.n	800455a <HAL_RCC_OscConfig+0x536>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x4fc>
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x536>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x51e>
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_RCC_OscConfig+0x548>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x536>
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a06      	ldr	r2, [pc, #24]	; (800456c <HAL_RCC_OscConfig+0x548>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01a      	beq.n	8004598 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fd fda3 	bl	80020ac <HAL_GetTick>
 8004566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004568:	e00f      	b.n	800458a <HAL_RCC_OscConfig+0x566>
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
 8004570:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fd fd9a 	bl	80020ac <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e11a      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800458a:	4b8f      	ldr	r3, [pc, #572]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ee      	beq.n	8004574 <HAL_RCC_OscConfig+0x550>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fd fd88 	bl	80020ac <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fd fd84 	bl	80020ac <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e104      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045b6:	4b84      	ldr	r3, [pc, #528]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ee      	bne.n	80045a0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80f9 	beq.w	80047be <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045cc:	4b7e      	ldr	r3, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d4:	2b18      	cmp	r3, #24
 80045d6:	f000 80b4 	beq.w	8004742 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f040 8095 	bne.w	800470e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b78      	ldr	r3, [pc, #480]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a77      	ldr	r2, [pc, #476]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd fd5c 	bl	80020ac <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fd58 	bl	80020ac <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0da      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800460a:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004616:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	4b6c      	ldr	r3, [pc, #432]	; (80047cc <HAL_RCC_OscConfig+0x7a8>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	430a      	orrs	r2, r1
 800462a:	4967      	ldr	r1, [pc, #412]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	628b      	str	r3, [r1, #40]	; 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	3b01      	subs	r3, #1
 8004636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	3b01      	subs	r3, #1
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	b29b      	uxth	r3, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	3b01      	subs	r3, #1
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004660:	4959      	ldr	r1, [pc, #356]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004662:	4313      	orrs	r3, r2
 8004664:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004666:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004672:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCC_OscConfig+0x7ac>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800467e:	00d2      	lsls	r2, r2, #3
 8004680:	4951      	ldr	r1, [pc, #324]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f023 020c 	bic.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f023 0202 	bic.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	4948      	ldr	r1, [pc, #288]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a46      	ldr	r2, [pc, #280]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b6:	4b44      	ldr	r3, [pc, #272]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	4a40      	ldr	r2, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4a3d      	ldr	r2, [pc, #244]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd fce1 	bl	80020ac <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fd fcdd 	bl	80020ac <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e05f      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x6ca>
 800470c:	e057      	b.n	80047be <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd fcc7 	bl	80020ac <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fd fcc3 	bl	80020ac <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e045      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004734:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x6fe>
 8004740:	e03d      	b.n	80047be <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_OscConfig+0x7a4>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b01      	cmp	r3, #1
 8004754:	d031      	beq.n	80047ba <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d12a      	bne.n	80047ba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d122      	bne.n	80047ba <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d11a      	bne.n	80047ba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	0a5b      	lsrs	r3, r3, #9
 8004788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d111      	bne.n	80047ba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d108      	bne.n	80047ba <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3730      	adds	r7, #48	; 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	fffffc0c 	.word	0xfffffc0c
 80047d0:	ffff0007 	.word	0xffff0007

080047d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e19c      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d910      	bls.n	8004818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b87      	ldr	r3, [pc, #540]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 020f 	bic.w	r2, r3, #15
 80047fe:	4985      	ldr	r1, [pc, #532]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b83      	ldr	r3, [pc, #524]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e184      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004830:	429a      	cmp	r2, r3
 8004832:	d908      	bls.n	8004846 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004834:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	4975      	ldr	r1, [pc, #468]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004842:	4313      	orrs	r3, r2
 8004844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800485e:	429a      	cmp	r2, r3
 8004860:	d908      	bls.n	8004874 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004862:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	496a      	ldr	r1, [pc, #424]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004870:	4313      	orrs	r3, r2
 8004872:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	4b64      	ldr	r3, [pc, #400]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488c:	429a      	cmp	r2, r3
 800488e:	d908      	bls.n	80048a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	495e      	ldr	r1, [pc, #376]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d908      	bls.n	80048d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048be:	4b56      	ldr	r3, [pc, #344]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	4953      	ldr	r1, [pc, #332]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	4b4d      	ldr	r3, [pc, #308]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d908      	bls.n	80048fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f023 020f 	bic.w	r2, r3, #15
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4947      	ldr	r1, [pc, #284]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d055      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800490a:	4b43      	ldr	r3, [pc, #268]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4940      	ldr	r1, [pc, #256]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d107      	bne.n	8004934 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d121      	bne.n	8004974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0f6      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d107      	bne.n	800494c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d115      	bne.n	8004974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0ea      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004954:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0de      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0d6      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f023 0207 	bic.w	r2, r3, #7
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4925      	ldr	r1, [pc, #148]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fd fb91 	bl	80020ac <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498e:	f7fd fb8d 	bl	80020ac <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0be      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d1eb      	bne.n	800498e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d010      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d208      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f023 020f 	bic.w	r2, r3, #15
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCC_ClockConfig+0x244>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d214      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 020f 	bic.w	r2, r3, #15
 80049fa:	4906      	ldr	r1, [pc, #24]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <HAL_RCC_ClockConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e086      	b.n	8004b22 <HAL_RCC_ClockConfig+0x34e>
 8004a14:	52002000 	.word	0x52002000
 8004a18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d010      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d208      	bcs.n	8004a4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a38:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	4939      	ldr	r1, [pc, #228]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d208      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	492e      	ldr	r1, [pc, #184]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d208      	bcs.n	8004aa6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d208      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4917      	ldr	r1, [pc, #92]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ad4:	f000 f834 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x35c>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa21 f303 	lsr.w	r3, r1, r3
 8004af0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_RCC_ClockConfig+0x358>)
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <HAL_RCC_ClockConfig+0x35c>)
 8004afc:	5cd3      	ldrb	r3, [r2, r3]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x360>)
 8004b0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x364>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_ClockConfig+0x368>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd fa7e 	bl	8002018 <HAL_InitTick>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	0800c8e4 	.word	0x0800c8e4
 8004b34:	24000004 	.word	0x24000004
 8004b38:	24000000 	.word	0x24000000
 8004b3c:	24000008 	.word	0x24000008

08004b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	; 0x24
 8004b44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b46:	4baf      	ldr	r3, [pc, #700]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b4e:	2b18      	cmp	r3, #24
 8004b50:	f200 814e 	bhi.w	8004df0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004df1 	.word	0x08004df1
 8004b64:	08004df1 	.word	0x08004df1
 8004b68:	08004df1 	.word	0x08004df1
 8004b6c:	08004df1 	.word	0x08004df1
 8004b70:	08004df1 	.word	0x08004df1
 8004b74:	08004df1 	.word	0x08004df1
 8004b78:	08004df1 	.word	0x08004df1
 8004b7c:	08004be7 	.word	0x08004be7
 8004b80:	08004df1 	.word	0x08004df1
 8004b84:	08004df1 	.word	0x08004df1
 8004b88:	08004df1 	.word	0x08004df1
 8004b8c:	08004df1 	.word	0x08004df1
 8004b90:	08004df1 	.word	0x08004df1
 8004b94:	08004df1 	.word	0x08004df1
 8004b98:	08004df1 	.word	0x08004df1
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	08004df1 	.word	0x08004df1
 8004ba4:	08004df1 	.word	0x08004df1
 8004ba8:	08004df1 	.word	0x08004df1
 8004bac:	08004df1 	.word	0x08004df1
 8004bb0:	08004df1 	.word	0x08004df1
 8004bb4:	08004df1 	.word	0x08004df1
 8004bb8:	08004df1 	.word	0x08004df1
 8004bbc:	08004bf3 	.word	0x08004bf3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc0:	4b90      	ldr	r3, [pc, #576]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bcc:	4b8d      	ldr	r3, [pc, #564]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	4a8c      	ldr	r2, [pc, #560]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004bde:	e10a      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004be0:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004be2:	61bb      	str	r3, [r7, #24]
    break;
 8004be4:	e107      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004be6:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004be8:	61bb      	str	r3, [r7, #24]
    break;
 8004bea:	e104      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004bec:	4b88      	ldr	r3, [pc, #544]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004bee:	61bb      	str	r3, [r7, #24]
    break;
 8004bf0:	e101      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bf2:	4b84      	ldr	r3, [pc, #528]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c08:	4b7e      	ldr	r3, [pc, #504]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c12:	4b7c      	ldr	r3, [pc, #496]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	08db      	lsrs	r3, r3, #3
 8004c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80da 	beq.w	8004dea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d05a      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d302      	bcc.n	8004c46 <HAL_RCC_GetSysClockFreq+0x106>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d078      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004c44:	e099      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c46:	4b6f      	ldr	r3, [pc, #444]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02d      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	4a6a      	ldr	r2, [pc, #424]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c90:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004cac:	e087      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004e18 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf0:	e065      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfc:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004e1c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d04:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d18:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d34:	e043      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d40:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004e20 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d48:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d58:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d78:	e021      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d84:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004e1c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dbc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	0a5b      	lsrs	r3, r3, #9
 8004dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc8:	3301      	adds	r3, #1
 8004dca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 3a90 	vmov	r3, s15
 8004de6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004de8:	e005      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
    break;
 8004dee:	e002      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004df2:	61bb      	str	r3, [r7, #24]
    break;
 8004df4:	bf00      	nop
  }

  return sysclockfreq;
 8004df6:	69bb      	ldr	r3, [r7, #24]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3724      	adds	r7, #36	; 0x24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58024400 	.word	0x58024400
 8004e08:	03d09000 	.word	0x03d09000
 8004e0c:	003d0900 	.word	0x003d0900
 8004e10:	007a1200 	.word	0x007a1200
 8004e14:	46000000 	.word	0x46000000
 8004e18:	4c742400 	.word	0x4c742400
 8004e1c:	4a742400 	.word	0x4a742400
 8004e20:	4af42400 	.word	0x4af42400

08004e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e2a:	f7ff fe89 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4601      	mov	r1, r0
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	fa21 f303 	lsr.w	r3, r1, r3
 8004e46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e62:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	58024400 	.word	0x58024400
 8004e78:	0800c8e4 	.word	0x0800c8e4
 8004e7c:	24000004 	.word	0x24000004
 8004e80:	24000000 	.word	0x24000000

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e88:	f7ff ffcc 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	0800c8e4 	.word	0x0800c8e4

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004eb4:	f7ff ffb6 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec6:	5cd3      	ldrb	r3, [r2, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	0800c8e4 	.word	0x0800c8e4

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03d      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f00:	d013      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d802      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f0c:	e01f      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f12:	d013      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004f14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f18:	d01c      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f1a:	e018      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4baf      	ldr	r3, [pc, #700]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4aae      	ldr	r2, [pc, #696]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f28:	e015      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 fd23 	bl	800697c <RCCEx_PLL2_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f3a:	e00c      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3324      	adds	r3, #36	; 0x24
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fdcc 	bl	8006ae0 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f4c:	e003      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
      break;
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f5c:	4b9f      	ldr	r3, [pc, #636]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f68:	499c      	ldr	r1, [pc, #624]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f6e:	e001      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d03d      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d826      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fb3 	.word	0x08004fb3
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4b8d      	ldr	r3, [pc, #564]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a8c      	ldr	r2, [pc, #560]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb0:	e015      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fcdf 	bl	800697c <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fc2:	e00c      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fd88 	bl	8006ae0 <RCCEx_PLL3_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe4:	4b7d      	ldr	r3, [pc, #500]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	f023 0207 	bic.w	r2, r3, #7
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	497a      	ldr	r1, [pc, #488]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ff6:	e001      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005004:	2b00      	cmp	r3, #0
 8005006:	d03e      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d01c      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d804      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d00d      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800501c:	e01e      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800501e:	2bc0      	cmp	r3, #192	; 0xc0
 8005020:	d01f      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d01e      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005028:	e018      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800502a:	4b6c      	ldr	r3, [pc, #432]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	4a6b      	ldr	r2, [pc, #428]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005036:	e017      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fc9c 	bl	800697c <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005048:	e00e      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3324      	adds	r3, #36	; 0x24
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f001 fd45 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
      break;
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800506e:	4b5b      	ldr	r3, [pc, #364]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	4958      	ldr	r1, [pc, #352]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800507c:	4313      	orrs	r3, r2
 800507e:	650b      	str	r3, [r1, #80]	; 0x50
 8005080:	e001      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509c:	d01f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x202>
 800509e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a2:	d805      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ac:	d00e      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80050ae:	e01f      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80050b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050b4:	d01f      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80050b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ba:	d01e      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050bc:	e018      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a46      	ldr	r2, [pc, #280]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ca:	e017      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fc52 	bl	800697c <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050dc:	e00e      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3324      	adds	r3, #36	; 0x24
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fcfb 	bl	8006ae0 <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	e002      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80050fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005110:	4932      	ldr	r1, [pc, #200]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005112:	4313      	orrs	r3, r2
 8005114:	658b      	str	r3, [r1, #88]	; 0x58
 8005116:	e001      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d044      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800512e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005132:	d01f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005138:	d805      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800513e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005142:	d00e      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005144:	e01f      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800514a:	d01f      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800514c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005150:	d01e      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005152:	e018      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a20      	ldr	r2, [pc, #128]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800515a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800515e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005160:	e017      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f001 fc07 	bl	800697c <RCCEx_PLL2_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005172:	e00e      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3324      	adds	r3, #36	; 0x24
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f001 fcb0 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005184:	e005      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	75fb      	strb	r3, [r7, #23]
      break;
 800518a:	e002      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005198:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	658b      	str	r3, [r1, #88]	; 0x58
 80051ac:	e001      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d035      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d802      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80051ce:	e017      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d00c      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x312>
 80051d4:	2b30      	cmp	r3, #48	; 0x30
 80051d6:	d018      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80051d8:	e012      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80051da:	bf00      	nop
 80051dc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4baf      	ldr	r3, [pc, #700]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4aae      	ldr	r2, [pc, #696]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80051ec:	e00e      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fbc1 	bl	800697c <RCCEx_PLL2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80051fe:	e005      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800520a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005212:	4ba3      	ldr	r3, [pc, #652]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005216:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	49a0      	ldr	r1, [pc, #640]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005224:	e001      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d042      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	d01f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005244:	d805      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d00e      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005250:	e01f      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005256:	d01f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800525c:	d01e      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800525e:	e018      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005260:	4b8f      	ldr	r3, [pc, #572]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a8e      	ldr	r2, [pc, #568]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800526c:	e017      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fb81 	bl	800697c <RCCEx_PLL2_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800527e:	e00e      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f001 fc2a 	bl	8006ae0 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005290:	e005      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	e002      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800529c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052a4:	4b7e      	ldr	r3, [pc, #504]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	497b      	ldr	r1, [pc, #492]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	650b      	str	r3, [r1, #80]	; 0x50
 80052b6:	e001      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d042      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d0:	d01b      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80052d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d6:	d805      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d022      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052e2:	e01b      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80052e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052e8:	d01d      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80052ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ee:	d01c      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80052f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052f4:	d01b      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80052f6:	e011      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fb3c 	bl	800697c <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005308:	e012      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fbe5 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800531a:	e009      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800532e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005336:	4b5a      	ldr	r3, [pc, #360]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	4957      	ldr	r1, [pc, #348]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005344:	4313      	orrs	r3, r2
 8005346:	650b      	str	r3, [r1, #80]	; 0x50
 8005348:	e001      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d01b      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536a:	d805      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d022      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005376:	e01b      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d01d      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800537e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005382:	d01c      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005388:	d01b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800538a:	e011      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f001 faf2 	bl	800697c <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800539c:	e012      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3324      	adds	r3, #36	; 0x24
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 fb9b 	bl	8006ae0 <RCCEx_PLL3_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053ae:	e009      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
      break;
 80053b4:	e006      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80053c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053d8:	4931      	ldr	r1, [pc, #196]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	658b      	str	r3, [r1, #88]	; 0x58
 80053de:	e001      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02d      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f8:	d005      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80053fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053fe:	d009      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005404:	e00f      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005406:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005412:	e00c      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f001 faae 	bl	800697c <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005424:	e003      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800542c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005440:	4917      	ldr	r1, [pc, #92]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	650b      	str	r3, [r1, #80]	; 0x50
 8005446:	e001      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d035      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	2b03      	cmp	r3, #3
 800545e:	d81b      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	080054a5 	.word	0x080054a5
 800546c:	08005479 	.word	0x08005479
 8005470:	08005487 	.word	0x08005487
 8005474:	080054a5 	.word	0x080054a5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800547e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005484:	e00f      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	2102      	movs	r1, #2
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fa75 	bl	800697c <RCCEx_PLL2_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005496:	e006      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
      break;
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800549e:	bf00      	nop
 80054a0:	58024400 	.word	0x58024400
      break;
 80054a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054ac:	4bba      	ldr	r3, [pc, #744]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	f023 0203 	bic.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	49b7      	ldr	r1, [pc, #732]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054be:	e001      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8086 	beq.w	80055de <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d2:	4bb2      	ldr	r3, [pc, #712]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4ab1      	ldr	r2, [pc, #708]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054de:	f7fc fde5 	bl	80020ac <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054e4:	e009      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fc fde1 	bl	80020ac <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b64      	cmp	r3, #100	; 0x64
 80054f2:	d902      	bls.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	75fb      	strb	r3, [r7, #23]
        break;
 80054f8:	e005      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054fa:	4ba8      	ldr	r3, [pc, #672]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0ef      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d166      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800550c:	4ba2      	ldr	r3, [pc, #648]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800550e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005516:	4053      	eors	r3, r2
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005520:	4b9d      	ldr	r3, [pc, #628]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800552a:	4b9b      	ldr	r3, [pc, #620]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a9a      	ldr	r2, [pc, #616]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005536:	4b98      	ldr	r3, [pc, #608]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a97      	ldr	r2, [pc, #604]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005542:	4a95      	ldr	r2, [pc, #596]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005552:	d115      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc fdaa 	bl	80020ac <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800555a:	e00b      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fc fda6 	bl	80020ac <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d902      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	75fb      	strb	r3, [r7, #23]
            break;
 8005572:	e005      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005574:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ed      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d126      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005594:	d10d      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005596:	4b80      	ldr	r3, [pc, #512]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a4:	0919      	lsrs	r1, r3, #4
 80055a6:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80055a8:	400b      	ands	r3, r1
 80055aa:	497b      	ldr	r1, [pc, #492]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	610b      	str	r3, [r1, #16]
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80055b2:	4b79      	ldr	r3, [pc, #484]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4a78      	ldr	r2, [pc, #480]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055bc:	6113      	str	r3, [r2, #16]
 80055be:	4b76      	ldr	r3, [pc, #472]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	4972      	ldr	r1, [pc, #456]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	670b      	str	r3, [r1, #112]	; 0x70
 80055d2:	e004      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	75bb      	strb	r3, [r7, #22]
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d07d      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ee:	2b28      	cmp	r3, #40	; 0x28
 80055f0:	d866      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	080056c7 	.word	0x080056c7
 80055fc:	080056c1 	.word	0x080056c1
 8005600:	080056c1 	.word	0x080056c1
 8005604:	080056c1 	.word	0x080056c1
 8005608:	080056c1 	.word	0x080056c1
 800560c:	080056c1 	.word	0x080056c1
 8005610:	080056c1 	.word	0x080056c1
 8005614:	080056c1 	.word	0x080056c1
 8005618:	0800569d 	.word	0x0800569d
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056c1 	.word	0x080056c1
 8005624:	080056c1 	.word	0x080056c1
 8005628:	080056c1 	.word	0x080056c1
 800562c:	080056c1 	.word	0x080056c1
 8005630:	080056c1 	.word	0x080056c1
 8005634:	080056c1 	.word	0x080056c1
 8005638:	080056af 	.word	0x080056af
 800563c:	080056c1 	.word	0x080056c1
 8005640:	080056c1 	.word	0x080056c1
 8005644:	080056c1 	.word	0x080056c1
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056c1 	.word	0x080056c1
 8005654:	080056c1 	.word	0x080056c1
 8005658:	080056c7 	.word	0x080056c7
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	080056c1 	.word	0x080056c1
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056c1 	.word	0x080056c1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056c1 	.word	0x080056c1
 8005678:	080056c7 	.word	0x080056c7
 800567c:	080056c1 	.word	0x080056c1
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c1 	.word	0x080056c1
 8005688:	080056c1 	.word	0x080056c1
 800568c:	080056c1 	.word	0x080056c1
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056c1 	.word	0x080056c1
 8005698:	080056c7 	.word	0x080056c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 f96a 	bl	800697c <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056ac:	e00c      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3324      	adds	r3, #36	; 0x24
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fa13 	bl	8006ae0 <RCCEx_PLL3_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80056c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056ce:	4b32      	ldr	r3, [pc, #200]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056da:	492f      	ldr	r1, [pc, #188]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	654b      	str	r3, [r1, #84]	; 0x54
 80056e0:	e001      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d037      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d820      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005743 	.word	0x08005743
 8005704:	08005719 	.word	0x08005719
 8005708:	0800572b 	.word	0x0800572b
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	2101      	movs	r1, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f92c 	bl	800697c <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005728:	e00c      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f9d5 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800573a:	e003      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f023 0207 	bic.w	r2, r3, #7
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	4910      	ldr	r1, [pc, #64]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	654b      	str	r3, [r1, #84]	; 0x54
 800575c:	e001      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d040      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	2b05      	cmp	r3, #5
 8005776:	d827      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057cf 	.word	0x080057cf
 8005784:	080057a5 	.word	0x080057a5
 8005788:	080057b7 	.word	0x080057b7
 800578c:	080057cf 	.word	0x080057cf
 8005790:	080057cf 	.word	0x080057cf
 8005794:	080057cf 	.word	0x080057cf
 8005798:	58024400 	.word	0x58024400
 800579c:	58024800 	.word	0x58024800
 80057a0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f8e6 	bl	800697c <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80057b4:	e00c      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3324      	adds	r3, #36	; 0x24
 80057ba:	2101      	movs	r1, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f98f 	bl	8006ae0 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80057ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057d6:	4bb2      	ldr	r3, [pc, #712]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	f023 0207 	bic.w	r2, r3, #7
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	49ae      	ldr	r1, [pc, #696]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	658b      	str	r3, [r1, #88]	; 0x58
 80057ea:	e001      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d044      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005806:	d01b      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580c:	d805      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d022      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005818:	e01b      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581e:	d01d      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005824:	d01c      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800582a:	d01b      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800582c:	e011      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f8a1 	bl	800697c <RCCEx_PLL2_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800583e:	e012      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3324      	adds	r3, #36	; 0x24
 8005844:	2102      	movs	r1, #2
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f94a 	bl	8006ae0 <RCCEx_PLL3_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005850:	e009      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
      break;
 8005856:	e006      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005858:	bf00      	nop
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800585c:	bf00      	nop
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800586c:	4b8c      	ldr	r3, [pc, #560]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	4989      	ldr	r1, [pc, #548]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800587c:	4313      	orrs	r3, r2
 800587e:	654b      	str	r3, [r1, #84]	; 0x54
 8005880:	e001      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d044      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589c:	d01b      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d805      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d022      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80058ae:	e01b      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d01d      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80058b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058ba:	d01c      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80058bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058c0:	d01b      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80058c2:	e011      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 f856 	bl	800697c <RCCEx_PLL2_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80058d4:	e012      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3324      	adds	r3, #36	; 0x24
 80058da:	2102      	movs	r1, #2
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f8ff 	bl	8006ae0 <RCCEx_PLL3_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80058e6:	e009      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
      break;
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80058fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005910:	4963      	ldr	r1, [pc, #396]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	658b      	str	r3, [r1, #88]	; 0x58
 8005916:	e001      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d044      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800592e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005932:	d01b      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005938:	d805      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d022      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800593e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005944:	e01b      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d01d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800594c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005950:	d01c      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005952:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005956:	d01b      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005958:	e011      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f001 f80b 	bl	800697c <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800596a:	e012      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	2102      	movs	r1, #2
 8005972:	4618      	mov	r0, r3
 8005974:	f001 f8b4 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800597c:	e009      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
      break;
 8005982:	e006      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005984:	bf00      	nop
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005988:	bf00      	nop
 800598a:	e002      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005998:	4b41      	ldr	r3, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059a6:	493e      	ldr	r1, [pc, #248]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	658b      	str	r3, [r1, #88]	; 0x58
 80059ac:	e001      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3324      	adds	r3, #36	; 0x24
 80059ce:	2102      	movs	r1, #2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f885 	bl	8006ae0 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059e0:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	492c      	ldr	r1, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d10a      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f864 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a22:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a30:	491b      	ldr	r1, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d032      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d00d      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a52:	d016      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d111      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 ff8c 	bl	800697c <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	2102      	movs	r1, #2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f835 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a7a:	e003      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a98:	4901      	ldr	r1, [pc, #4]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005abe:	d00c      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ac4:	d015      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aca:	d10f      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005acc:	4b71      	ldr	r3, [pc, #452]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a70      	ldr	r2, [pc, #448]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ad8:	e00c      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3324      	adds	r3, #36	; 0x24
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fffd 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005aea:	e003      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
      break;
 8005af0:	e000      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005afa:	4b66      	ldr	r3, [pc, #408]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	4962      	ldr	r1, [pc, #392]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8005b0e:	e001      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d029      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d007      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005b2e:	e00f      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b30:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	4a57      	ldr	r2, [pc, #348]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b3c:	e00b      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2102      	movs	r1, #2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ff19 	bl	800697c <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005b4e:	e002      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
      break;
 8005b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b5c:	4b4d      	ldr	r3, [pc, #308]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b68:	494a      	ldr	r1, [pc, #296]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b6e:	e001      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	2102      	movs	r1, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 ffaa 	bl	8006ae0 <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02f      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005baa:	d00c      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb0:	d802      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005bb6:	e00d      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbc:	d00f      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc2:	d00e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc6:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a32      	ldr	r2, [pc, #200]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005bd2:	e007      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd8:	e004      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005bda:	bf00      	nop
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bea:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf6:	4927      	ldr	r1, [pc, #156]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	654b      	str	r3, [r1, #84]	; 0x54
 8005bfc:	e001      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c0e:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	491e      	ldr	r1, [pc, #120]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c38:	4916      	ldr	r1, [pc, #88]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c60:	490c      	ldr	r1, [pc, #48]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da08      	bge.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	4906      	ldr	r1, [pc, #24]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005c80:	7dbb      	ldrb	r3, [r7, #22]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	58024400 	.word	0x58024400

08005c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b090      	sub	sp, #64	; 0x40
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca6:	d150      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ca8:	4ba1      	ldr	r3, [pc, #644]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d844      	bhi.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005ce5 	.word	0x08005ce5
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	08005d3d 	.word	0x08005d3d
 8005cd0:	08005d05 	.word	0x08005d05
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fd03 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce2:	e241      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce4:	f107 0318 	add.w	r3, r7, #24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fa63 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf2:	e239      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fba7 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d02:	e231      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d04:	4b8a      	ldr	r3, [pc, #552]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d14:	4b87      	ldr	r3, [pc, #540]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d18:	e226      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d20:	d102      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005d22:	4b85      	ldr	r3, [pc, #532]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d26:	e21f      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005d30:	4b82      	ldr	r3, [pc, #520]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d34:	e218      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d3a:	e215      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d3c:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d40:	e212      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d46:	bf00      	nop
 8005d48:	e20e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d50:	d14f      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005d52:	4b77      	ldr	r3, [pc, #476]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d01c      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d804      	bhi.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d00e      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005d6e:	e03c      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005d70:	2bc0      	cmp	r3, #192	; 0xc0
 8005d72:	d037      	beq.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d78:	d018      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005d7a:	e036      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fcaf 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8a:	e1ed      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d8c:	f107 0318 	add.w	r3, r7, #24
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fa0f 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d9a:	e1e5      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fb53 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005daa:	e1dd      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dac:	4b60      	ldr	r3, [pc, #384]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005dbc:	4b5d      	ldr	r3, [pc, #372]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005dc0:	e1d2      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005dca:	4b5b      	ldr	r3, [pc, #364]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dce:	e1cb      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd6:	d102      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005dd8:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ddc:	e1c4      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de2:	e1c1      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005de4:	4b56      	ldr	r3, [pc, #344]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de8:	e1be      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dee:	bf00      	nop
 8005df0:	e1ba      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d153      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005dfa:	4b4d      	ldr	r3, [pc, #308]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e0a:	d01f      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e10:	d805      	bhi.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e1a:	d00f      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005e1c:	e03d      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e22:	d037      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e28:	d018      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005e2a:	e036      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fc57 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3a:	e195      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e3c:	f107 0318 	add.w	r3, r7, #24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 f9b7 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4a:	e18d      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fafb 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5a:	e185      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005e6c:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e70:	e17a      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e78:	d102      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e7e:	e173      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e86:	d102      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8c:	e16c      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e92:	e169      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e94:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e98:	e166      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e9e:	bf00      	nop
 8005ea0:	e162      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d15d      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005eaa:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005eb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eba:	d01f      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec0:	d805      	bhi.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005ec6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eca:	d00f      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005ecc:	e047      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005ece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ed2:	d041      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed8:	d018      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005eda:	e040      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fbff 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eea:	e13d      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eec:	f107 0318 	add.w	r3, r7, #24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f95f 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005efa:	e135      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 faa3 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f0a:	e12d      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005f20:	e122      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005f2a:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f2e:	e11b      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005f30:	58024400 	.word	0x58024400
 8005f34:	03d09000 	.word	0x03d09000
 8005f38:	003d0900 	.word	0x003d0900
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005f4c:	4b89      	ldr	r3, [pc, #548]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f50:	e10a      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f56:	e107      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f58:	4b87      	ldr	r3, [pc, #540]	; (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f5c:	e104      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f62:	bf00      	nop
 8005f64:	e100      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d153      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005f6e:	4b83      	ldr	r3, [pc, #524]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005f76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7e:	d01f      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d805      	bhi.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d00f      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005f90:	e03d      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f96:	d037      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f9c:	d018      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005f9e:	e036      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb9d 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fae:	e0db      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb0:	f107 0318 	add.w	r3, r7, #24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 f8fd 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fbe:	e0d3      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fc0:	f107 030c 	add.w	r3, r7, #12
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fa41 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fce:	e0cb      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005fe0:	4b67      	ldr	r3, [pc, #412]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005fe4:	e0c0      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fec:	d102      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005fee:	4b65      	ldr	r3, [pc, #404]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ff2:	e0b9      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ffa:	d102      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005ffc:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006000:	e0b2      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006006:	e0af      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006008:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800600c:	e0ac      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006012:	bf00      	nop
 8006014:	e0a8      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800601c:	d13d      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800601e:	4b57      	ldr	r3, [pc, #348]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006026:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602e:	d00c      	beq.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006034:	d011      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d12b      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603a:	f107 0318 	add.w	r3, r7, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f8b8 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006048:	e08e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f9fc 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006058:	e086      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800605a:	4b48      	ldr	r3, [pc, #288]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006062:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800606a:	4b45      	ldr	r3, [pc, #276]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800606e:	e07b      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006076:	d102      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8006078:	4b42      	ldr	r3, [pc, #264]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607c:	e074      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006084:	d102      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8006086:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800608a:	e06d      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006090:	e06a      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006096:	bf00      	nop
 8006098:	e066      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d11f      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80060b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b6:	d008      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80060b8:	e00f      	b.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb10 	bl	80066e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c8:	e04e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f870 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d8:	e046      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060de:	bf00      	nop
 80060e0:	e042      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e8:	d13c      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80060f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060fa:	d01e      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80060fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006100:	d805      	bhi.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610a:	d00e      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800610c:	e026      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d01d      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006118:	d01d      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800611a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800611e:	d014      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006120:	e01c      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006122:	f000 f831 	bl	8006188 <HAL_RCCEx_GetD3PCLK1Freq>
 8006126:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006128:	e01e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612a:	f107 0318 	add.w	r3, r7, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f840 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006138:	e016      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613a:	f107 030c 	add.w	r3, r7, #12
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f984 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006148:	e00e      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800614e:	e00b      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006160:	bf00      	nop
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800616a:	4618      	mov	r0, r3
 800616c:	3740      	adds	r7, #64	; 0x40
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	007a1200 	.word	0x007a1200
 8006178:	00bb8000 	.word	0x00bb8000
 800617c:	58024400 	.word	0x58024400
 8006180:	03d09000 	.word	0x03d09000
 8006184:	003d0900 	.word	0x003d0900

08006188 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800618c:	f7fe fe4a 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8006190:	4601      	mov	r1, r0
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4a04      	ldr	r2, [pc, #16]	; (80061b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024400 	.word	0x58024400
 80061b0:	0800c8e4 	.word	0x0800c8e4

080061b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061bc:	4b9d      	ldr	r3, [pc, #628]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80061c6:	4b9b      	ldr	r3, [pc, #620]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	0b1b      	lsrs	r3, r3, #12
 80061cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061d2:	4b98      	ldr	r3, [pc, #608]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061de:	4b95      	ldr	r3, [pc, #596]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	08db      	lsrs	r3, r3, #3
 80061e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 810a 	beq.w	8006416 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d05a      	beq.n	80062be <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006208:	2b01      	cmp	r3, #1
 800620a:	d302      	bcc.n	8006212 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800620c:	2b02      	cmp	r3, #2
 800620e:	d078      	beq.n	8006302 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006210:	e099      	b.n	8006346 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006212:	4b88      	ldr	r3, [pc, #544]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02d      	beq.n	800627a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800621e:	4b85      	ldr	r3, [pc, #532]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	4a83      	ldr	r2, [pc, #524]	; (8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006248:	4b7a      	ldr	r3, [pc, #488]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006258:	ed97 6a03 	vldr	s12, [r7, #12]
 800625c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006274:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006278:	e087      	b.n	800638a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006284:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628c:	4b69      	ldr	r3, [pc, #420]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629c:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80062a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062bc:	e065      	b.n	800638a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80062cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d0:	4b58      	ldr	r3, [pc, #352]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80062e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006300:	e043      	b.n	800638a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006314:	4b47      	ldr	r3, [pc, #284]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006324:	ed97 6a03 	vldr	s12, [r7, #12]
 8006328:	eddf 5a44 	vldr	s11, [pc, #272]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800632c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006344:	e021      	b.n	800638a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006350:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006358:	4b36      	ldr	r3, [pc, #216]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006368:	ed97 6a03 	vldr	s12, [r7, #12]
 800636c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006388:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800638a:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	0a5b      	lsrs	r3, r3, #9
 8006390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b0:	ee17 2a90 	vmov	r2, s15
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063de:	ee17 2a90 	vmov	r2, s15
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	0e1b      	lsrs	r3, r3, #24
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006400:	edd7 6a07 	vldr	s13, [r7, #28]
 8006404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640c:	ee17 2a90 	vmov	r2, s15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006414:	e008      	b.n	8006428 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3724      	adds	r7, #36	; 0x24
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	58024400 	.word	0x58024400
 8006438:	03d09000 	.word	0x03d09000
 800643c:	46000000 	.word	0x46000000
 8006440:	4c742400 	.word	0x4c742400
 8006444:	4a742400 	.word	0x4a742400
 8006448:	4af42400 	.word	0x4af42400

0800644c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	; 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006454:	4b9d      	ldr	r3, [pc, #628]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800645e:	4b9b      	ldr	r3, [pc, #620]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	0d1b      	lsrs	r3, r3, #20
 8006464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006468:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800646a:	4b98      	ldr	r3, [pc, #608]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006476:	4b95      	ldr	r3, [pc, #596]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 810a 	beq.w	80066ae <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d05a      	beq.n	8006556 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d302      	bcc.n	80064aa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d078      	beq.n	800659a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80064a8:	e099      	b.n	80065de <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064aa:	4b88      	ldr	r3, [pc, #544]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02d      	beq.n	8006512 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064b6:	4b85      	ldr	r3, [pc, #532]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	4a83      	ldr	r2, [pc, #524]	; (80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80064c2:	fa22 f303 	lsr.w	r3, r2, r3
 80064c6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e0:	4b7a      	ldr	r3, [pc, #488]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80064f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006510:	e087      	b.n	8006622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006524:	4b69      	ldr	r3, [pc, #420]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006534:	ed97 6a03 	vldr	s12, [r7, #12]
 8006538:	eddf 5a66 	vldr	s11, [pc, #408]	; 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800653c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006554:	e065      	b.n	8006622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006560:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006568:	4b58      	ldr	r3, [pc, #352]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006578:	ed97 6a03 	vldr	s12, [r7, #12]
 800657c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006598:	e043      	b.n	8006622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80065a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ac:	4b47      	ldr	r3, [pc, #284]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80065c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065dc:	e021      	b.n	8006622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80065ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f0:	4b36      	ldr	r3, [pc, #216]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006600:	ed97 6a03 	vldr	s12, [r7, #12]
 8006604:	eddf 5a33 	vldr	s11, [pc, #204]	; 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006620:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006622:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	0a5b      	lsrs	r3, r3, #9
 8006628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800663c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006648:	ee17 2a90 	vmov	r2, s15
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006650:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800666a:	edd7 6a07 	vldr	s13, [r7, #28]
 800666e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006676:	ee17 2a90 	vmov	r2, s15
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	0e1b      	lsrs	r3, r3, #24
 8006684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006698:	edd7 6a07 	vldr	s13, [r7, #28]
 800669c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a4:	ee17 2a90 	vmov	r2, s15
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066ac:	e008      	b.n	80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	3724      	adds	r7, #36	; 0x24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	58024400 	.word	0x58024400
 80066d0:	03d09000 	.word	0x03d09000
 80066d4:	46000000 	.word	0x46000000
 80066d8:	4c742400 	.word	0x4c742400
 80066dc:	4a742400 	.word	0x4a742400
 80066e0:	4af42400 	.word	0x4af42400

080066e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066ec:	4b9d      	ldr	r3, [pc, #628]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80066f6:	4b9b      	ldr	r3, [pc, #620]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006700:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006702:	4b98      	ldr	r3, [pc, #608]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800670c:	4b95      	ldr	r3, [pc, #596]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006724:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 810a 	beq.w	8006944 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d05a      	beq.n	80067ec <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006736:	2b01      	cmp	r3, #1
 8006738:	d302      	bcc.n	8006740 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800673a:	2b02      	cmp	r3, #2
 800673c:	d078      	beq.n	8006830 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800673e:	e099      	b.n	8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006740:	4b88      	ldr	r3, [pc, #544]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d02d      	beq.n	80067a8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800674c:	4b85      	ldr	r3, [pc, #532]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	4a84      	ldr	r2, [pc, #528]	; (8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
 800675c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	4b7b      	ldr	r3, [pc, #492]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006786:	ed97 6a03 	vldr	s12, [r7, #12]
 800678a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800678e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067a6:	e087      	b.n	80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b6a      	ldr	r3, [pc, #424]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ea:	e065      	b.n	80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006974 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	4b59      	ldr	r3, [pc, #356]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006812:	eddf 5a56 	vldr	s11, [pc, #344]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800682e:	e043      	b.n	80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800683e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006842:	4b48      	ldr	r3, [pc, #288]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006852:	ed97 6a03 	vldr	s12, [r7, #12]
 8006856:	eddf 5a45 	vldr	s11, [pc, #276]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006872:	e021      	b.n	80068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006974 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b37      	ldr	r3, [pc, #220]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006896:	ed97 6a03 	vldr	s12, [r7, #12]
 800689a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80068b8:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	0a5b      	lsrs	r3, r3, #9
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068de:	ee17 2a90 	vmov	r2, s15
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80068e6:	4b1f      	ldr	r3, [pc, #124]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006900:	edd7 6a07 	vldr	s13, [r7, #28]
 8006904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690c:	ee17 2a90 	vmov	r2, s15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	0e1b      	lsrs	r3, r3, #24
 800691a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800692a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693a:	ee17 2a90 	vmov	r2, s15
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006942:	e008      	b.n	8006956 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	609a      	str	r2, [r3, #8]
}
 8006956:	bf00      	nop
 8006958:	3724      	adds	r7, #36	; 0x24
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
 8006968:	03d09000 	.word	0x03d09000
 800696c:	46000000 	.word	0x46000000
 8006970:	4c742400 	.word	0x4c742400
 8006974:	4a742400 	.word	0x4a742400
 8006978:	4af42400 	.word	0x4af42400

0800697c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800698a:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b03      	cmp	r3, #3
 8006994:	d101      	bne.n	800699a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e099      	b.n	8006ace <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800699a:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a4e      	ldr	r2, [pc, #312]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a6:	f7fb fb81 	bl	80020ac <HAL_GetTick>
 80069aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069ac:	e008      	b.n	80069c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069ae:	f7fb fb7d 	bl	80020ac <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e086      	b.n	8006ace <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069c0:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f0      	bne.n	80069ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	031b      	lsls	r3, r3, #12
 80069da:	493f      	ldr	r1, [pc, #252]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	628b      	str	r3, [r1, #40]	; 0x28
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	025b      	lsls	r3, r3, #9
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	061b      	lsls	r3, r3, #24
 8006a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a10:	4931      	ldr	r1, [pc, #196]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a16:	4b30      	ldr	r3, [pc, #192]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	492d      	ldr	r1, [pc, #180]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	f023 0220 	bic.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	4928      	ldr	r1, [pc, #160]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a3a:	4b27      	ldr	r3, [pc, #156]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a40:	f023 0310 	bic.w	r3, r3, #16
 8006a44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a4a:	4b24      	ldr	r3, [pc, #144]	; (8006adc <RCCEx_PLL2_Config+0x160>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	69d2      	ldr	r2, [r2, #28]
 8006a52:	00d2      	lsls	r2, r2, #3
 8006a54:	4920      	ldr	r1, [pc, #128]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a5a:	4b1f      	ldr	r3, [pc, #124]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a60:	f043 0310 	orr.w	r3, r3, #16
 8006a64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	4a19      	ldr	r2, [pc, #100]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a78:	e00f      	b.n	8006a9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d106      	bne.n	8006a8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a80:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a8c:	e005      	b.n	8006a9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a11      	ldr	r2, [pc, #68]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa6:	f7fb fb01 	bl	80020ac <HAL_GetTick>
 8006aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aac:	e008      	b.n	8006ac0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006aae:	f7fb fafd 	bl	80020ac <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e006      	b.n	8006ace <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	ffff0007 	.word	0xffff0007

08006ae0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aee:	4b53      	ldr	r3, [pc, #332]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d101      	bne.n	8006afe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e099      	b.n	8006c32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006afe:	4b4f      	ldr	r3, [pc, #316]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a4e      	ldr	r2, [pc, #312]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0a:	f7fb facf 	bl	80020ac <HAL_GetTick>
 8006b0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b10:	e008      	b.n	8006b24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b12:	f7fb facb 	bl	80020ac <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e086      	b.n	8006c32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b24:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f0      	bne.n	8006b12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b30:	4b42      	ldr	r3, [pc, #264]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	051b      	lsls	r3, r3, #20
 8006b3e:	493f      	ldr	r1, [pc, #252]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	628b      	str	r3, [r1, #40]	; 0x28
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	025b      	lsls	r3, r3, #9
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b74:	4931      	ldr	r1, [pc, #196]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b7a:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	492d      	ldr	r1, [pc, #180]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	4928      	ldr	r1, [pc, #160]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b9e:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <RCCEx_PLL3_Config+0x160>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	69d2      	ldr	r2, [r2, #28]
 8006bb6:	00d2      	lsls	r2, r2, #3
 8006bb8:	4920      	ldr	r1, [pc, #128]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bbe:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bdc:	e00f      	b.n	8006bfe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d106      	bne.n	8006bf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bf0:	e005      	b.n	8006bfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bf2:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0a:	f7fb fa4f 	bl	80020ac <HAL_GetTick>
 8006c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c10:	e008      	b.n	8006c24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c12:	f7fb fa4b 	bl	80020ac <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e006      	b.n	8006c32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <RCCEx_PLL3_Config+0x15c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0f0      	beq.n	8006c12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	ffff0007 	.word	0xffff0007

08006c44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e0e2      	b.n	8006e20 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a70      	ldr	r2, [pc, #448]	; (8006e28 <HAL_SPI_Init+0x1e4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <HAL_SPI_Init+0x46>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6f      	ldr	r2, [pc, #444]	; (8006e2c <HAL_SPI_Init+0x1e8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00a      	beq.n	8006c8a <HAL_SPI_Init+0x46>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6d      	ldr	r2, [pc, #436]	; (8006e30 <HAL_SPI_Init+0x1ec>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d005      	beq.n	8006c8a <HAL_SPI_Init+0x46>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d901      	bls.n	8006c8a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0ca      	b.n	8006e20 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f8d2 	bl	8006e34 <SPI_GetPacketSize>
 8006c90:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a64      	ldr	r2, [pc, #400]	; (8006e28 <HAL_SPI_Init+0x1e4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00c      	beq.n	8006cb6 <HAL_SPI_Init+0x72>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a62      	ldr	r2, [pc, #392]	; (8006e2c <HAL_SPI_Init+0x1e8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <HAL_SPI_Init+0x72>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a61      	ldr	r2, [pc, #388]	; (8006e30 <HAL_SPI_Init+0x1ec>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_Init+0x72>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d811      	bhi.n	8006cda <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cba:	4a5b      	ldr	r2, [pc, #364]	; (8006e28 <HAL_SPI_Init+0x1e4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a59      	ldr	r2, [pc, #356]	; (8006e2c <HAL_SPI_Init+0x1e8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_SPI_Init+0x90>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <HAL_SPI_Init+0x1ec>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d104      	bne.n	8006cde <HAL_SPI_Init+0x9a>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d901      	bls.n	8006cde <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0a0      	b.n	8006e20 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa fd2e 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0201 	bic.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d18:	d110      	bne.n	8006d3c <HAL_SPI_Init+0xf8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d22:	d10b      	bne.n	8006d3c <HAL_SPI_Init+0xf8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d107      	bne.n	8006d3c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	ea42 0103 	orr.w	r1, r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9c:	ea42 0103 	orr.w	r1, r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d113      	bne.n	8006ddc <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dda:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40013000 	.word	0x40013000
 8006e2c:	40003800 	.word	0x40003800
 8006e30:	40003c00 	.word	0x40003c00

08006e34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3307      	adds	r3, #7
 8006e52:	08db      	lsrs	r3, r3, #3
 8006e54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e01d      	b.n	8006eb8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fa fca9 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f000 fa1d 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e01d      	b.n	8006f0e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa fccc 	bl	8001884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f000 f9f2 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e105      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b14      	cmp	r3, #20
 8006f46:	f200 80f0 	bhi.w	800712a <HAL_TIM_PWM_ConfigChannel+0x212>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	0800712b 	.word	0x0800712b
 8006f58:	0800712b 	.word	0x0800712b
 8006f5c:	0800712b 	.word	0x0800712b
 8006f60:	08006fe5 	.word	0x08006fe5
 8006f64:	0800712b 	.word	0x0800712b
 8006f68:	0800712b 	.word	0x0800712b
 8006f6c:	0800712b 	.word	0x0800712b
 8006f70:	08007027 	.word	0x08007027
 8006f74:	0800712b 	.word	0x0800712b
 8006f78:	0800712b 	.word	0x0800712b
 8006f7c:	0800712b 	.word	0x0800712b
 8006f80:	08007067 	.word	0x08007067
 8006f84:	0800712b 	.word	0x0800712b
 8006f88:	0800712b 	.word	0x0800712b
 8006f8c:	0800712b 	.word	0x0800712b
 8006f90:	080070a9 	.word	0x080070a9
 8006f94:	0800712b 	.word	0x0800712b
 8006f98:	0800712b 	.word	0x0800712b
 8006f9c:	0800712b 	.word	0x0800712b
 8006fa0:	080070e9 	.word	0x080070e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fa36 	bl	800741c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0208 	orr.w	r2, r2, #8
 8006fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0204 	bic.w	r2, r2, #4
 8006fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6999      	ldr	r1, [r3, #24]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	619a      	str	r2, [r3, #24]
      break;
 8006fe2:	e0a3      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 faa6 	bl	800753c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6999      	ldr	r1, [r3, #24]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	021a      	lsls	r2, r3, #8
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	619a      	str	r2, [r3, #24]
      break;
 8007024:	e082      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb0f 	bl	8007650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0208 	orr.w	r2, r2, #8
 8007040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0204 	bic.w	r2, r2, #4
 8007050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	61da      	str	r2, [r3, #28]
      break;
 8007064:	e062      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb75 	bl	800775c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	021a      	lsls	r2, r3, #8
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	61da      	str	r2, [r3, #28]
      break;
 80070a6:	e041      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fbbc 	bl	800782c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0208 	orr.w	r2, r2, #8
 80070c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0204 	bic.w	r2, r2, #4
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070e6:	e021      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fbfe 	bl	80078f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	021a      	lsls	r2, r3, #8
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007128:	e000      	b.n	800712c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800712a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop

08007148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIM_ConfigClockSource+0x18>
 800715c:	2302      	movs	r3, #2
 800715e:	e0b7      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x188>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4b57      	ldr	r3, [pc, #348]	; (80072d8 <HAL_TIM_ConfigClockSource+0x190>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b70      	cmp	r3, #112	; 0x70
 8007196:	d02e      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xae>
 8007198:	2b70      	cmp	r3, #112	; 0x70
 800719a:	d812      	bhi.n	80071c2 <HAL_TIM_ConfigClockSource+0x7a>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	f000 8084 	beq.w	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071a2:	2b30      	cmp	r3, #48	; 0x30
 80071a4:	d806      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x6c>
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d07f      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d07d      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d07b      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80071b2:	e084      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80071b4:	2b50      	cmp	r3, #80	; 0x50
 80071b6:	d048      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x102>
 80071b8:	2b60      	cmp	r3, #96	; 0x60
 80071ba:	d056      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x122>
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	d064      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x142>
      break;
 80071c0:	e07d      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80071c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071c6:	d070      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071cc:	d809      	bhi.n	80071e2 <HAL_TIM_ConfigClockSource+0x9a>
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	d027      	beq.n	8007224 <HAL_TIM_ConfigClockSource+0xdc>
 80071d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d8:	d067      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d06d      	beq.n	80072bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071e0:	e06d      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80071e2:	4a3e      	ldr	r2, [pc, #248]	; (80072dc <HAL_TIM_ConfigClockSource+0x194>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d060      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071e8:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <HAL_TIM_ConfigClockSource+0x198>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d05d      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
 80071ee:	4a3d      	ldr	r2, [pc, #244]	; (80072e4 <HAL_TIM_ConfigClockSource+0x19c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d05a      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x162>
      break;
 80071f4:	e063      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6899      	ldr	r1, [r3, #8]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f000 fc55 	bl	8007ab4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007218:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	609a      	str	r2, [r3, #8]
      break;
 8007222:	e04c      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6818      	ldr	r0, [r3, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6899      	ldr	r1, [r3, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f000 fc3e 	bl	8007ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007246:	609a      	str	r2, [r3, #8]
      break;
 8007248:	e039      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	461a      	mov	r2, r3
 8007258:	f000 fbae 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2150      	movs	r1, #80	; 0x50
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fc08 	bl	8007a78 <TIM_ITRx_SetConfig>
      break;
 8007268:	e029      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6859      	ldr	r1, [r3, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	461a      	mov	r2, r3
 8007278:	f000 fbcd 	bl	8007a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2160      	movs	r1, #96	; 0x60
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fbf8 	bl	8007a78 <TIM_ITRx_SetConfig>
      break;
 8007288:	e019      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6859      	ldr	r1, [r3, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	f000 fb8e 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fbe8 	bl	8007a78 <TIM_ITRx_SetConfig>
      break;
 80072a8:	e009      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f000 fbdf 	bl	8007a78 <TIM_ITRx_SetConfig>
      break;
 80072ba:	e000      	b.n	80072be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80072bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	ffceff88 	.word	0xffceff88
 80072dc:	00100030 	.word	0x00100030
 80072e0:	00100040 	.word	0x00100040
 80072e4:	00100020 	.word	0x00100020

080072e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a40      	ldr	r2, [pc, #256]	; (80073fc <TIM_Base_SetConfig+0x114>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d013      	beq.n	8007328 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d00f      	beq.n	8007328 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3d      	ldr	r2, [pc, #244]	; (8007400 <TIM_Base_SetConfig+0x118>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00b      	beq.n	8007328 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a3c      	ldr	r2, [pc, #240]	; (8007404 <TIM_Base_SetConfig+0x11c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a3b      	ldr	r2, [pc, #236]	; (8007408 <TIM_Base_SetConfig+0x120>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_Base_SetConfig+0x40>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a3a      	ldr	r2, [pc, #232]	; (800740c <TIM_Base_SetConfig+0x124>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d108      	bne.n	800733a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2f      	ldr	r2, [pc, #188]	; (80073fc <TIM_Base_SetConfig+0x114>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01f      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007348:	d01b      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2c      	ldr	r2, [pc, #176]	; (8007400 <TIM_Base_SetConfig+0x118>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d017      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <TIM_Base_SetConfig+0x11c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <TIM_Base_SetConfig+0x120>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00f      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a29      	ldr	r2, [pc, #164]	; (800740c <TIM_Base_SetConfig+0x124>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00b      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a28      	ldr	r2, [pc, #160]	; (8007410 <TIM_Base_SetConfig+0x128>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a27      	ldr	r2, [pc, #156]	; (8007414 <TIM_Base_SetConfig+0x12c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_Base_SetConfig+0x9a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a26      	ldr	r2, [pc, #152]	; (8007418 <TIM_Base_SetConfig+0x130>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d108      	bne.n	8007394 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a10      	ldr	r2, [pc, #64]	; (80073fc <TIM_Base_SetConfig+0x114>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_Base_SetConfig+0xf8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <TIM_Base_SetConfig+0x124>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <TIM_Base_SetConfig+0xf8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a11      	ldr	r2, [pc, #68]	; (8007410 <TIM_Base_SetConfig+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a10      	ldr	r2, [pc, #64]	; (8007414 <TIM_Base_SetConfig+0x12c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_Base_SetConfig+0xf8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a0f      	ldr	r2, [pc, #60]	; (8007418 <TIM_Base_SetConfig+0x130>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d103      	bne.n	80073e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	615a      	str	r2, [r3, #20]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40010000 	.word	0x40010000
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40000c00 	.word	0x40000c00
 800740c:	40010400 	.word	0x40010400
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800

0800741c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4b37      	ldr	r3, [pc, #220]	; (8007524 <TIM_OC1_SetConfig+0x108>)
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 0302 	bic.w	r3, r3, #2
 8007464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <TIM_OC1_SetConfig+0x10c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00f      	beq.n	8007498 <TIM_OC1_SetConfig+0x7c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a2c      	ldr	r2, [pc, #176]	; (800752c <TIM_OC1_SetConfig+0x110>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_OC1_SetConfig+0x7c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2b      	ldr	r2, [pc, #172]	; (8007530 <TIM_OC1_SetConfig+0x114>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_OC1_SetConfig+0x7c>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <TIM_OC1_SetConfig+0x118>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_OC1_SetConfig+0x7c>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a29      	ldr	r2, [pc, #164]	; (8007538 <TIM_OC1_SetConfig+0x11c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d10c      	bne.n	80074b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0308 	bic.w	r3, r3, #8
 800749e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 0304 	bic.w	r3, r3, #4
 80074b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <TIM_OC1_SetConfig+0x10c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_OC1_SetConfig+0xbe>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <TIM_OC1_SetConfig+0x110>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_OC1_SetConfig+0xbe>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a1a      	ldr	r2, [pc, #104]	; (8007530 <TIM_OC1_SetConfig+0x114>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_OC1_SetConfig+0xbe>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a19      	ldr	r2, [pc, #100]	; (8007534 <TIM_OC1_SetConfig+0x118>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_OC1_SetConfig+0xbe>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a18      	ldr	r2, [pc, #96]	; (8007538 <TIM_OC1_SetConfig+0x11c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d111      	bne.n	80074fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	fffeff8f 	.word	0xfffeff8f
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800

0800753c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0210 	bic.w	r2, r3, #16
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4b34      	ldr	r3, [pc, #208]	; (8007638 <TIM_OC2_SetConfig+0xfc>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f023 0320 	bic.w	r3, r3, #32
 8007586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a29      	ldr	r2, [pc, #164]	; (800763c <TIM_OC2_SetConfig+0x100>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_OC2_SetConfig+0x68>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a28      	ldr	r2, [pc, #160]	; (8007640 <TIM_OC2_SetConfig+0x104>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d10d      	bne.n	80075c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1e      	ldr	r2, [pc, #120]	; (800763c <TIM_OC2_SetConfig+0x100>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00f      	beq.n	80075e8 <TIM_OC2_SetConfig+0xac>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <TIM_OC2_SetConfig+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <TIM_OC2_SetConfig+0xac>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <TIM_OC2_SetConfig+0x108>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d007      	beq.n	80075e8 <TIM_OC2_SetConfig+0xac>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <TIM_OC2_SetConfig+0x10c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_OC2_SetConfig+0xac>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1a      	ldr	r2, [pc, #104]	; (800764c <TIM_OC2_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d113      	bne.n	8007610 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	feff8fff 	.word	0xfeff8fff
 800763c:	40010000 	.word	0x40010000
 8007640:	40010400 	.word	0x40010400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800

08007650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a27      	ldr	r2, [pc, #156]	; (8007748 <TIM_OC3_SetConfig+0xf8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d003      	beq.n	80076b6 <TIM_OC3_SetConfig+0x66>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a26      	ldr	r2, [pc, #152]	; (800774c <TIM_OC3_SetConfig+0xfc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10d      	bne.n	80076d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <TIM_OC3_SetConfig+0xf8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00f      	beq.n	80076fa <TIM_OC3_SetConfig+0xaa>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1b      	ldr	r2, [pc, #108]	; (800774c <TIM_OC3_SetConfig+0xfc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <TIM_OC3_SetConfig+0xaa>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <TIM_OC3_SetConfig+0x100>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d007      	beq.n	80076fa <TIM_OC3_SetConfig+0xaa>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <TIM_OC3_SetConfig+0x104>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_OC3_SetConfig+0xaa>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a18      	ldr	r2, [pc, #96]	; (8007758 <TIM_OC3_SetConfig+0x108>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d113      	bne.n	8007722 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	621a      	str	r2, [r3, #32]
}
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40010000 	.word	0x40010000
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	031b      	lsls	r3, r3, #12
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <TIM_OC4_SetConfig+0xbc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC4_SetConfig+0x80>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a17      	ldr	r2, [pc, #92]	; (800781c <TIM_OC4_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC4_SetConfig+0x80>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	; (8007820 <TIM_OC4_SetConfig+0xc4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC4_SetConfig+0x80>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <TIM_OC4_SetConfig+0xc8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC4_SetConfig+0x80>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a14      	ldr	r2, [pc, #80]	; (8007828 <TIM_OC4_SetConfig+0xcc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d109      	bne.n	80077f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	019b      	lsls	r3, r3, #6
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000
 800781c:	40010400 	.word	0x40010400
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800

0800782c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800786c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	041b      	lsls	r3, r3, #16
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a17      	ldr	r2, [pc, #92]	; (80078dc <TIM_OC5_SetConfig+0xb0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00f      	beq.n	80078a2 <TIM_OC5_SetConfig+0x76>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a16      	ldr	r2, [pc, #88]	; (80078e0 <TIM_OC5_SetConfig+0xb4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00b      	beq.n	80078a2 <TIM_OC5_SetConfig+0x76>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <TIM_OC5_SetConfig+0xb8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d007      	beq.n	80078a2 <TIM_OC5_SetConfig+0x76>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <TIM_OC5_SetConfig+0xbc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_OC5_SetConfig+0x76>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a13      	ldr	r2, [pc, #76]	; (80078ec <TIM_OC5_SetConfig+0xc0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d109      	bne.n	80078b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	621a      	str	r2, [r3, #32]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	40010000 	.word	0x40010000
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40014400 	.word	0x40014400
 80078ec:	40014800 	.word	0x40014800

080078f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	051b      	lsls	r3, r3, #20
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <TIM_OC6_SetConfig+0xb4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_OC6_SetConfig+0x78>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <TIM_OC6_SetConfig+0xb8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_OC6_SetConfig+0x78>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a16      	ldr	r2, [pc, #88]	; (80079ac <TIM_OC6_SetConfig+0xbc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_OC6_SetConfig+0x78>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a15      	ldr	r2, [pc, #84]	; (80079b0 <TIM_OC6_SetConfig+0xc0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC6_SetConfig+0x78>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <TIM_OC6_SetConfig+0xc4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d109      	bne.n	800797c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40010400 	.word	0x40010400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0201 	bic.w	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 030a 	bic.w	r3, r3, #10
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0210 	bic.w	r2, r3, #16
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <TIM_ITRx_SetConfig+0x38>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f043 0307 	orr.w	r3, r3, #7
 8007a9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	609a      	str	r2, [r3, #8]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	ffcfff8f 	.word	0xffcfff8f

08007ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	021a      	lsls	r2, r3, #8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	609a      	str	r2, [r3, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e068      	b.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a2e      	ldr	r2, [pc, #184]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d108      	bne.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7e:	d018      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a1b      	ldr	r2, [pc, #108]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1a      	ldr	r2, [pc, #104]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a14      	ldr	r2, [pc, #80]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10c      	bne.n	8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40010400 	.word	0x40010400
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	40001800 	.word	0x40001800

08007c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e065      	b.n	8007cec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d115      	bne.n	8007cda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40010000 	.word	0x40010000
 8007cfc:	40010400 	.word	0x40010400

08007d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e042      	b.n	8007d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7f9 fe9f 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	; 0x24
 8007d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f8c4 	bl	8007ed0 <UART_SetConfig>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e022      	b.n	8007d98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f002 fa36 	bl	800a1cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f002 fabd 	bl	800a310 <UART_CheckIdleState>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	f040 8083 	bne.w	8007ec2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_UART_Transmit+0x28>
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e07b      	b.n	8007ec4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_Transmit+0x3a>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e074      	b.n	8007ec4 <HAL_UART_Transmit+0x124>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2221      	movs	r2, #33	; 0x21
 8007dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007df2:	f7fa f95b 	bl	80020ac <HAL_GetTick>
 8007df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e10:	d108      	bne.n	8007e24 <HAL_UART_Transmit+0x84>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e003      	b.n	8007e2c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e2c:	e02c      	b.n	8007e88 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f002 fab1 	bl	800a3a0 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e03d      	b.n	8007ec4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	3302      	adds	r3, #2
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	e007      	b.n	8007e76 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	3301      	adds	r3, #1
 8007e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1cc      	bne.n	8007e2e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2140      	movs	r1, #64	; 0x40
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f002 fa7e 	bl	800a3a0 <UART_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e00a      	b.n	8007ec4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ec2:	2302      	movs	r3, #2
  }
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	0000      	movs	r0, r0
	...

08007ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007ed4:	b090      	sub	sp, #64	; 0x40
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f06:	4313      	orrs	r3, r2
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4bc1      	ldr	r3, [pc, #772]	; (8008218 <UART_SetConfig+0x348>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4ab7      	ldr	r2, [pc, #732]	; (800821c <UART_SetConfig+0x34c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	4bb2      	ldr	r3, [pc, #712]	; (8008220 <UART_SetConfig+0x350>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	f023 010f 	bic.w	r1, r3, #15
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4aa9      	ldr	r2, [pc, #676]	; (8008224 <UART_SetConfig+0x354>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d177      	bne.n	8008072 <UART_SetConfig+0x1a2>
 8007f82:	4ba9      	ldr	r3, [pc, #676]	; (8008228 <UART_SetConfig+0x358>)
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f8a:	2b28      	cmp	r3, #40	; 0x28
 8007f8c:	d86c      	bhi.n	8008068 <UART_SetConfig+0x198>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <UART_SetConfig+0xc4>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08008069 	.word	0x08008069
 8007f9c:	08008069 	.word	0x08008069
 8007fa0:	08008069 	.word	0x08008069
 8007fa4:	08008069 	.word	0x08008069
 8007fa8:	08008069 	.word	0x08008069
 8007fac:	08008069 	.word	0x08008069
 8007fb0:	08008069 	.word	0x08008069
 8007fb4:	08008041 	.word	0x08008041
 8007fb8:	08008069 	.word	0x08008069
 8007fbc:	08008069 	.word	0x08008069
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	08008069 	.word	0x08008069
 8007fc8:	08008069 	.word	0x08008069
 8007fcc:	08008069 	.word	0x08008069
 8007fd0:	08008069 	.word	0x08008069
 8007fd4:	08008049 	.word	0x08008049
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008069 	.word	0x08008069
 8007fe0:	08008069 	.word	0x08008069
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	08008069 	.word	0x08008069
 8007fec:	08008069 	.word	0x08008069
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008051 	.word	0x08008051
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008069 	.word	0x08008069
 8008000:	08008069 	.word	0x08008069
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008069 	.word	0x08008069
 8008010:	08008069 	.word	0x08008069
 8008014:	08008059 	.word	0x08008059
 8008018:	08008069 	.word	0x08008069
 800801c:	08008069 	.word	0x08008069
 8008020:	08008069 	.word	0x08008069
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
 8008034:	08008061 	.word	0x08008061
 8008038:	2301      	movs	r3, #1
 800803a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800803e:	e233      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008040:	2304      	movs	r3, #4
 8008042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008046:	e22f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800804e:	e22b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008050:	2310      	movs	r3, #16
 8008052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008056:	e227      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008058:	2320      	movs	r3, #32
 800805a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800805e:	e223      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008066:	e21f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800806e:	bf00      	nop
 8008070:	e21a      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6d      	ldr	r2, [pc, #436]	; (800822c <UART_SetConfig+0x35c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d132      	bne.n	80080e2 <UART_SetConfig+0x212>
 800807c:	4b6a      	ldr	r3, [pc, #424]	; (8008228 <UART_SetConfig+0x358>)
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	2b05      	cmp	r3, #5
 8008086:	d827      	bhi.n	80080d8 <UART_SetConfig+0x208>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0x1c0>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080a9 	.word	0x080080a9
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b9 	.word	0x080080b9
 800809c:	080080c1 	.word	0x080080c1
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080ae:	e1fb      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080b6:	e1f7      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080be:	e1f3      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080c6:	e1ef      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080c8:	2320      	movs	r3, #32
 80080ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080ce:	e1eb      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080d6:	e1e7      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080d8:	2380      	movs	r3, #128	; 0x80
 80080da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080de:	bf00      	nop
 80080e0:	e1e2      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a52      	ldr	r2, [pc, #328]	; (8008230 <UART_SetConfig+0x360>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d132      	bne.n	8008152 <UART_SetConfig+0x282>
 80080ec:	4b4e      	ldr	r3, [pc, #312]	; (8008228 <UART_SetConfig+0x358>)
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	2b05      	cmp	r3, #5
 80080f6:	d827      	bhi.n	8008148 <UART_SetConfig+0x278>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x230>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008119 	.word	0x08008119
 8008104:	08008121 	.word	0x08008121
 8008108:	08008129 	.word	0x08008129
 800810c:	08008131 	.word	0x08008131
 8008110:	08008139 	.word	0x08008139
 8008114:	08008141 	.word	0x08008141
 8008118:	2300      	movs	r3, #0
 800811a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800811e:	e1c3      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008126:	e1bf      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800812e:	e1bb      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008136:	e1b7      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008138:	2320      	movs	r3, #32
 800813a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800813e:	e1b3      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008146:	e1af      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800814e:	bf00      	nop
 8008150:	e1aa      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a37      	ldr	r2, [pc, #220]	; (8008234 <UART_SetConfig+0x364>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d132      	bne.n	80081c2 <UART_SetConfig+0x2f2>
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <UART_SetConfig+0x358>)
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	2b05      	cmp	r3, #5
 8008166:	d827      	bhi.n	80081b8 <UART_SetConfig+0x2e8>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <UART_SetConfig+0x2a0>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008189 	.word	0x08008189
 8008174:	08008191 	.word	0x08008191
 8008178:	08008199 	.word	0x08008199
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2300      	movs	r3, #0
 800818a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800818e:	e18b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008196:	e187      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800819e:	e183      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081a6:	e17f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081ae:	e17b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081b6:	e177      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081be:	bf00      	nop
 80081c0:	e172      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <UART_SetConfig+0x368>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d144      	bne.n	8008256 <UART_SetConfig+0x386>
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <UART_SetConfig+0x358>)
 80081ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d839      	bhi.n	800824c <UART_SetConfig+0x37c>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0x310>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080081f9 	.word	0x080081f9
 80081e4:	08008201 	.word	0x08008201
 80081e8:	08008209 	.word	0x08008209
 80081ec:	08008211 	.word	0x08008211
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	08008245 	.word	0x08008245
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081fe:	e153      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008206:	e14f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800820e:	e14b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008216:	e147      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008218:	cfff69f3 	.word	0xcfff69f3
 800821c:	58000c00 	.word	0x58000c00
 8008220:	11fff4ff 	.word	0x11fff4ff
 8008224:	40011000 	.word	0x40011000
 8008228:	58024400 	.word	0x58024400
 800822c:	40004400 	.word	0x40004400
 8008230:	40004800 	.word	0x40004800
 8008234:	40004c00 	.word	0x40004c00
 8008238:	40005000 	.word	0x40005000
 800823c:	2320      	movs	r3, #32
 800823e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008242:	e131      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800824a:	e12d      	b.n	80084a8 <UART_SetConfig+0x5d8>
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008252:	bf00      	nop
 8008254:	e128      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4ac3      	ldr	r2, [pc, #780]	; (8008568 <UART_SetConfig+0x698>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d178      	bne.n	8008352 <UART_SetConfig+0x482>
 8008260:	4bc2      	ldr	r3, [pc, #776]	; (800856c <UART_SetConfig+0x69c>)
 8008262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008268:	2b28      	cmp	r3, #40	; 0x28
 800826a:	d86d      	bhi.n	8008348 <UART_SetConfig+0x478>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x3a4>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	08008319 	.word	0x08008319
 8008278:	08008349 	.word	0x08008349
 800827c:	08008349 	.word	0x08008349
 8008280:	08008349 	.word	0x08008349
 8008284:	08008349 	.word	0x08008349
 8008288:	08008349 	.word	0x08008349
 800828c:	08008349 	.word	0x08008349
 8008290:	08008349 	.word	0x08008349
 8008294:	08008321 	.word	0x08008321
 8008298:	08008349 	.word	0x08008349
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008329 	.word	0x08008329
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008339 	.word	0x08008339
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008341 	.word	0x08008341
 8008318:	2301      	movs	r3, #1
 800831a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800831e:	e0c3      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008320:	2304      	movs	r3, #4
 8008322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008326:	e0bf      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008328:	2308      	movs	r3, #8
 800832a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800832e:	e0bb      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008330:	2310      	movs	r3, #16
 8008332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008336:	e0b7      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008338:	2320      	movs	r3, #32
 800833a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800833e:	e0b3      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008346:	e0af      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800834e:	bf00      	nop
 8008350:	e0aa      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a86      	ldr	r2, [pc, #536]	; (8008570 <UART_SetConfig+0x6a0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d132      	bne.n	80083c2 <UART_SetConfig+0x4f2>
 800835c:	4b83      	ldr	r3, [pc, #524]	; (800856c <UART_SetConfig+0x69c>)
 800835e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	2b05      	cmp	r3, #5
 8008366:	d827      	bhi.n	80083b8 <UART_SetConfig+0x4e8>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x4a0>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
 8008378:	08008399 	.word	0x08008399
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800838e:	e08b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008396:	e087      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800839e:	e083      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80083a6:	e07f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80083a8:	2320      	movs	r3, #32
 80083aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80083ae:	e07b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80083b6:	e077      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80083be:	bf00      	nop
 80083c0:	e072      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a6b      	ldr	r2, [pc, #428]	; (8008574 <UART_SetConfig+0x6a4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d132      	bne.n	8008432 <UART_SetConfig+0x562>
 80083cc:	4b67      	ldr	r3, [pc, #412]	; (800856c <UART_SetConfig+0x69c>)
 80083ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d827      	bhi.n	8008428 <UART_SetConfig+0x558>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x510>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80083fe:	e053      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008406:	e04f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800840e:	e04b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008416:	e047      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800841e:	e043      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008426:	e03f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800842e:	bf00      	nop
 8008430:	e03a      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a50      	ldr	r2, [pc, #320]	; (8008578 <UART_SetConfig+0x6a8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d132      	bne.n	80084a2 <UART_SetConfig+0x5d2>
 800843c:	4b4b      	ldr	r3, [pc, #300]	; (800856c <UART_SetConfig+0x69c>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	2b05      	cmp	r3, #5
 8008446:	d827      	bhi.n	8008498 <UART_SetConfig+0x5c8>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0x580>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	08008469 	.word	0x08008469
 8008454:	08008471 	.word	0x08008471
 8008458:	08008479 	.word	0x08008479
 800845c:	08008481 	.word	0x08008481
 8008460:	08008489 	.word	0x08008489
 8008464:	08008491 	.word	0x08008491
 8008468:	2302      	movs	r3, #2
 800846a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800846e:	e01b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008470:	2304      	movs	r3, #4
 8008472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008476:	e017      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008478:	2308      	movs	r3, #8
 800847a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800847e:	e013      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008480:	2310      	movs	r3, #16
 8008482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008486:	e00f      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008488:	2320      	movs	r3, #32
 800848a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800848e:	e00b      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008496:	e007      	b.n	80084a8 <UART_SetConfig+0x5d8>
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800849e:	bf00      	nop
 80084a0:	e002      	b.n	80084a8 <UART_SetConfig+0x5d8>
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a32      	ldr	r2, [pc, #200]	; (8008578 <UART_SetConfig+0x6a8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	f040 86f7 	bne.w	80092a2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	f000 80c0 	beq.w	800863e <UART_SetConfig+0x76e>
 80084be:	2b08      	cmp	r3, #8
 80084c0:	dc04      	bgt.n	80084cc <UART_SetConfig+0x5fc>
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d00c      	beq.n	80084e0 <UART_SetConfig+0x610>
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d065      	beq.n	8008596 <UART_SetConfig+0x6c6>
 80084ca:	e27a      	b.n	80089c2 <UART_SetConfig+0xaf2>
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	f000 81b0 	beq.w	8008832 <UART_SetConfig+0x962>
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	f000 821e 	beq.w	8008914 <UART_SetConfig+0xa44>
 80084d8:	2b10      	cmp	r3, #16
 80084da:	f000 8104 	beq.w	80086e6 <UART_SetConfig+0x816>
 80084de:	e270      	b.n	80089c2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084e0:	f7fd fe52 	bl	8006188 <HAL_RCCEx_GetD3PCLK1Freq>
 80084e4:	4602      	mov	r2, r0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d04e      	beq.n	800858c <UART_SetConfig+0x6bc>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d048      	beq.n	8008588 <UART_SetConfig+0x6b8>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d042      	beq.n	8008584 <UART_SetConfig+0x6b4>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b03      	cmp	r3, #3
 8008504:	d03c      	beq.n	8008580 <UART_SetConfig+0x6b0>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b04      	cmp	r3, #4
 800850c:	d036      	beq.n	800857c <UART_SetConfig+0x6ac>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b05      	cmp	r3, #5
 8008514:	d026      	beq.n	8008564 <UART_SetConfig+0x694>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b06      	cmp	r3, #6
 800851c:	d020      	beq.n	8008560 <UART_SetConfig+0x690>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2b07      	cmp	r3, #7
 8008524:	d01a      	beq.n	800855c <UART_SetConfig+0x68c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b08      	cmp	r3, #8
 800852c:	d014      	beq.n	8008558 <UART_SetConfig+0x688>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b09      	cmp	r3, #9
 8008534:	d00e      	beq.n	8008554 <UART_SetConfig+0x684>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	2b0a      	cmp	r3, #10
 800853c:	d008      	beq.n	8008550 <UART_SetConfig+0x680>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b0b      	cmp	r3, #11
 8008544:	d102      	bne.n	800854c <UART_SetConfig+0x67c>
 8008546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800854a:	e020      	b.n	800858e <UART_SetConfig+0x6be>
 800854c:	2301      	movs	r3, #1
 800854e:	e01e      	b.n	800858e <UART_SetConfig+0x6be>
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	e01c      	b.n	800858e <UART_SetConfig+0x6be>
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	e01a      	b.n	800858e <UART_SetConfig+0x6be>
 8008558:	2320      	movs	r3, #32
 800855a:	e018      	b.n	800858e <UART_SetConfig+0x6be>
 800855c:	2310      	movs	r3, #16
 800855e:	e016      	b.n	800858e <UART_SetConfig+0x6be>
 8008560:	230c      	movs	r3, #12
 8008562:	e014      	b.n	800858e <UART_SetConfig+0x6be>
 8008564:	230a      	movs	r3, #10
 8008566:	e012      	b.n	800858e <UART_SetConfig+0x6be>
 8008568:	40011400 	.word	0x40011400
 800856c:	58024400 	.word	0x58024400
 8008570:	40007800 	.word	0x40007800
 8008574:	40007c00 	.word	0x40007c00
 8008578:	58000c00 	.word	0x58000c00
 800857c:	2308      	movs	r3, #8
 800857e:	e006      	b.n	800858e <UART_SetConfig+0x6be>
 8008580:	2306      	movs	r3, #6
 8008582:	e004      	b.n	800858e <UART_SetConfig+0x6be>
 8008584:	2304      	movs	r3, #4
 8008586:	e002      	b.n	800858e <UART_SetConfig+0x6be>
 8008588:	2302      	movs	r3, #2
 800858a:	e000      	b.n	800858e <UART_SetConfig+0x6be>
 800858c:	2301      	movs	r3, #1
 800858e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008594:	e219      	b.n	80089ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fe0a 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d044      	beq.n	8008634 <UART_SetConfig+0x764>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d03e      	beq.n	8008630 <UART_SetConfig+0x760>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d038      	beq.n	800862c <UART_SetConfig+0x75c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d032      	beq.n	8008628 <UART_SetConfig+0x758>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d02c      	beq.n	8008624 <UART_SetConfig+0x754>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d026      	beq.n	8008620 <UART_SetConfig+0x750>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b06      	cmp	r3, #6
 80085d8:	d020      	beq.n	800861c <UART_SetConfig+0x74c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b07      	cmp	r3, #7
 80085e0:	d01a      	beq.n	8008618 <UART_SetConfig+0x748>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d014      	beq.n	8008614 <UART_SetConfig+0x744>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b09      	cmp	r3, #9
 80085f0:	d00e      	beq.n	8008610 <UART_SetConfig+0x740>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	d008      	beq.n	800860c <UART_SetConfig+0x73c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b0b      	cmp	r3, #11
 8008600:	d102      	bne.n	8008608 <UART_SetConfig+0x738>
 8008602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008606:	e016      	b.n	8008636 <UART_SetConfig+0x766>
 8008608:	2301      	movs	r3, #1
 800860a:	e014      	b.n	8008636 <UART_SetConfig+0x766>
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	e012      	b.n	8008636 <UART_SetConfig+0x766>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	e010      	b.n	8008636 <UART_SetConfig+0x766>
 8008614:	2320      	movs	r3, #32
 8008616:	e00e      	b.n	8008636 <UART_SetConfig+0x766>
 8008618:	2310      	movs	r3, #16
 800861a:	e00c      	b.n	8008636 <UART_SetConfig+0x766>
 800861c:	230c      	movs	r3, #12
 800861e:	e00a      	b.n	8008636 <UART_SetConfig+0x766>
 8008620:	230a      	movs	r3, #10
 8008622:	e008      	b.n	8008636 <UART_SetConfig+0x766>
 8008624:	2308      	movs	r3, #8
 8008626:	e006      	b.n	8008636 <UART_SetConfig+0x766>
 8008628:	2306      	movs	r3, #6
 800862a:	e004      	b.n	8008636 <UART_SetConfig+0x766>
 800862c:	2304      	movs	r3, #4
 800862e:	e002      	b.n	8008636 <UART_SetConfig+0x766>
 8008630:	2302      	movs	r3, #2
 8008632:	e000      	b.n	8008636 <UART_SetConfig+0x766>
 8008634:	2301      	movs	r3, #1
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800863c:	e1c5      	b.n	80089ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd ff02 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d044      	beq.n	80086dc <UART_SetConfig+0x80c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	2b01      	cmp	r3, #1
 8008658:	d03e      	beq.n	80086d8 <UART_SetConfig+0x808>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b02      	cmp	r3, #2
 8008660:	d038      	beq.n	80086d4 <UART_SetConfig+0x804>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2b03      	cmp	r3, #3
 8008668:	d032      	beq.n	80086d0 <UART_SetConfig+0x800>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	2b04      	cmp	r3, #4
 8008670:	d02c      	beq.n	80086cc <UART_SetConfig+0x7fc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2b05      	cmp	r3, #5
 8008678:	d026      	beq.n	80086c8 <UART_SetConfig+0x7f8>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	2b06      	cmp	r3, #6
 8008680:	d020      	beq.n	80086c4 <UART_SetConfig+0x7f4>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2b07      	cmp	r3, #7
 8008688:	d01a      	beq.n	80086c0 <UART_SetConfig+0x7f0>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	2b08      	cmp	r3, #8
 8008690:	d014      	beq.n	80086bc <UART_SetConfig+0x7ec>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	2b09      	cmp	r3, #9
 8008698:	d00e      	beq.n	80086b8 <UART_SetConfig+0x7e8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b0a      	cmp	r3, #10
 80086a0:	d008      	beq.n	80086b4 <UART_SetConfig+0x7e4>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b0b      	cmp	r3, #11
 80086a8:	d102      	bne.n	80086b0 <UART_SetConfig+0x7e0>
 80086aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ae:	e016      	b.n	80086de <UART_SetConfig+0x80e>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e014      	b.n	80086de <UART_SetConfig+0x80e>
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	e012      	b.n	80086de <UART_SetConfig+0x80e>
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	e010      	b.n	80086de <UART_SetConfig+0x80e>
 80086bc:	2320      	movs	r3, #32
 80086be:	e00e      	b.n	80086de <UART_SetConfig+0x80e>
 80086c0:	2310      	movs	r3, #16
 80086c2:	e00c      	b.n	80086de <UART_SetConfig+0x80e>
 80086c4:	230c      	movs	r3, #12
 80086c6:	e00a      	b.n	80086de <UART_SetConfig+0x80e>
 80086c8:	230a      	movs	r3, #10
 80086ca:	e008      	b.n	80086de <UART_SetConfig+0x80e>
 80086cc:	2308      	movs	r3, #8
 80086ce:	e006      	b.n	80086de <UART_SetConfig+0x80e>
 80086d0:	2306      	movs	r3, #6
 80086d2:	e004      	b.n	80086de <UART_SetConfig+0x80e>
 80086d4:	2304      	movs	r3, #4
 80086d6:	e002      	b.n	80086de <UART_SetConfig+0x80e>
 80086d8:	2302      	movs	r3, #2
 80086da:	e000      	b.n	80086de <UART_SetConfig+0x80e>
 80086dc:	2301      	movs	r3, #1
 80086de:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086e4:	e171      	b.n	80089ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086e6:	4b7a      	ldr	r3, [pc, #488]	; (80088d0 <UART_SetConfig+0xa00>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d054      	beq.n	800879c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80086f2:	4b77      	ldr	r3, [pc, #476]	; (80088d0 <UART_SetConfig+0xa00>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	4a75      	ldr	r2, [pc, #468]	; (80088d4 <UART_SetConfig+0xa04>)
 80086fe:	40da      	lsrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	d044      	beq.n	8008792 <UART_SetConfig+0x8c2>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b01      	cmp	r3, #1
 800870e:	d03e      	beq.n	800878e <UART_SetConfig+0x8be>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b02      	cmp	r3, #2
 8008716:	d038      	beq.n	800878a <UART_SetConfig+0x8ba>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b03      	cmp	r3, #3
 800871e:	d032      	beq.n	8008786 <UART_SetConfig+0x8b6>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b04      	cmp	r3, #4
 8008726:	d02c      	beq.n	8008782 <UART_SetConfig+0x8b2>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b05      	cmp	r3, #5
 800872e:	d026      	beq.n	800877e <UART_SetConfig+0x8ae>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b06      	cmp	r3, #6
 8008736:	d020      	beq.n	800877a <UART_SetConfig+0x8aa>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b07      	cmp	r3, #7
 800873e:	d01a      	beq.n	8008776 <UART_SetConfig+0x8a6>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b08      	cmp	r3, #8
 8008746:	d014      	beq.n	8008772 <UART_SetConfig+0x8a2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b09      	cmp	r3, #9
 800874e:	d00e      	beq.n	800876e <UART_SetConfig+0x89e>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b0a      	cmp	r3, #10
 8008756:	d008      	beq.n	800876a <UART_SetConfig+0x89a>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b0b      	cmp	r3, #11
 800875e:	d102      	bne.n	8008766 <UART_SetConfig+0x896>
 8008760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008764:	e016      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008766:	2301      	movs	r3, #1
 8008768:	e014      	b.n	8008794 <UART_SetConfig+0x8c4>
 800876a:	2380      	movs	r3, #128	; 0x80
 800876c:	e012      	b.n	8008794 <UART_SetConfig+0x8c4>
 800876e:	2340      	movs	r3, #64	; 0x40
 8008770:	e010      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008772:	2320      	movs	r3, #32
 8008774:	e00e      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008776:	2310      	movs	r3, #16
 8008778:	e00c      	b.n	8008794 <UART_SetConfig+0x8c4>
 800877a:	230c      	movs	r3, #12
 800877c:	e00a      	b.n	8008794 <UART_SetConfig+0x8c4>
 800877e:	230a      	movs	r3, #10
 8008780:	e008      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008782:	2308      	movs	r3, #8
 8008784:	e006      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008786:	2306      	movs	r3, #6
 8008788:	e004      	b.n	8008794 <UART_SetConfig+0x8c4>
 800878a:	2304      	movs	r3, #4
 800878c:	e002      	b.n	8008794 <UART_SetConfig+0x8c4>
 800878e:	2302      	movs	r3, #2
 8008790:	e000      	b.n	8008794 <UART_SetConfig+0x8c4>
 8008792:	2301      	movs	r3, #1
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800879a:	e116      	b.n	80089ca <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d043      	beq.n	800882c <UART_SetConfig+0x95c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d03d      	beq.n	8008828 <UART_SetConfig+0x958>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d037      	beq.n	8008824 <UART_SetConfig+0x954>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d031      	beq.n	8008820 <UART_SetConfig+0x950>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d02b      	beq.n	800881c <UART_SetConfig+0x94c>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d025      	beq.n	8008818 <UART_SetConfig+0x948>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b06      	cmp	r3, #6
 80087d2:	d01f      	beq.n	8008814 <UART_SetConfig+0x944>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b07      	cmp	r3, #7
 80087da:	d019      	beq.n	8008810 <UART_SetConfig+0x940>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d013      	beq.n	800880c <UART_SetConfig+0x93c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d00d      	beq.n	8008808 <UART_SetConfig+0x938>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b0a      	cmp	r3, #10
 80087f2:	d007      	beq.n	8008804 <UART_SetConfig+0x934>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b0b      	cmp	r3, #11
 80087fa:	d101      	bne.n	8008800 <UART_SetConfig+0x930>
 80087fc:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <UART_SetConfig+0xa08>)
 80087fe:	e016      	b.n	800882e <UART_SetConfig+0x95e>
 8008800:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <UART_SetConfig+0xa04>)
 8008802:	e014      	b.n	800882e <UART_SetConfig+0x95e>
 8008804:	4b35      	ldr	r3, [pc, #212]	; (80088dc <UART_SetConfig+0xa0c>)
 8008806:	e012      	b.n	800882e <UART_SetConfig+0x95e>
 8008808:	4b35      	ldr	r3, [pc, #212]	; (80088e0 <UART_SetConfig+0xa10>)
 800880a:	e010      	b.n	800882e <UART_SetConfig+0x95e>
 800880c:	4b35      	ldr	r3, [pc, #212]	; (80088e4 <UART_SetConfig+0xa14>)
 800880e:	e00e      	b.n	800882e <UART_SetConfig+0x95e>
 8008810:	4b35      	ldr	r3, [pc, #212]	; (80088e8 <UART_SetConfig+0xa18>)
 8008812:	e00c      	b.n	800882e <UART_SetConfig+0x95e>
 8008814:	4b35      	ldr	r3, [pc, #212]	; (80088ec <UART_SetConfig+0xa1c>)
 8008816:	e00a      	b.n	800882e <UART_SetConfig+0x95e>
 8008818:	4b35      	ldr	r3, [pc, #212]	; (80088f0 <UART_SetConfig+0xa20>)
 800881a:	e008      	b.n	800882e <UART_SetConfig+0x95e>
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <UART_SetConfig+0xa24>)
 800881e:	e006      	b.n	800882e <UART_SetConfig+0x95e>
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <UART_SetConfig+0xa28>)
 8008822:	e004      	b.n	800882e <UART_SetConfig+0x95e>
 8008824:	4b35      	ldr	r3, [pc, #212]	; (80088fc <UART_SetConfig+0xa2c>)
 8008826:	e002      	b.n	800882e <UART_SetConfig+0x95e>
 8008828:	4b35      	ldr	r3, [pc, #212]	; (8008900 <UART_SetConfig+0xa30>)
 800882a:	e000      	b.n	800882e <UART_SetConfig+0x95e>
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <UART_SetConfig+0xa04>)
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008830:	e0cb      	b.n	80089ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d046      	beq.n	80088c8 <UART_SetConfig+0x9f8>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b01      	cmp	r3, #1
 8008840:	d040      	beq.n	80088c4 <UART_SetConfig+0x9f4>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b02      	cmp	r3, #2
 8008848:	d03a      	beq.n	80088c0 <UART_SetConfig+0x9f0>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	2b03      	cmp	r3, #3
 8008850:	d034      	beq.n	80088bc <UART_SetConfig+0x9ec>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2b04      	cmp	r3, #4
 8008858:	d02e      	beq.n	80088b8 <UART_SetConfig+0x9e8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b05      	cmp	r3, #5
 8008860:	d028      	beq.n	80088b4 <UART_SetConfig+0x9e4>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2b06      	cmp	r3, #6
 8008868:	d022      	beq.n	80088b0 <UART_SetConfig+0x9e0>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b07      	cmp	r3, #7
 8008870:	d01c      	beq.n	80088ac <UART_SetConfig+0x9dc>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	2b08      	cmp	r3, #8
 8008878:	d016      	beq.n	80088a8 <UART_SetConfig+0x9d8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	2b09      	cmp	r3, #9
 8008880:	d00f      	beq.n	80088a2 <UART_SetConfig+0x9d2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b0a      	cmp	r3, #10
 8008888:	d008      	beq.n	800889c <UART_SetConfig+0x9cc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	2b0b      	cmp	r3, #11
 8008890:	d102      	bne.n	8008898 <UART_SetConfig+0x9c8>
 8008892:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008896:	e018      	b.n	80088ca <UART_SetConfig+0x9fa>
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <UART_SetConfig+0xa18>)
 800889a:	e016      	b.n	80088ca <UART_SetConfig+0x9fa>
 800889c:	f647 2312 	movw	r3, #31250	; 0x7a12
 80088a0:	e013      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80088a6:	e010      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088a8:	4b16      	ldr	r3, [pc, #88]	; (8008904 <UART_SetConfig+0xa34>)
 80088aa:	e00e      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <UART_SetConfig+0xa08>)
 80088ae:	e00c      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088b0:	4b15      	ldr	r3, [pc, #84]	; (8008908 <UART_SetConfig+0xa38>)
 80088b2:	e00a      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <UART_SetConfig+0xa3c>)
 80088b6:	e008      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <UART_SetConfig+0xa0c>)
 80088ba:	e006      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088bc:	4b14      	ldr	r3, [pc, #80]	; (8008910 <UART_SetConfig+0xa40>)
 80088be:	e004      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <UART_SetConfig+0xa10>)
 80088c2:	e002      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088c4:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <UART_SetConfig+0xa14>)
 80088c6:	e000      	b.n	80088ca <UART_SetConfig+0x9fa>
 80088c8:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <UART_SetConfig+0xa18>)
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088cc:	e07d      	b.n	80089ca <UART_SetConfig+0xafa>
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	03d09000 	.word	0x03d09000
 80088d8:	0003d090 	.word	0x0003d090
 80088dc:	0007a120 	.word	0x0007a120
 80088e0:	000f4240 	.word	0x000f4240
 80088e4:	001e8480 	.word	0x001e8480
 80088e8:	003d0900 	.word	0x003d0900
 80088ec:	00516155 	.word	0x00516155
 80088f0:	0061a800 	.word	0x0061a800
 80088f4:	007a1200 	.word	0x007a1200
 80088f8:	00a2c2aa 	.word	0x00a2c2aa
 80088fc:	00f42400 	.word	0x00f42400
 8008900:	01e84800 	.word	0x01e84800
 8008904:	0001e848 	.word	0x0001e848
 8008908:	00051615 	.word	0x00051615
 800890c:	00061a80 	.word	0x00061a80
 8008910:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d04e      	beq.n	80089ba <UART_SetConfig+0xaea>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b01      	cmp	r3, #1
 8008922:	d047      	beq.n	80089b4 <UART_SetConfig+0xae4>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b02      	cmp	r3, #2
 800892a:	d040      	beq.n	80089ae <UART_SetConfig+0xade>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b03      	cmp	r3, #3
 8008932:	d039      	beq.n	80089a8 <UART_SetConfig+0xad8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	2b04      	cmp	r3, #4
 800893a:	d032      	beq.n	80089a2 <UART_SetConfig+0xad2>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b05      	cmp	r3, #5
 8008942:	d02b      	beq.n	800899c <UART_SetConfig+0xacc>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	2b06      	cmp	r3, #6
 800894a:	d024      	beq.n	8008996 <UART_SetConfig+0xac6>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	2b07      	cmp	r3, #7
 8008952:	d01d      	beq.n	8008990 <UART_SetConfig+0xac0>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b08      	cmp	r3, #8
 800895a:	d016      	beq.n	800898a <UART_SetConfig+0xaba>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b09      	cmp	r3, #9
 8008962:	d00f      	beq.n	8008984 <UART_SetConfig+0xab4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2b0a      	cmp	r3, #10
 800896a:	d008      	beq.n	800897e <UART_SetConfig+0xaae>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b0b      	cmp	r3, #11
 8008972:	d101      	bne.n	8008978 <UART_SetConfig+0xaa8>
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	e022      	b.n	80089be <UART_SetConfig+0xaee>
 8008978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800897c:	e01f      	b.n	80089be <UART_SetConfig+0xaee>
 800897e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008982:	e01c      	b.n	80089be <UART_SetConfig+0xaee>
 8008984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008988:	e019      	b.n	80089be <UART_SetConfig+0xaee>
 800898a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898e:	e016      	b.n	80089be <UART_SetConfig+0xaee>
 8008990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008994:	e013      	b.n	80089be <UART_SetConfig+0xaee>
 8008996:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800899a:	e010      	b.n	80089be <UART_SetConfig+0xaee>
 800899c:	f640 43cc 	movw	r3, #3276	; 0xccc
 80089a0:	e00d      	b.n	80089be <UART_SetConfig+0xaee>
 80089a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089a6:	e00a      	b.n	80089be <UART_SetConfig+0xaee>
 80089a8:	f241 5355 	movw	r3, #5461	; 0x1555
 80089ac:	e007      	b.n	80089be <UART_SetConfig+0xaee>
 80089ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089b2:	e004      	b.n	80089be <UART_SetConfig+0xaee>
 80089b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089b8:	e001      	b.n	80089be <UART_SetConfig+0xaee>
 80089ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089c0:	e003      	b.n	80089ca <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80089c8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f001 83e8 	beq.w	800a1a2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4413      	add	r3, r2
 80089dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d305      	bcc.n	80089ee <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d904      	bls.n	80089f8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f4:	f001 bbd5 	b.w	800a1a2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80089f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	f000 8154 	beq.w	8008caa <UART_SetConfig+0xdda>
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	dc06      	bgt.n	8008a14 <UART_SetConfig+0xb44>
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d00f      	beq.n	8008a2a <UART_SetConfig+0xb5a>
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	f000 80ac 	beq.w	8008b68 <UART_SetConfig+0xc98>
 8008a10:	f000 bc30 	b.w	8009274 <UART_SetConfig+0x13a4>
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	f000 832d 	beq.w	8009074 <UART_SetConfig+0x11a4>
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	f000 83a5 	beq.w	800916a <UART_SetConfig+0x129a>
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	f000 81e3 	beq.w	8008dec <UART_SetConfig+0xf1c>
 8008a26:	f000 bc25 	b.w	8009274 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a2a:	f7fd fbad 	bl	8006188 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a2e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	4618      	mov	r0, r3
 8008a34:	f04f 0100 	mov.w	r1, #0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d067      	beq.n	8008b10 <UART_SetConfig+0xc40>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d05e      	beq.n	8008b06 <UART_SetConfig+0xc36>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d055      	beq.n	8008afc <UART_SetConfig+0xc2c>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d04c      	beq.n	8008af2 <UART_SetConfig+0xc22>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d043      	beq.n	8008ae8 <UART_SetConfig+0xc18>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2b05      	cmp	r3, #5
 8008a66:	d03a      	beq.n	8008ade <UART_SetConfig+0xc0e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b06      	cmp	r3, #6
 8008a6e:	d031      	beq.n	8008ad4 <UART_SetConfig+0xc04>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b07      	cmp	r3, #7
 8008a76:	d028      	beq.n	8008aca <UART_SetConfig+0xbfa>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d01f      	beq.n	8008ac0 <UART_SetConfig+0xbf0>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d016      	beq.n	8008ab6 <UART_SetConfig+0xbe6>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b0a      	cmp	r3, #10
 8008a8e:	d00d      	beq.n	8008aac <UART_SetConfig+0xbdc>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	2b0b      	cmp	r3, #11
 8008a96:	d104      	bne.n	8008aa2 <UART_SetConfig+0xbd2>
 8008a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a9c:	f04f 0400 	mov.w	r4, #0
 8008aa0:	e03a      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008aa2:	f04f 0301 	mov.w	r3, #1
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	e035      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008aac:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	e030      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008ab6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008aba:	f04f 0400 	mov.w	r4, #0
 8008abe:	e02b      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008ac0:	f04f 0320 	mov.w	r3, #32
 8008ac4:	f04f 0400 	mov.w	r4, #0
 8008ac8:	e026      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008aca:	f04f 0310 	mov.w	r3, #16
 8008ace:	f04f 0400 	mov.w	r4, #0
 8008ad2:	e021      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008ad4:	f04f 030c 	mov.w	r3, #12
 8008ad8:	f04f 0400 	mov.w	r4, #0
 8008adc:	e01c      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008ade:	f04f 030a 	mov.w	r3, #10
 8008ae2:	f04f 0400 	mov.w	r4, #0
 8008ae6:	e017      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008ae8:	f04f 0308 	mov.w	r3, #8
 8008aec:	f04f 0400 	mov.w	r4, #0
 8008af0:	e012      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008af2:	f04f 0306 	mov.w	r3, #6
 8008af6:	f04f 0400 	mov.w	r4, #0
 8008afa:	e00d      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008afc:	f04f 0304 	mov.w	r3, #4
 8008b00:	f04f 0400 	mov.w	r4, #0
 8008b04:	e008      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008b06:	f04f 0302 	mov.w	r3, #2
 8008b0a:	f04f 0400 	mov.w	r4, #0
 8008b0e:	e003      	b.n	8008b18 <UART_SetConfig+0xc48>
 8008b10:	f04f 0301 	mov.w	r3, #1
 8008b14:	f04f 0400 	mov.w	r4, #0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	f7f7 fbe4 	bl	80002e8 <__aeabi_uldivmod>
 8008b20:	4603      	mov	r3, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	4619      	mov	r1, r3
 8008b26:	4622      	mov	r2, r4
 8008b28:	f04f 0300 	mov.w	r3, #0
 8008b2c:	f04f 0400 	mov.w	r4, #0
 8008b30:	0214      	lsls	r4, r2, #8
 8008b32:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008b36:	020b      	lsls	r3, r1, #8
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6852      	ldr	r2, [r2, #4]
 8008b3c:	0852      	lsrs	r2, r2, #1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	eb13 0b01 	adds.w	fp, r3, r1
 8008b48:	eb44 0c02 	adc.w	ip, r4, r2
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	4661      	mov	r1, ip
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f04f 0400 	mov.w	r4, #0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4623      	mov	r3, r4
 8008b5c:	f7f7 fbc4 	bl	80002e8 <__aeabi_uldivmod>
 8008b60:	4603      	mov	r3, r0
 8008b62:	460c      	mov	r4, r1
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b66:	e389      	b.n	800927c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b68:	f107 0318 	add.w	r3, r7, #24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fd fb21 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f04f 0100 	mov.w	r1, #0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d067      	beq.n	8008c52 <UART_SetConfig+0xd82>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d05e      	beq.n	8008c48 <UART_SetConfig+0xd78>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d055      	beq.n	8008c3e <UART_SetConfig+0xd6e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d04c      	beq.n	8008c34 <UART_SetConfig+0xd64>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d043      	beq.n	8008c2a <UART_SetConfig+0xd5a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b05      	cmp	r3, #5
 8008ba8:	d03a      	beq.n	8008c20 <UART_SetConfig+0xd50>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b06      	cmp	r3, #6
 8008bb0:	d031      	beq.n	8008c16 <UART_SetConfig+0xd46>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	d028      	beq.n	8008c0c <UART_SetConfig+0xd3c>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d01f      	beq.n	8008c02 <UART_SetConfig+0xd32>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b09      	cmp	r3, #9
 8008bc8:	d016      	beq.n	8008bf8 <UART_SetConfig+0xd28>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b0a      	cmp	r3, #10
 8008bd0:	d00d      	beq.n	8008bee <UART_SetConfig+0xd1e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b0b      	cmp	r3, #11
 8008bd8:	d104      	bne.n	8008be4 <UART_SetConfig+0xd14>
 8008bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bde:	f04f 0400 	mov.w	r4, #0
 8008be2:	e03a      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008be4:	f04f 0301 	mov.w	r3, #1
 8008be8:	f04f 0400 	mov.w	r4, #0
 8008bec:	e035      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008bee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008bf2:	f04f 0400 	mov.w	r4, #0
 8008bf6:	e030      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008bf8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008bfc:	f04f 0400 	mov.w	r4, #0
 8008c00:	e02b      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c02:	f04f 0320 	mov.w	r3, #32
 8008c06:	f04f 0400 	mov.w	r4, #0
 8008c0a:	e026      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c0c:	f04f 0310 	mov.w	r3, #16
 8008c10:	f04f 0400 	mov.w	r4, #0
 8008c14:	e021      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c16:	f04f 030c 	mov.w	r3, #12
 8008c1a:	f04f 0400 	mov.w	r4, #0
 8008c1e:	e01c      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c20:	f04f 030a 	mov.w	r3, #10
 8008c24:	f04f 0400 	mov.w	r4, #0
 8008c28:	e017      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c2a:	f04f 0308 	mov.w	r3, #8
 8008c2e:	f04f 0400 	mov.w	r4, #0
 8008c32:	e012      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c34:	f04f 0306 	mov.w	r3, #6
 8008c38:	f04f 0400 	mov.w	r4, #0
 8008c3c:	e00d      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c3e:	f04f 0304 	mov.w	r3, #4
 8008c42:	f04f 0400 	mov.w	r4, #0
 8008c46:	e008      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c48:	f04f 0302 	mov.w	r3, #2
 8008c4c:	f04f 0400 	mov.w	r4, #0
 8008c50:	e003      	b.n	8008c5a <UART_SetConfig+0xd8a>
 8008c52:	f04f 0301 	mov.w	r3, #1
 8008c56:	f04f 0400 	mov.w	r4, #0
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4623      	mov	r3, r4
 8008c5e:	f7f7 fb43 	bl	80002e8 <__aeabi_uldivmod>
 8008c62:	4603      	mov	r3, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	4619      	mov	r1, r3
 8008c68:	4622      	mov	r2, r4
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	f04f 0400 	mov.w	r4, #0
 8008c72:	0214      	lsls	r4, r2, #8
 8008c74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008c78:	020b      	lsls	r3, r1, #8
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6852      	ldr	r2, [r2, #4]
 8008c7e:	0852      	lsrs	r2, r2, #1
 8008c80:	4611      	mov	r1, r2
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	eb13 0b01 	adds.w	fp, r3, r1
 8008c8a:	eb44 0c02 	adc.w	ip, r4, r2
 8008c8e:	4658      	mov	r0, fp
 8008c90:	4661      	mov	r1, ip
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f04f 0400 	mov.w	r4, #0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	f7f7 fb23 	bl	80002e8 <__aeabi_uldivmod>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ca8:	e2e8      	b.n	800927c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd fbcc 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d067      	beq.n	8008d94 <UART_SetConfig+0xec4>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d05e      	beq.n	8008d8a <UART_SetConfig+0xeba>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d055      	beq.n	8008d80 <UART_SetConfig+0xeb0>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d04c      	beq.n	8008d76 <UART_SetConfig+0xea6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d043      	beq.n	8008d6c <UART_SetConfig+0xe9c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d03a      	beq.n	8008d62 <UART_SetConfig+0xe92>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b06      	cmp	r3, #6
 8008cf2:	d031      	beq.n	8008d58 <UART_SetConfig+0xe88>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b07      	cmp	r3, #7
 8008cfa:	d028      	beq.n	8008d4e <UART_SetConfig+0xe7e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d01f      	beq.n	8008d44 <UART_SetConfig+0xe74>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b09      	cmp	r3, #9
 8008d0a:	d016      	beq.n	8008d3a <UART_SetConfig+0xe6a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b0a      	cmp	r3, #10
 8008d12:	d00d      	beq.n	8008d30 <UART_SetConfig+0xe60>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b0b      	cmp	r3, #11
 8008d1a:	d104      	bne.n	8008d26 <UART_SetConfig+0xe56>
 8008d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d20:	f04f 0400 	mov.w	r4, #0
 8008d24:	e03a      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d26:	f04f 0301 	mov.w	r3, #1
 8008d2a:	f04f 0400 	mov.w	r4, #0
 8008d2e:	e035      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d30:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	e030      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008d3e:	f04f 0400 	mov.w	r4, #0
 8008d42:	e02b      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d44:	f04f 0320 	mov.w	r3, #32
 8008d48:	f04f 0400 	mov.w	r4, #0
 8008d4c:	e026      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d4e:	f04f 0310 	mov.w	r3, #16
 8008d52:	f04f 0400 	mov.w	r4, #0
 8008d56:	e021      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d58:	f04f 030c 	mov.w	r3, #12
 8008d5c:	f04f 0400 	mov.w	r4, #0
 8008d60:	e01c      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d62:	f04f 030a 	mov.w	r3, #10
 8008d66:	f04f 0400 	mov.w	r4, #0
 8008d6a:	e017      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d6c:	f04f 0308 	mov.w	r3, #8
 8008d70:	f04f 0400 	mov.w	r4, #0
 8008d74:	e012      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d76:	f04f 0306 	mov.w	r3, #6
 8008d7a:	f04f 0400 	mov.w	r4, #0
 8008d7e:	e00d      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d80:	f04f 0304 	mov.w	r3, #4
 8008d84:	f04f 0400 	mov.w	r4, #0
 8008d88:	e008      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d8a:	f04f 0302 	mov.w	r3, #2
 8008d8e:	f04f 0400 	mov.w	r4, #0
 8008d92:	e003      	b.n	8008d9c <UART_SetConfig+0xecc>
 8008d94:	f04f 0301 	mov.w	r3, #1
 8008d98:	f04f 0400 	mov.w	r4, #0
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4623      	mov	r3, r4
 8008da0:	f7f7 faa2 	bl	80002e8 <__aeabi_uldivmod>
 8008da4:	4603      	mov	r3, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4619      	mov	r1, r3
 8008daa:	4622      	mov	r2, r4
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	f04f 0400 	mov.w	r4, #0
 8008db4:	0214      	lsls	r4, r2, #8
 8008db6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008dba:	020b      	lsls	r3, r1, #8
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	6852      	ldr	r2, [r2, #4]
 8008dc0:	0852      	lsrs	r2, r2, #1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	eb13 0b01 	adds.w	fp, r3, r1
 8008dcc:	eb44 0c02 	adc.w	ip, r4, r2
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	4661      	mov	r1, ip
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f04f 0400 	mov.w	r4, #0
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4623      	mov	r3, r4
 8008de0:	f7f7 fa82 	bl	80002e8 <__aeabi_uldivmod>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dea:	e247      	b.n	800927c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dec:	4b96      	ldr	r3, [pc, #600]	; (8009048 <UART_SetConfig+0x1178>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80a3 	beq.w	8008f40 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfa:	4b93      	ldr	r3, [pc, #588]	; (8009048 <UART_SetConfig+0x1178>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	08db      	lsrs	r3, r3, #3
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	4a91      	ldr	r2, [pc, #580]	; (800904c <UART_SetConfig+0x117c>)
 8008e06:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f04f 0100 	mov.w	r1, #0
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d067      	beq.n	8008ee8 <UART_SetConfig+0x1018>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d05e      	beq.n	8008ede <UART_SetConfig+0x100e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d055      	beq.n	8008ed4 <UART_SetConfig+0x1004>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d04c      	beq.n	8008eca <UART_SetConfig+0xffa>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d043      	beq.n	8008ec0 <UART_SetConfig+0xff0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b05      	cmp	r3, #5
 8008e3e:	d03a      	beq.n	8008eb6 <UART_SetConfig+0xfe6>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d031      	beq.n	8008eac <UART_SetConfig+0xfdc>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b07      	cmp	r3, #7
 8008e4e:	d028      	beq.n	8008ea2 <UART_SetConfig+0xfd2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d01f      	beq.n	8008e98 <UART_SetConfig+0xfc8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d016      	beq.n	8008e8e <UART_SetConfig+0xfbe>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b0a      	cmp	r3, #10
 8008e66:	d00d      	beq.n	8008e84 <UART_SetConfig+0xfb4>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b0b      	cmp	r3, #11
 8008e6e:	d104      	bne.n	8008e7a <UART_SetConfig+0xfaa>
 8008e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e74:	f04f 0400 	mov.w	r4, #0
 8008e78:	e03a      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008e7a:	f04f 0301 	mov.w	r3, #1
 8008e7e:	f04f 0400 	mov.w	r4, #0
 8008e82:	e035      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008e84:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e88:	f04f 0400 	mov.w	r4, #0
 8008e8c:	e030      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008e8e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008e92:	f04f 0400 	mov.w	r4, #0
 8008e96:	e02b      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008e98:	f04f 0320 	mov.w	r3, #32
 8008e9c:	f04f 0400 	mov.w	r4, #0
 8008ea0:	e026      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008ea2:	f04f 0310 	mov.w	r3, #16
 8008ea6:	f04f 0400 	mov.w	r4, #0
 8008eaa:	e021      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008eac:	f04f 030c 	mov.w	r3, #12
 8008eb0:	f04f 0400 	mov.w	r4, #0
 8008eb4:	e01c      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008eb6:	f04f 030a 	mov.w	r3, #10
 8008eba:	f04f 0400 	mov.w	r4, #0
 8008ebe:	e017      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008ec0:	f04f 0308 	mov.w	r3, #8
 8008ec4:	f04f 0400 	mov.w	r4, #0
 8008ec8:	e012      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008eca:	f04f 0306 	mov.w	r3, #6
 8008ece:	f04f 0400 	mov.w	r4, #0
 8008ed2:	e00d      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008ed4:	f04f 0304 	mov.w	r3, #4
 8008ed8:	f04f 0400 	mov.w	r4, #0
 8008edc:	e008      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008ede:	f04f 0302 	mov.w	r3, #2
 8008ee2:	f04f 0400 	mov.w	r4, #0
 8008ee6:	e003      	b.n	8008ef0 <UART_SetConfig+0x1020>
 8008ee8:	f04f 0301 	mov.w	r3, #1
 8008eec:	f04f 0400 	mov.w	r4, #0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	f7f7 f9f8 	bl	80002e8 <__aeabi_uldivmod>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4619      	mov	r1, r3
 8008efe:	4622      	mov	r2, r4
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	f04f 0400 	mov.w	r4, #0
 8008f08:	0214      	lsls	r4, r2, #8
 8008f0a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008f0e:	020b      	lsls	r3, r1, #8
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6852      	ldr	r2, [r2, #4]
 8008f14:	0852      	lsrs	r2, r2, #1
 8008f16:	4611      	mov	r1, r2
 8008f18:	f04f 0200 	mov.w	r2, #0
 8008f1c:	eb13 0b01 	adds.w	fp, r3, r1
 8008f20:	eb44 0c02 	adc.w	ip, r4, r2
 8008f24:	4658      	mov	r0, fp
 8008f26:	4661      	mov	r1, ip
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f04f 0400 	mov.w	r4, #0
 8008f30:	461a      	mov	r2, r3
 8008f32:	4623      	mov	r3, r4
 8008f34:	f7f7 f9d8 	bl	80002e8 <__aeabi_uldivmod>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8008f3e:	e19d      	b.n	800927c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d05b      	beq.n	8009000 <UART_SetConfig+0x1130>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d053      	beq.n	8008ff8 <UART_SetConfig+0x1128>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d04b      	beq.n	8008ff0 <UART_SetConfig+0x1120>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d043      	beq.n	8008fe8 <UART_SetConfig+0x1118>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d03b      	beq.n	8008fe0 <UART_SetConfig+0x1110>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	d033      	beq.n	8008fd8 <UART_SetConfig+0x1108>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b06      	cmp	r3, #6
 8008f76:	d02b      	beq.n	8008fd0 <UART_SetConfig+0x1100>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b07      	cmp	r3, #7
 8008f7e:	d023      	beq.n	8008fc8 <UART_SetConfig+0x10f8>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d01b      	beq.n	8008fc0 <UART_SetConfig+0x10f0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	d013      	beq.n	8008fb8 <UART_SetConfig+0x10e8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b0a      	cmp	r3, #10
 8008f96:	d00b      	beq.n	8008fb0 <UART_SetConfig+0x10e0>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b0b      	cmp	r3, #11
 8008f9e:	d103      	bne.n	8008fa8 <UART_SetConfig+0x10d8>
 8008fa0:	4b2a      	ldr	r3, [pc, #168]	; (800904c <UART_SetConfig+0x117c>)
 8008fa2:	f04f 0400 	mov.w	r4, #0
 8008fa6:	e02e      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <UART_SetConfig+0x1180>)
 8008faa:	f04f 0403 	mov.w	r4, #3
 8008fae:	e02a      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fb0:	4b28      	ldr	r3, [pc, #160]	; (8009054 <UART_SetConfig+0x1184>)
 8008fb2:	f04f 0400 	mov.w	r4, #0
 8008fb6:	e026      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fb8:	4b27      	ldr	r3, [pc, #156]	; (8009058 <UART_SetConfig+0x1188>)
 8008fba:	f04f 0400 	mov.w	r4, #0
 8008fbe:	e022      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fc0:	4b26      	ldr	r3, [pc, #152]	; (800905c <UART_SetConfig+0x118c>)
 8008fc2:	f04f 0400 	mov.w	r4, #0
 8008fc6:	e01e      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fc8:	4b25      	ldr	r3, [pc, #148]	; (8009060 <UART_SetConfig+0x1190>)
 8008fca:	f04f 0400 	mov.w	r4, #0
 8008fce:	e01a      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fd0:	a419      	add	r4, pc, #100	; (adr r4, 8009038 <UART_SetConfig+0x1168>)
 8008fd2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008fd6:	e016      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fd8:	4b22      	ldr	r3, [pc, #136]	; (8009064 <UART_SetConfig+0x1194>)
 8008fda:	f04f 0400 	mov.w	r4, #0
 8008fde:	e012      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fe0:	4b21      	ldr	r3, [pc, #132]	; (8009068 <UART_SetConfig+0x1198>)
 8008fe2:	f04f 0400 	mov.w	r4, #0
 8008fe6:	e00e      	b.n	8009006 <UART_SetConfig+0x1136>
 8008fe8:	a415      	add	r4, pc, #84	; (adr r4, 8009040 <UART_SetConfig+0x1170>)
 8008fea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008fee:	e00a      	b.n	8009006 <UART_SetConfig+0x1136>
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <UART_SetConfig+0x119c>)
 8008ff2:	f04f 0400 	mov.w	r4, #0
 8008ff6:	e006      	b.n	8009006 <UART_SetConfig+0x1136>
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <UART_SetConfig+0x11a0>)
 8008ffa:	f04f 0401 	mov.w	r4, #1
 8008ffe:	e002      	b.n	8009006 <UART_SetConfig+0x1136>
 8009000:	4b13      	ldr	r3, [pc, #76]	; (8009050 <UART_SetConfig+0x1180>)
 8009002:	f04f 0403 	mov.w	r4, #3
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6852      	ldr	r2, [r2, #4]
 800900a:	0852      	lsrs	r2, r2, #1
 800900c:	4611      	mov	r1, r2
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	eb13 0b01 	adds.w	fp, r3, r1
 8009016:	eb44 0c02 	adc.w	ip, r4, r2
 800901a:	4658      	mov	r0, fp
 800901c:	4661      	mov	r1, ip
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f04f 0400 	mov.w	r4, #0
 8009026:	461a      	mov	r2, r3
 8009028:	4623      	mov	r3, r4
 800902a:	f7f7 f95d 	bl	80002e8 <__aeabi_uldivmod>
 800902e:	4603      	mov	r3, r0
 8009030:	460c      	mov	r4, r1
 8009032:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009034:	e122      	b.n	800927c <UART_SetConfig+0x13ac>
 8009036:	bf00      	nop
 8009038:	51615500 	.word	0x51615500
 800903c:	00000000 	.word	0x00000000
 8009040:	a2c2aa00 	.word	0xa2c2aa00
 8009044:	00000000 	.word	0x00000000
 8009048:	58024400 	.word	0x58024400
 800904c:	03d09000 	.word	0x03d09000
 8009050:	d0900000 	.word	0xd0900000
 8009054:	07a12000 	.word	0x07a12000
 8009058:	0f424000 	.word	0x0f424000
 800905c:	1e848000 	.word	0x1e848000
 8009060:	3d090000 	.word	0x3d090000
 8009064:	61a80000 	.word	0x61a80000
 8009068:	7a120000 	.word	0x7a120000
 800906c:	f4240000 	.word	0xf4240000
 8009070:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05b      	beq.n	8009134 <UART_SetConfig+0x1264>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b01      	cmp	r3, #1
 8009082:	d053      	beq.n	800912c <UART_SetConfig+0x125c>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b02      	cmp	r3, #2
 800908a:	d04b      	beq.n	8009124 <UART_SetConfig+0x1254>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b03      	cmp	r3, #3
 8009092:	d043      	beq.n	800911c <UART_SetConfig+0x124c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	2b04      	cmp	r3, #4
 800909a:	d03b      	beq.n	8009114 <UART_SetConfig+0x1244>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	d033      	beq.n	800910c <UART_SetConfig+0x123c>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2b06      	cmp	r3, #6
 80090aa:	d02b      	beq.n	8009104 <UART_SetConfig+0x1234>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	2b07      	cmp	r3, #7
 80090b2:	d023      	beq.n	80090fc <UART_SetConfig+0x122c>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d01b      	beq.n	80090f4 <UART_SetConfig+0x1224>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d013      	beq.n	80090ec <UART_SetConfig+0x121c>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b0a      	cmp	r3, #10
 80090ca:	d00b      	beq.n	80090e4 <UART_SetConfig+0x1214>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	2b0b      	cmp	r3, #11
 80090d2:	d103      	bne.n	80090dc <UART_SetConfig+0x120c>
 80090d4:	4bc0      	ldr	r3, [pc, #768]	; (80093d8 <UART_SetConfig+0x1508>)
 80090d6:	f04f 0400 	mov.w	r4, #0
 80090da:	e02e      	b.n	800913a <UART_SetConfig+0x126a>
 80090dc:	4bbf      	ldr	r3, [pc, #764]	; (80093dc <UART_SetConfig+0x150c>)
 80090de:	f04f 0400 	mov.w	r4, #0
 80090e2:	e02a      	b.n	800913a <UART_SetConfig+0x126a>
 80090e4:	4bbe      	ldr	r3, [pc, #760]	; (80093e0 <UART_SetConfig+0x1510>)
 80090e6:	f04f 0400 	mov.w	r4, #0
 80090ea:	e026      	b.n	800913a <UART_SetConfig+0x126a>
 80090ec:	4bbd      	ldr	r3, [pc, #756]	; (80093e4 <UART_SetConfig+0x1514>)
 80090ee:	f04f 0400 	mov.w	r4, #0
 80090f2:	e022      	b.n	800913a <UART_SetConfig+0x126a>
 80090f4:	4bbc      	ldr	r3, [pc, #752]	; (80093e8 <UART_SetConfig+0x1518>)
 80090f6:	f04f 0400 	mov.w	r4, #0
 80090fa:	e01e      	b.n	800913a <UART_SetConfig+0x126a>
 80090fc:	4bbb      	ldr	r3, [pc, #748]	; (80093ec <UART_SetConfig+0x151c>)
 80090fe:	f04f 0400 	mov.w	r4, #0
 8009102:	e01a      	b.n	800913a <UART_SetConfig+0x126a>
 8009104:	a4b0      	add	r4, pc, #704	; (adr r4, 80093c8 <UART_SetConfig+0x14f8>)
 8009106:	e9d4 3400 	ldrd	r3, r4, [r4]
 800910a:	e016      	b.n	800913a <UART_SetConfig+0x126a>
 800910c:	4bb8      	ldr	r3, [pc, #736]	; (80093f0 <UART_SetConfig+0x1520>)
 800910e:	f04f 0400 	mov.w	r4, #0
 8009112:	e012      	b.n	800913a <UART_SetConfig+0x126a>
 8009114:	4bb7      	ldr	r3, [pc, #732]	; (80093f4 <UART_SetConfig+0x1524>)
 8009116:	f04f 0400 	mov.w	r4, #0
 800911a:	e00e      	b.n	800913a <UART_SetConfig+0x126a>
 800911c:	a4ac      	add	r4, pc, #688	; (adr r4, 80093d0 <UART_SetConfig+0x1500>)
 800911e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009122:	e00a      	b.n	800913a <UART_SetConfig+0x126a>
 8009124:	4bb4      	ldr	r3, [pc, #720]	; (80093f8 <UART_SetConfig+0x1528>)
 8009126:	f04f 0400 	mov.w	r4, #0
 800912a:	e006      	b.n	800913a <UART_SetConfig+0x126a>
 800912c:	4bb3      	ldr	r3, [pc, #716]	; (80093fc <UART_SetConfig+0x152c>)
 800912e:	f04f 0400 	mov.w	r4, #0
 8009132:	e002      	b.n	800913a <UART_SetConfig+0x126a>
 8009134:	4ba9      	ldr	r3, [pc, #676]	; (80093dc <UART_SetConfig+0x150c>)
 8009136:	f04f 0400 	mov.w	r4, #0
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6852      	ldr	r2, [r2, #4]
 800913e:	0852      	lsrs	r2, r2, #1
 8009140:	4611      	mov	r1, r2
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	eb13 0b01 	adds.w	fp, r3, r1
 800914a:	eb44 0c02 	adc.w	ip, r4, r2
 800914e:	4658      	mov	r0, fp
 8009150:	4661      	mov	r1, ip
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f04f 0400 	mov.w	r4, #0
 800915a:	461a      	mov	r2, r3
 800915c:	4623      	mov	r3, r4
 800915e:	f7f7 f8c3 	bl	80002e8 <__aeabi_uldivmod>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009168:	e088      	b.n	800927c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	d064      	beq.n	800923c <UART_SetConfig+0x136c>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	2b01      	cmp	r3, #1
 8009178:	d05b      	beq.n	8009232 <UART_SetConfig+0x1362>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2b02      	cmp	r3, #2
 8009180:	d052      	beq.n	8009228 <UART_SetConfig+0x1358>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b03      	cmp	r3, #3
 8009188:	d04a      	beq.n	8009220 <UART_SetConfig+0x1350>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	2b04      	cmp	r3, #4
 8009190:	d041      	beq.n	8009216 <UART_SetConfig+0x1346>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	2b05      	cmp	r3, #5
 8009198:	d039      	beq.n	800920e <UART_SetConfig+0x133e>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2b06      	cmp	r3, #6
 80091a0:	d031      	beq.n	8009206 <UART_SetConfig+0x1336>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	d028      	beq.n	80091fc <UART_SetConfig+0x132c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d01f      	beq.n	80091f2 <UART_SetConfig+0x1322>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d016      	beq.n	80091e8 <UART_SetConfig+0x1318>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2b0a      	cmp	r3, #10
 80091c0:	d00d      	beq.n	80091de <UART_SetConfig+0x130e>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b0b      	cmp	r3, #11
 80091c8:	d104      	bne.n	80091d4 <UART_SetConfig+0x1304>
 80091ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ce:	f04f 0400 	mov.w	r4, #0
 80091d2:	e037      	b.n	8009244 <UART_SetConfig+0x1374>
 80091d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091d8:	f04f 0400 	mov.w	r4, #0
 80091dc:	e032      	b.n	8009244 <UART_SetConfig+0x1374>
 80091de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091e2:	f04f 0400 	mov.w	r4, #0
 80091e6:	e02d      	b.n	8009244 <UART_SetConfig+0x1374>
 80091e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091ec:	f04f 0400 	mov.w	r4, #0
 80091f0:	e028      	b.n	8009244 <UART_SetConfig+0x1374>
 80091f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091f6:	f04f 0400 	mov.w	r4, #0
 80091fa:	e023      	b.n	8009244 <UART_SetConfig+0x1374>
 80091fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009200:	f04f 0400 	mov.w	r4, #0
 8009204:	e01e      	b.n	8009244 <UART_SetConfig+0x1374>
 8009206:	4b7e      	ldr	r3, [pc, #504]	; (8009400 <UART_SetConfig+0x1530>)
 8009208:	f04f 0400 	mov.w	r4, #0
 800920c:	e01a      	b.n	8009244 <UART_SetConfig+0x1374>
 800920e:	4b7d      	ldr	r3, [pc, #500]	; (8009404 <UART_SetConfig+0x1534>)
 8009210:	f04f 0400 	mov.w	r4, #0
 8009214:	e016      	b.n	8009244 <UART_SetConfig+0x1374>
 8009216:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800921a:	f04f 0400 	mov.w	r4, #0
 800921e:	e011      	b.n	8009244 <UART_SetConfig+0x1374>
 8009220:	4b79      	ldr	r3, [pc, #484]	; (8009408 <UART_SetConfig+0x1538>)
 8009222:	f04f 0400 	mov.w	r4, #0
 8009226:	e00d      	b.n	8009244 <UART_SetConfig+0x1374>
 8009228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800922c:	f04f 0400 	mov.w	r4, #0
 8009230:	e008      	b.n	8009244 <UART_SetConfig+0x1374>
 8009232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009236:	f04f 0400 	mov.w	r4, #0
 800923a:	e003      	b.n	8009244 <UART_SetConfig+0x1374>
 800923c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009240:	f04f 0400 	mov.w	r4, #0
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6852      	ldr	r2, [r2, #4]
 8009248:	0852      	lsrs	r2, r2, #1
 800924a:	4611      	mov	r1, r2
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	eb13 0b01 	adds.w	fp, r3, r1
 8009254:	eb44 0c02 	adc.w	ip, r4, r2
 8009258:	4658      	mov	r0, fp
 800925a:	4661      	mov	r1, ip
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f04f 0400 	mov.w	r4, #0
 8009264:	461a      	mov	r2, r3
 8009266:	4623      	mov	r3, r4
 8009268:	f7f7 f83e 	bl	80002e8 <__aeabi_uldivmod>
 800926c:	4603      	mov	r3, r0
 800926e:	460c      	mov	r4, r1
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009272:	e003      	b.n	800927c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800927a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009282:	d309      	bcc.n	8009298 <UART_SetConfig+0x13c8>
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800928a:	d205      	bcs.n	8009298 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009292:	60da      	str	r2, [r3, #12]
 8009294:	f000 bf85 	b.w	800a1a2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	f000 bf80 	b.w	800a1a2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092aa:	f040 83da 	bne.w	8009a62 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80092ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092b2:	2b40      	cmp	r3, #64	; 0x40
 80092b4:	f200 83b3 	bhi.w	8009a1e <UART_SetConfig+0x1b4e>
 80092b8:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <UART_SetConfig+0x13f0>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	0800940d 	.word	0x0800940d
 80092c4:	080094c5 	.word	0x080094c5
 80092c8:	08009a1f 	.word	0x08009a1f
 80092cc:	08009a1f 	.word	0x08009a1f
 80092d0:	0800957d 	.word	0x0800957d
 80092d4:	08009a1f 	.word	0x08009a1f
 80092d8:	08009a1f 	.word	0x08009a1f
 80092dc:	08009a1f 	.word	0x08009a1f
 80092e0:	08009639 	.word	0x08009639
 80092e4:	08009a1f 	.word	0x08009a1f
 80092e8:	08009a1f 	.word	0x08009a1f
 80092ec:	08009a1f 	.word	0x08009a1f
 80092f0:	08009a1f 	.word	0x08009a1f
 80092f4:	08009a1f 	.word	0x08009a1f
 80092f8:	08009a1f 	.word	0x08009a1f
 80092fc:	08009a1f 	.word	0x08009a1f
 8009300:	080096f5 	.word	0x080096f5
 8009304:	08009a1f 	.word	0x08009a1f
 8009308:	08009a1f 	.word	0x08009a1f
 800930c:	08009a1f 	.word	0x08009a1f
 8009310:	08009a1f 	.word	0x08009a1f
 8009314:	08009a1f 	.word	0x08009a1f
 8009318:	08009a1f 	.word	0x08009a1f
 800931c:	08009a1f 	.word	0x08009a1f
 8009320:	08009a1f 	.word	0x08009a1f
 8009324:	08009a1f 	.word	0x08009a1f
 8009328:	08009a1f 	.word	0x08009a1f
 800932c:	08009a1f 	.word	0x08009a1f
 8009330:	08009a1f 	.word	0x08009a1f
 8009334:	08009a1f 	.word	0x08009a1f
 8009338:	08009a1f 	.word	0x08009a1f
 800933c:	08009a1f 	.word	0x08009a1f
 8009340:	08009867 	.word	0x08009867
 8009344:	08009a1f 	.word	0x08009a1f
 8009348:	08009a1f 	.word	0x08009a1f
 800934c:	08009a1f 	.word	0x08009a1f
 8009350:	08009a1f 	.word	0x08009a1f
 8009354:	08009a1f 	.word	0x08009a1f
 8009358:	08009a1f 	.word	0x08009a1f
 800935c:	08009a1f 	.word	0x08009a1f
 8009360:	08009a1f 	.word	0x08009a1f
 8009364:	08009a1f 	.word	0x08009a1f
 8009368:	08009a1f 	.word	0x08009a1f
 800936c:	08009a1f 	.word	0x08009a1f
 8009370:	08009a1f 	.word	0x08009a1f
 8009374:	08009a1f 	.word	0x08009a1f
 8009378:	08009a1f 	.word	0x08009a1f
 800937c:	08009a1f 	.word	0x08009a1f
 8009380:	08009a1f 	.word	0x08009a1f
 8009384:	08009a1f 	.word	0x08009a1f
 8009388:	08009a1f 	.word	0x08009a1f
 800938c:	08009a1f 	.word	0x08009a1f
 8009390:	08009a1f 	.word	0x08009a1f
 8009394:	08009a1f 	.word	0x08009a1f
 8009398:	08009a1f 	.word	0x08009a1f
 800939c:	08009a1f 	.word	0x08009a1f
 80093a0:	08009a1f 	.word	0x08009a1f
 80093a4:	08009a1f 	.word	0x08009a1f
 80093a8:	08009a1f 	.word	0x08009a1f
 80093ac:	08009a1f 	.word	0x08009a1f
 80093b0:	08009a1f 	.word	0x08009a1f
 80093b4:	08009a1f 	.word	0x08009a1f
 80093b8:	08009a1f 	.word	0x08009a1f
 80093bc:	08009a1f 	.word	0x08009a1f
 80093c0:	0800995d 	.word	0x0800995d
 80093c4:	f3af 8000 	nop.w
 80093c8:	05161500 	.word	0x05161500
 80093cc:	00000000 	.word	0x00000000
 80093d0:	0a2c2a00 	.word	0x0a2c2a00
 80093d4:	00000000 	.word	0x00000000
 80093d8:	003d0900 	.word	0x003d0900
 80093dc:	3d090000 	.word	0x3d090000
 80093e0:	007a1200 	.word	0x007a1200
 80093e4:	00f42400 	.word	0x00f42400
 80093e8:	01e84800 	.word	0x01e84800
 80093ec:	03d09000 	.word	0x03d09000
 80093f0:	061a8000 	.word	0x061a8000
 80093f4:	07a12000 	.word	0x07a12000
 80093f8:	0f424000 	.word	0x0f424000
 80093fc:	1e848000 	.word	0x1e848000
 8009400:	000aaa00 	.word	0x000aaa00
 8009404:	000ccc00 	.word	0x000ccc00
 8009408:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800940c:	f7fb fd3a 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8009410:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	d044      	beq.n	80094a4 <UART_SetConfig+0x15d4>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	2b01      	cmp	r3, #1
 8009420:	d03e      	beq.n	80094a0 <UART_SetConfig+0x15d0>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b02      	cmp	r3, #2
 8009428:	d038      	beq.n	800949c <UART_SetConfig+0x15cc>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2b03      	cmp	r3, #3
 8009430:	d032      	beq.n	8009498 <UART_SetConfig+0x15c8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	2b04      	cmp	r3, #4
 8009438:	d02c      	beq.n	8009494 <UART_SetConfig+0x15c4>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	2b05      	cmp	r3, #5
 8009440:	d026      	beq.n	8009490 <UART_SetConfig+0x15c0>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	2b06      	cmp	r3, #6
 8009448:	d020      	beq.n	800948c <UART_SetConfig+0x15bc>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	2b07      	cmp	r3, #7
 8009450:	d01a      	beq.n	8009488 <UART_SetConfig+0x15b8>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	2b08      	cmp	r3, #8
 8009458:	d014      	beq.n	8009484 <UART_SetConfig+0x15b4>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b09      	cmp	r3, #9
 8009460:	d00e      	beq.n	8009480 <UART_SetConfig+0x15b0>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2b0a      	cmp	r3, #10
 8009468:	d008      	beq.n	800947c <UART_SetConfig+0x15ac>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b0b      	cmp	r3, #11
 8009470:	d102      	bne.n	8009478 <UART_SetConfig+0x15a8>
 8009472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009476:	e016      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009478:	2301      	movs	r3, #1
 800947a:	e014      	b.n	80094a6 <UART_SetConfig+0x15d6>
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	e012      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009480:	2340      	movs	r3, #64	; 0x40
 8009482:	e010      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009484:	2320      	movs	r3, #32
 8009486:	e00e      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009488:	2310      	movs	r3, #16
 800948a:	e00c      	b.n	80094a6 <UART_SetConfig+0x15d6>
 800948c:	230c      	movs	r3, #12
 800948e:	e00a      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009490:	230a      	movs	r3, #10
 8009492:	e008      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009494:	2308      	movs	r3, #8
 8009496:	e006      	b.n	80094a6 <UART_SetConfig+0x15d6>
 8009498:	2306      	movs	r3, #6
 800949a:	e004      	b.n	80094a6 <UART_SetConfig+0x15d6>
 800949c:	2304      	movs	r3, #4
 800949e:	e002      	b.n	80094a6 <UART_SetConfig+0x15d6>
 80094a0:	2302      	movs	r3, #2
 80094a2:	e000      	b.n	80094a6 <UART_SetConfig+0x15d6>
 80094a4:	2301      	movs	r3, #1
 80094a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	005a      	lsls	r2, r3, #1
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	441a      	add	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80094be:	b29b      	uxth	r3, r3
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094c2:	e2b0      	b.n	8009a26 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094c4:	f7fb fcf4 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 80094c8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d044      	beq.n	800955c <UART_SetConfig+0x168c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d03e      	beq.n	8009558 <UART_SetConfig+0x1688>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d038      	beq.n	8009554 <UART_SetConfig+0x1684>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d032      	beq.n	8009550 <UART_SetConfig+0x1680>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d02c      	beq.n	800954c <UART_SetConfig+0x167c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d026      	beq.n	8009548 <UART_SetConfig+0x1678>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b06      	cmp	r3, #6
 8009500:	d020      	beq.n	8009544 <UART_SetConfig+0x1674>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b07      	cmp	r3, #7
 8009508:	d01a      	beq.n	8009540 <UART_SetConfig+0x1670>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b08      	cmp	r3, #8
 8009510:	d014      	beq.n	800953c <UART_SetConfig+0x166c>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b09      	cmp	r3, #9
 8009518:	d00e      	beq.n	8009538 <UART_SetConfig+0x1668>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b0a      	cmp	r3, #10
 8009520:	d008      	beq.n	8009534 <UART_SetConfig+0x1664>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b0b      	cmp	r3, #11
 8009528:	d102      	bne.n	8009530 <UART_SetConfig+0x1660>
 800952a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800952e:	e016      	b.n	800955e <UART_SetConfig+0x168e>
 8009530:	2301      	movs	r3, #1
 8009532:	e014      	b.n	800955e <UART_SetConfig+0x168e>
 8009534:	2380      	movs	r3, #128	; 0x80
 8009536:	e012      	b.n	800955e <UART_SetConfig+0x168e>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	e010      	b.n	800955e <UART_SetConfig+0x168e>
 800953c:	2320      	movs	r3, #32
 800953e:	e00e      	b.n	800955e <UART_SetConfig+0x168e>
 8009540:	2310      	movs	r3, #16
 8009542:	e00c      	b.n	800955e <UART_SetConfig+0x168e>
 8009544:	230c      	movs	r3, #12
 8009546:	e00a      	b.n	800955e <UART_SetConfig+0x168e>
 8009548:	230a      	movs	r3, #10
 800954a:	e008      	b.n	800955e <UART_SetConfig+0x168e>
 800954c:	2308      	movs	r3, #8
 800954e:	e006      	b.n	800955e <UART_SetConfig+0x168e>
 8009550:	2306      	movs	r3, #6
 8009552:	e004      	b.n	800955e <UART_SetConfig+0x168e>
 8009554:	2304      	movs	r3, #4
 8009556:	e002      	b.n	800955e <UART_SetConfig+0x168e>
 8009558:	2302      	movs	r3, #2
 800955a:	e000      	b.n	800955e <UART_SetConfig+0x168e>
 800955c:	2301      	movs	r3, #1
 800955e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009560:	fbb2 f3f3 	udiv	r3, r2, r3
 8009564:	005a      	lsls	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	441a      	add	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	fbb2 f3f3 	udiv	r3, r2, r3
 8009576:	b29b      	uxth	r3, r3
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800957a:	e254      	b.n	8009a26 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957c:	f107 0318 	add.w	r3, r7, #24
 8009580:	4618      	mov	r0, r3
 8009582:	f7fc fe17 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d044      	beq.n	800961a <UART_SetConfig+0x174a>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b01      	cmp	r3, #1
 8009596:	d03e      	beq.n	8009616 <UART_SetConfig+0x1746>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	2b02      	cmp	r3, #2
 800959e:	d038      	beq.n	8009612 <UART_SetConfig+0x1742>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d032      	beq.n	800960e <UART_SetConfig+0x173e>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d02c      	beq.n	800960a <UART_SetConfig+0x173a>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	d026      	beq.n	8009606 <UART_SetConfig+0x1736>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	2b06      	cmp	r3, #6
 80095be:	d020      	beq.n	8009602 <UART_SetConfig+0x1732>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b07      	cmp	r3, #7
 80095c6:	d01a      	beq.n	80095fe <UART_SetConfig+0x172e>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d014      	beq.n	80095fa <UART_SetConfig+0x172a>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d00e      	beq.n	80095f6 <UART_SetConfig+0x1726>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2b0a      	cmp	r3, #10
 80095de:	d008      	beq.n	80095f2 <UART_SetConfig+0x1722>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b0b      	cmp	r3, #11
 80095e6:	d102      	bne.n	80095ee <UART_SetConfig+0x171e>
 80095e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ec:	e016      	b.n	800961c <UART_SetConfig+0x174c>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e014      	b.n	800961c <UART_SetConfig+0x174c>
 80095f2:	2380      	movs	r3, #128	; 0x80
 80095f4:	e012      	b.n	800961c <UART_SetConfig+0x174c>
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	e010      	b.n	800961c <UART_SetConfig+0x174c>
 80095fa:	2320      	movs	r3, #32
 80095fc:	e00e      	b.n	800961c <UART_SetConfig+0x174c>
 80095fe:	2310      	movs	r3, #16
 8009600:	e00c      	b.n	800961c <UART_SetConfig+0x174c>
 8009602:	230c      	movs	r3, #12
 8009604:	e00a      	b.n	800961c <UART_SetConfig+0x174c>
 8009606:	230a      	movs	r3, #10
 8009608:	e008      	b.n	800961c <UART_SetConfig+0x174c>
 800960a:	2308      	movs	r3, #8
 800960c:	e006      	b.n	800961c <UART_SetConfig+0x174c>
 800960e:	2306      	movs	r3, #6
 8009610:	e004      	b.n	800961c <UART_SetConfig+0x174c>
 8009612:	2304      	movs	r3, #4
 8009614:	e002      	b.n	800961c <UART_SetConfig+0x174c>
 8009616:	2302      	movs	r3, #2
 8009618:	e000      	b.n	800961c <UART_SetConfig+0x174c>
 800961a:	2301      	movs	r3, #1
 800961c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009620:	005a      	lsls	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	441a      	add	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009632:	b29b      	uxth	r3, r3
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009636:	e1f6      	b.n	8009a26 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	4618      	mov	r0, r3
 800963e:	f7fc ff05 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	d044      	beq.n	80096d6 <UART_SetConfig+0x1806>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2b01      	cmp	r3, #1
 8009652:	d03e      	beq.n	80096d2 <UART_SetConfig+0x1802>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b02      	cmp	r3, #2
 800965a:	d038      	beq.n	80096ce <UART_SetConfig+0x17fe>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b03      	cmp	r3, #3
 8009662:	d032      	beq.n	80096ca <UART_SetConfig+0x17fa>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	2b04      	cmp	r3, #4
 800966a:	d02c      	beq.n	80096c6 <UART_SetConfig+0x17f6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b05      	cmp	r3, #5
 8009672:	d026      	beq.n	80096c2 <UART_SetConfig+0x17f2>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	2b06      	cmp	r3, #6
 800967a:	d020      	beq.n	80096be <UART_SetConfig+0x17ee>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	2b07      	cmp	r3, #7
 8009682:	d01a      	beq.n	80096ba <UART_SetConfig+0x17ea>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	2b08      	cmp	r3, #8
 800968a:	d014      	beq.n	80096b6 <UART_SetConfig+0x17e6>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	2b09      	cmp	r3, #9
 8009692:	d00e      	beq.n	80096b2 <UART_SetConfig+0x17e2>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	2b0a      	cmp	r3, #10
 800969a:	d008      	beq.n	80096ae <UART_SetConfig+0x17de>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	2b0b      	cmp	r3, #11
 80096a2:	d102      	bne.n	80096aa <UART_SetConfig+0x17da>
 80096a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a8:	e016      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e014      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096ae:	2380      	movs	r3, #128	; 0x80
 80096b0:	e012      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	e010      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096b6:	2320      	movs	r3, #32
 80096b8:	e00e      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096ba:	2310      	movs	r3, #16
 80096bc:	e00c      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096be:	230c      	movs	r3, #12
 80096c0:	e00a      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096c2:	230a      	movs	r3, #10
 80096c4:	e008      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096c6:	2308      	movs	r3, #8
 80096c8:	e006      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096ca:	2306      	movs	r3, #6
 80096cc:	e004      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096ce:	2304      	movs	r3, #4
 80096d0:	e002      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e000      	b.n	80096d8 <UART_SetConfig+0x1808>
 80096d6:	2301      	movs	r3, #1
 80096d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096dc:	005a      	lsls	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	085b      	lsrs	r3, r3, #1
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096f2:	e198      	b.n	8009a26 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096f4:	4b87      	ldr	r3, [pc, #540]	; (8009914 <UART_SetConfig+0x1a44>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d05e      	beq.n	80097be <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009700:	4b84      	ldr	r3, [pc, #528]	; (8009914 <UART_SetConfig+0x1a44>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	08db      	lsrs	r3, r3, #3
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	4a83      	ldr	r2, [pc, #524]	; (8009918 <UART_SetConfig+0x1a48>)
 800970c:	40da      	lsrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d044      	beq.n	80097a0 <UART_SetConfig+0x18d0>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	2b01      	cmp	r3, #1
 800971c:	d03e      	beq.n	800979c <UART_SetConfig+0x18cc>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	2b02      	cmp	r3, #2
 8009724:	d038      	beq.n	8009798 <UART_SetConfig+0x18c8>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b03      	cmp	r3, #3
 800972c:	d032      	beq.n	8009794 <UART_SetConfig+0x18c4>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b04      	cmp	r3, #4
 8009734:	d02c      	beq.n	8009790 <UART_SetConfig+0x18c0>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	2b05      	cmp	r3, #5
 800973c:	d026      	beq.n	800978c <UART_SetConfig+0x18bc>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b06      	cmp	r3, #6
 8009744:	d020      	beq.n	8009788 <UART_SetConfig+0x18b8>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	2b07      	cmp	r3, #7
 800974c:	d01a      	beq.n	8009784 <UART_SetConfig+0x18b4>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	2b08      	cmp	r3, #8
 8009754:	d014      	beq.n	8009780 <UART_SetConfig+0x18b0>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	2b09      	cmp	r3, #9
 800975c:	d00e      	beq.n	800977c <UART_SetConfig+0x18ac>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b0a      	cmp	r3, #10
 8009764:	d008      	beq.n	8009778 <UART_SetConfig+0x18a8>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	2b0b      	cmp	r3, #11
 800976c:	d102      	bne.n	8009774 <UART_SetConfig+0x18a4>
 800976e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009772:	e016      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009774:	2301      	movs	r3, #1
 8009776:	e014      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009778:	2380      	movs	r3, #128	; 0x80
 800977a:	e012      	b.n	80097a2 <UART_SetConfig+0x18d2>
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	e010      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009780:	2320      	movs	r3, #32
 8009782:	e00e      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009784:	2310      	movs	r3, #16
 8009786:	e00c      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009788:	230c      	movs	r3, #12
 800978a:	e00a      	b.n	80097a2 <UART_SetConfig+0x18d2>
 800978c:	230a      	movs	r3, #10
 800978e:	e008      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009790:	2308      	movs	r3, #8
 8009792:	e006      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009794:	2306      	movs	r3, #6
 8009796:	e004      	b.n	80097a2 <UART_SetConfig+0x18d2>
 8009798:	2304      	movs	r3, #4
 800979a:	e002      	b.n	80097a2 <UART_SetConfig+0x18d2>
 800979c:	2302      	movs	r3, #2
 800979e:	e000      	b.n	80097a2 <UART_SetConfig+0x18d2>
 80097a0:	2301      	movs	r3, #1
 80097a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a6:	005a      	lsls	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	085b      	lsrs	r3, r3, #1
 80097ae:	441a      	add	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80097bc:	e133      	b.n	8009a26 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d043      	beq.n	800984e <UART_SetConfig+0x197e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d03d      	beq.n	800984a <UART_SetConfig+0x197a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d037      	beq.n	8009846 <UART_SetConfig+0x1976>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d031      	beq.n	8009842 <UART_SetConfig+0x1972>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d02b      	beq.n	800983e <UART_SetConfig+0x196e>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	d025      	beq.n	800983a <UART_SetConfig+0x196a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	2b06      	cmp	r3, #6
 80097f4:	d01f      	beq.n	8009836 <UART_SetConfig+0x1966>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	2b07      	cmp	r3, #7
 80097fc:	d019      	beq.n	8009832 <UART_SetConfig+0x1962>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009802:	2b08      	cmp	r3, #8
 8009804:	d013      	beq.n	800982e <UART_SetConfig+0x195e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	2b09      	cmp	r3, #9
 800980c:	d00d      	beq.n	800982a <UART_SetConfig+0x195a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	2b0a      	cmp	r3, #10
 8009814:	d007      	beq.n	8009826 <UART_SetConfig+0x1956>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	2b0b      	cmp	r3, #11
 800981c:	d101      	bne.n	8009822 <UART_SetConfig+0x1952>
 800981e:	4b3f      	ldr	r3, [pc, #252]	; (800991c <UART_SetConfig+0x1a4c>)
 8009820:	e016      	b.n	8009850 <UART_SetConfig+0x1980>
 8009822:	4b3f      	ldr	r3, [pc, #252]	; (8009920 <UART_SetConfig+0x1a50>)
 8009824:	e014      	b.n	8009850 <UART_SetConfig+0x1980>
 8009826:	4b3f      	ldr	r3, [pc, #252]	; (8009924 <UART_SetConfig+0x1a54>)
 8009828:	e012      	b.n	8009850 <UART_SetConfig+0x1980>
 800982a:	4b3f      	ldr	r3, [pc, #252]	; (8009928 <UART_SetConfig+0x1a58>)
 800982c:	e010      	b.n	8009850 <UART_SetConfig+0x1980>
 800982e:	4b3f      	ldr	r3, [pc, #252]	; (800992c <UART_SetConfig+0x1a5c>)
 8009830:	e00e      	b.n	8009850 <UART_SetConfig+0x1980>
 8009832:	4b3f      	ldr	r3, [pc, #252]	; (8009930 <UART_SetConfig+0x1a60>)
 8009834:	e00c      	b.n	8009850 <UART_SetConfig+0x1980>
 8009836:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <UART_SetConfig+0x1a64>)
 8009838:	e00a      	b.n	8009850 <UART_SetConfig+0x1980>
 800983a:	4b3f      	ldr	r3, [pc, #252]	; (8009938 <UART_SetConfig+0x1a68>)
 800983c:	e008      	b.n	8009850 <UART_SetConfig+0x1980>
 800983e:	4b3f      	ldr	r3, [pc, #252]	; (800993c <UART_SetConfig+0x1a6c>)
 8009840:	e006      	b.n	8009850 <UART_SetConfig+0x1980>
 8009842:	4b3f      	ldr	r3, [pc, #252]	; (8009940 <UART_SetConfig+0x1a70>)
 8009844:	e004      	b.n	8009850 <UART_SetConfig+0x1980>
 8009846:	4b3f      	ldr	r3, [pc, #252]	; (8009944 <UART_SetConfig+0x1a74>)
 8009848:	e002      	b.n	8009850 <UART_SetConfig+0x1980>
 800984a:	4b33      	ldr	r3, [pc, #204]	; (8009918 <UART_SetConfig+0x1a48>)
 800984c:	e000      	b.n	8009850 <UART_SetConfig+0x1980>
 800984e:	4b34      	ldr	r3, [pc, #208]	; (8009920 <UART_SetConfig+0x1a50>)
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6852      	ldr	r2, [r2, #4]
 8009854:	0852      	lsrs	r2, r2, #1
 8009856:	441a      	add	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009860:	b29b      	uxth	r3, r3
 8009862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009864:	e0df      	b.n	8009a26 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	d045      	beq.n	80098fa <UART_SetConfig+0x1a2a>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	2b01      	cmp	r3, #1
 8009874:	d03f      	beq.n	80098f6 <UART_SetConfig+0x1a26>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	2b02      	cmp	r3, #2
 800987c:	d039      	beq.n	80098f2 <UART_SetConfig+0x1a22>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	2b03      	cmp	r3, #3
 8009884:	d033      	beq.n	80098ee <UART_SetConfig+0x1a1e>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	2b04      	cmp	r3, #4
 800988c:	d02d      	beq.n	80098ea <UART_SetConfig+0x1a1a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	2b05      	cmp	r3, #5
 8009894:	d027      	beq.n	80098e6 <UART_SetConfig+0x1a16>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	2b06      	cmp	r3, #6
 800989c:	d021      	beq.n	80098e2 <UART_SetConfig+0x1a12>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	2b07      	cmp	r3, #7
 80098a4:	d01b      	beq.n	80098de <UART_SetConfig+0x1a0e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d015      	beq.n	80098da <UART_SetConfig+0x1a0a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d00f      	beq.n	80098d6 <UART_SetConfig+0x1a06>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	2b0a      	cmp	r3, #10
 80098bc:	d008      	beq.n	80098d0 <UART_SetConfig+0x1a00>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	2b0b      	cmp	r3, #11
 80098c4:	d102      	bne.n	80098cc <UART_SetConfig+0x19fc>
 80098c6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80098ca:	e017      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098cc:	4b18      	ldr	r3, [pc, #96]	; (8009930 <UART_SetConfig+0x1a60>)
 80098ce:	e015      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80098d4:	e012      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098d6:	4b1c      	ldr	r3, [pc, #112]	; (8009948 <UART_SetConfig+0x1a78>)
 80098d8:	e010      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098da:	4b1c      	ldr	r3, [pc, #112]	; (800994c <UART_SetConfig+0x1a7c>)
 80098dc:	e00e      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <UART_SetConfig+0x1a4c>)
 80098e0:	e00c      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098e2:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <UART_SetConfig+0x1a80>)
 80098e4:	e00a      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098e6:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <UART_SetConfig+0x1a84>)
 80098e8:	e008      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098ea:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <UART_SetConfig+0x1a54>)
 80098ec:	e006      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098ee:	4b1a      	ldr	r3, [pc, #104]	; (8009958 <UART_SetConfig+0x1a88>)
 80098f0:	e004      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098f2:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <UART_SetConfig+0x1a58>)
 80098f4:	e002      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098f6:	4b0d      	ldr	r3, [pc, #52]	; (800992c <UART_SetConfig+0x1a5c>)
 80098f8:	e000      	b.n	80098fc <UART_SetConfig+0x1a2c>
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <UART_SetConfig+0x1a60>)
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6852      	ldr	r2, [r2, #4]
 8009900:	0852      	lsrs	r2, r2, #1
 8009902:	441a      	add	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	fbb2 f3f3 	udiv	r3, r2, r3
 800990c:	b29b      	uxth	r3, r3
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009910:	e089      	b.n	8009a26 <UART_SetConfig+0x1b56>
 8009912:	bf00      	nop
 8009914:	58024400 	.word	0x58024400
 8009918:	03d09000 	.word	0x03d09000
 800991c:	0007a120 	.word	0x0007a120
 8009920:	07a12000 	.word	0x07a12000
 8009924:	000f4240 	.word	0x000f4240
 8009928:	001e8480 	.word	0x001e8480
 800992c:	003d0900 	.word	0x003d0900
 8009930:	007a1200 	.word	0x007a1200
 8009934:	00a2c2aa 	.word	0x00a2c2aa
 8009938:	00c35000 	.word	0x00c35000
 800993c:	00f42400 	.word	0x00f42400
 8009940:	01458554 	.word	0x01458554
 8009944:	01e84800 	.word	0x01e84800
 8009948:	0001e848 	.word	0x0001e848
 800994c:	0003d090 	.word	0x0003d090
 8009950:	000a2c2a 	.word	0x000a2c2a
 8009954:	000c3500 	.word	0x000c3500
 8009958:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d04f      	beq.n	8009a04 <UART_SetConfig+0x1b34>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	2b01      	cmp	r3, #1
 800996a:	d048      	beq.n	80099fe <UART_SetConfig+0x1b2e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b02      	cmp	r3, #2
 8009972:	d041      	beq.n	80099f8 <UART_SetConfig+0x1b28>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	2b03      	cmp	r3, #3
 800997a:	d03a      	beq.n	80099f2 <UART_SetConfig+0x1b22>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	2b04      	cmp	r3, #4
 8009982:	d033      	beq.n	80099ec <UART_SetConfig+0x1b1c>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	2b05      	cmp	r3, #5
 800998a:	d02c      	beq.n	80099e6 <UART_SetConfig+0x1b16>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	2b06      	cmp	r3, #6
 8009992:	d025      	beq.n	80099e0 <UART_SetConfig+0x1b10>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	2b07      	cmp	r3, #7
 800999a:	d01e      	beq.n	80099da <UART_SetConfig+0x1b0a>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d017      	beq.n	80099d4 <UART_SetConfig+0x1b04>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d010      	beq.n	80099ce <UART_SetConfig+0x1afe>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	2b0a      	cmp	r3, #10
 80099b2:	d009      	beq.n	80099c8 <UART_SetConfig+0x1af8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	2b0b      	cmp	r3, #11
 80099ba:	d102      	bne.n	80099c2 <UART_SetConfig+0x1af2>
 80099bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099c0:	e022      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099c6:	e01f      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099cc:	e01c      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d2:	e019      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099d8:	e016      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099de:	e013      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099e0:	f241 5354 	movw	r3, #5460	; 0x1554
 80099e4:	e010      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099e6:	f641 1398 	movw	r3, #6552	; 0x1998
 80099ea:	e00d      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099f0:	e00a      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099f2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80099f6:	e007      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099fc:	e004      	b.n	8009a08 <UART_SetConfig+0x1b38>
 80099fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a02:	e001      	b.n	8009a08 <UART_SetConfig+0x1b38>
 8009a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6852      	ldr	r2, [r2, #4]
 8009a0c:	0852      	lsrs	r2, r2, #1
 8009a0e:	441a      	add	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a1c:	e003      	b.n	8009a26 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	2b0f      	cmp	r3, #15
 8009a2a:	d916      	bls.n	8009a5a <UART_SetConfig+0x1b8a>
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a32:	d212      	bcs.n	8009a5a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f023 030f 	bic.w	r3, r3, #15
 8009a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	085b      	lsrs	r3, r3, #1
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f003 0307 	and.w	r3, r3, #7
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a56:	60da      	str	r2, [r3, #12]
 8009a58:	e3a3      	b.n	800a1a2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a60:	e39f      	b.n	800a1a2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009a62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a66:	2b40      	cmp	r3, #64	; 0x40
 8009a68:	f200 8388 	bhi.w	800a17c <UART_SetConfig+0x22ac>
 8009a6c:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <UART_SetConfig+0x1ba4>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009b79 	.word	0x08009b79
 8009a78:	08009c2f 	.word	0x08009c2f
 8009a7c:	0800a17d 	.word	0x0800a17d
 8009a80:	0800a17d 	.word	0x0800a17d
 8009a84:	08009ce5 	.word	0x08009ce5
 8009a88:	0800a17d 	.word	0x0800a17d
 8009a8c:	0800a17d 	.word	0x0800a17d
 8009a90:	0800a17d 	.word	0x0800a17d
 8009a94:	08009d9f 	.word	0x08009d9f
 8009a98:	0800a17d 	.word	0x0800a17d
 8009a9c:	0800a17d 	.word	0x0800a17d
 8009aa0:	0800a17d 	.word	0x0800a17d
 8009aa4:	0800a17d 	.word	0x0800a17d
 8009aa8:	0800a17d 	.word	0x0800a17d
 8009aac:	0800a17d 	.word	0x0800a17d
 8009ab0:	0800a17d 	.word	0x0800a17d
 8009ab4:	08009e59 	.word	0x08009e59
 8009ab8:	0800a17d 	.word	0x0800a17d
 8009abc:	0800a17d 	.word	0x0800a17d
 8009ac0:	0800a17d 	.word	0x0800a17d
 8009ac4:	0800a17d 	.word	0x0800a17d
 8009ac8:	0800a17d 	.word	0x0800a17d
 8009acc:	0800a17d 	.word	0x0800a17d
 8009ad0:	0800a17d 	.word	0x0800a17d
 8009ad4:	0800a17d 	.word	0x0800a17d
 8009ad8:	0800a17d 	.word	0x0800a17d
 8009adc:	0800a17d 	.word	0x0800a17d
 8009ae0:	0800a17d 	.word	0x0800a17d
 8009ae4:	0800a17d 	.word	0x0800a17d
 8009ae8:	0800a17d 	.word	0x0800a17d
 8009aec:	0800a17d 	.word	0x0800a17d
 8009af0:	0800a17d 	.word	0x0800a17d
 8009af4:	08009fc9 	.word	0x08009fc9
 8009af8:	0800a17d 	.word	0x0800a17d
 8009afc:	0800a17d 	.word	0x0800a17d
 8009b00:	0800a17d 	.word	0x0800a17d
 8009b04:	0800a17d 	.word	0x0800a17d
 8009b08:	0800a17d 	.word	0x0800a17d
 8009b0c:	0800a17d 	.word	0x0800a17d
 8009b10:	0800a17d 	.word	0x0800a17d
 8009b14:	0800a17d 	.word	0x0800a17d
 8009b18:	0800a17d 	.word	0x0800a17d
 8009b1c:	0800a17d 	.word	0x0800a17d
 8009b20:	0800a17d 	.word	0x0800a17d
 8009b24:	0800a17d 	.word	0x0800a17d
 8009b28:	0800a17d 	.word	0x0800a17d
 8009b2c:	0800a17d 	.word	0x0800a17d
 8009b30:	0800a17d 	.word	0x0800a17d
 8009b34:	0800a17d 	.word	0x0800a17d
 8009b38:	0800a17d 	.word	0x0800a17d
 8009b3c:	0800a17d 	.word	0x0800a17d
 8009b40:	0800a17d 	.word	0x0800a17d
 8009b44:	0800a17d 	.word	0x0800a17d
 8009b48:	0800a17d 	.word	0x0800a17d
 8009b4c:	0800a17d 	.word	0x0800a17d
 8009b50:	0800a17d 	.word	0x0800a17d
 8009b54:	0800a17d 	.word	0x0800a17d
 8009b58:	0800a17d 	.word	0x0800a17d
 8009b5c:	0800a17d 	.word	0x0800a17d
 8009b60:	0800a17d 	.word	0x0800a17d
 8009b64:	0800a17d 	.word	0x0800a17d
 8009b68:	0800a17d 	.word	0x0800a17d
 8009b6c:	0800a17d 	.word	0x0800a17d
 8009b70:	0800a17d 	.word	0x0800a17d
 8009b74:	0800a0bd 	.word	0x0800a0bd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b78:	f7fb f984 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8009b7c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d044      	beq.n	8009c10 <UART_SetConfig+0x1d40>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d03e      	beq.n	8009c0c <UART_SetConfig+0x1d3c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d038      	beq.n	8009c08 <UART_SetConfig+0x1d38>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d032      	beq.n	8009c04 <UART_SetConfig+0x1d34>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d02c      	beq.n	8009c00 <UART_SetConfig+0x1d30>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d026      	beq.n	8009bfc <UART_SetConfig+0x1d2c>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b06      	cmp	r3, #6
 8009bb4:	d020      	beq.n	8009bf8 <UART_SetConfig+0x1d28>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b07      	cmp	r3, #7
 8009bbc:	d01a      	beq.n	8009bf4 <UART_SetConfig+0x1d24>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b08      	cmp	r3, #8
 8009bc4:	d014      	beq.n	8009bf0 <UART_SetConfig+0x1d20>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	d00e      	beq.n	8009bec <UART_SetConfig+0x1d1c>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	2b0a      	cmp	r3, #10
 8009bd4:	d008      	beq.n	8009be8 <UART_SetConfig+0x1d18>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b0b      	cmp	r3, #11
 8009bdc:	d102      	bne.n	8009be4 <UART_SetConfig+0x1d14>
 8009bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be2:	e016      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e014      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009be8:	2380      	movs	r3, #128	; 0x80
 8009bea:	e012      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	e010      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	e00e      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	e00c      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	e00a      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009bfc:	230a      	movs	r3, #10
 8009bfe:	e008      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009c00:	2308      	movs	r3, #8
 8009c02:	e006      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009c04:	2306      	movs	r3, #6
 8009c06:	e004      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009c08:	2304      	movs	r3, #4
 8009c0a:	e002      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e000      	b.n	8009c12 <UART_SetConfig+0x1d42>
 8009c10:	2301      	movs	r3, #1
 8009c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	441a      	add	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c2c:	e2aa      	b.n	800a184 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2e:	f7fb f93f 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8009c32:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d044      	beq.n	8009cc6 <UART_SetConfig+0x1df6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d03e      	beq.n	8009cc2 <UART_SetConfig+0x1df2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d038      	beq.n	8009cbe <UART_SetConfig+0x1dee>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d032      	beq.n	8009cba <UART_SetConfig+0x1dea>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d02c      	beq.n	8009cb6 <UART_SetConfig+0x1de6>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	d026      	beq.n	8009cb2 <UART_SetConfig+0x1de2>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	2b06      	cmp	r3, #6
 8009c6a:	d020      	beq.n	8009cae <UART_SetConfig+0x1dde>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b07      	cmp	r3, #7
 8009c72:	d01a      	beq.n	8009caa <UART_SetConfig+0x1dda>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d014      	beq.n	8009ca6 <UART_SetConfig+0x1dd6>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	2b09      	cmp	r3, #9
 8009c82:	d00e      	beq.n	8009ca2 <UART_SetConfig+0x1dd2>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	2b0a      	cmp	r3, #10
 8009c8a:	d008      	beq.n	8009c9e <UART_SetConfig+0x1dce>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	2b0b      	cmp	r3, #11
 8009c92:	d102      	bne.n	8009c9a <UART_SetConfig+0x1dca>
 8009c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c98:	e016      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e014      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009c9e:	2380      	movs	r3, #128	; 0x80
 8009ca0:	e012      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	e010      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009ca6:	2320      	movs	r3, #32
 8009ca8:	e00e      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009caa:	2310      	movs	r3, #16
 8009cac:	e00c      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	e00a      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	e008      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	e006      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cba:	2306      	movs	r3, #6
 8009cbc:	e004      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cbe:	2304      	movs	r3, #4
 8009cc0:	e002      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e000      	b.n	8009cc8 <UART_SetConfig+0x1df8>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cca:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	441a      	add	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ce2:	e24f      	b.n	800a184 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce4:	f107 0318 	add.w	r3, r7, #24
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fc fa63 	bl	80061b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d044      	beq.n	8009d82 <UART_SetConfig+0x1eb2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d03e      	beq.n	8009d7e <UART_SetConfig+0x1eae>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d038      	beq.n	8009d7a <UART_SetConfig+0x1eaa>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d032      	beq.n	8009d76 <UART_SetConfig+0x1ea6>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d02c      	beq.n	8009d72 <UART_SetConfig+0x1ea2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	2b05      	cmp	r3, #5
 8009d1e:	d026      	beq.n	8009d6e <UART_SetConfig+0x1e9e>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d020      	beq.n	8009d6a <UART_SetConfig+0x1e9a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	2b07      	cmp	r3, #7
 8009d2e:	d01a      	beq.n	8009d66 <UART_SetConfig+0x1e96>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d014      	beq.n	8009d62 <UART_SetConfig+0x1e92>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	2b09      	cmp	r3, #9
 8009d3e:	d00e      	beq.n	8009d5e <UART_SetConfig+0x1e8e>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2b0a      	cmp	r3, #10
 8009d46:	d008      	beq.n	8009d5a <UART_SetConfig+0x1e8a>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	2b0b      	cmp	r3, #11
 8009d4e:	d102      	bne.n	8009d56 <UART_SetConfig+0x1e86>
 8009d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d54:	e016      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e014      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d5a:	2380      	movs	r3, #128	; 0x80
 8009d5c:	e012      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d5e:	2340      	movs	r3, #64	; 0x40
 8009d60:	e010      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d62:	2320      	movs	r3, #32
 8009d64:	e00e      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d66:	2310      	movs	r3, #16
 8009d68:	e00c      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	e00a      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d6e:	230a      	movs	r3, #10
 8009d70:	e008      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d72:	2308      	movs	r3, #8
 8009d74:	e006      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d76:	2306      	movs	r3, #6
 8009d78:	e004      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d7a:	2304      	movs	r3, #4
 8009d7c:	e002      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e000      	b.n	8009d84 <UART_SetConfig+0x1eb4>
 8009d82:	2301      	movs	r3, #1
 8009d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	085b      	lsrs	r3, r3, #1
 8009d8e:	441a      	add	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d9c:	e1f2      	b.n	800a184 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d9e:	f107 030c 	add.w	r3, r7, #12
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fc fb52 	bl	800644c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d044      	beq.n	8009e3c <UART_SetConfig+0x1f6c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d03e      	beq.n	8009e38 <UART_SetConfig+0x1f68>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d038      	beq.n	8009e34 <UART_SetConfig+0x1f64>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d032      	beq.n	8009e30 <UART_SetConfig+0x1f60>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d02c      	beq.n	8009e2c <UART_SetConfig+0x1f5c>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b05      	cmp	r3, #5
 8009dd8:	d026      	beq.n	8009e28 <UART_SetConfig+0x1f58>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	d020      	beq.n	8009e24 <UART_SetConfig+0x1f54>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d01a      	beq.n	8009e20 <UART_SetConfig+0x1f50>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d014      	beq.n	8009e1c <UART_SetConfig+0x1f4c>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d00e      	beq.n	8009e18 <UART_SetConfig+0x1f48>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b0a      	cmp	r3, #10
 8009e00:	d008      	beq.n	8009e14 <UART_SetConfig+0x1f44>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b0b      	cmp	r3, #11
 8009e08:	d102      	bne.n	8009e10 <UART_SetConfig+0x1f40>
 8009e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e0e:	e016      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e014      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e14:	2380      	movs	r3, #128	; 0x80
 8009e16:	e012      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	e010      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e1c:	2320      	movs	r3, #32
 8009e1e:	e00e      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e20:	2310      	movs	r3, #16
 8009e22:	e00c      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e24:	230c      	movs	r3, #12
 8009e26:	e00a      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e28:	230a      	movs	r3, #10
 8009e2a:	e008      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	e006      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e30:	2306      	movs	r3, #6
 8009e32:	e004      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e34:	2304      	movs	r3, #4
 8009e36:	e002      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e000      	b.n	8009e3e <UART_SetConfig+0x1f6e>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	441a      	add	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e56:	e195      	b.n	800a184 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e58:	4b87      	ldr	r3, [pc, #540]	; (800a078 <UART_SetConfig+0x21a8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d05d      	beq.n	8009f20 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e64:	4b84      	ldr	r3, [pc, #528]	; (800a078 <UART_SetConfig+0x21a8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	08db      	lsrs	r3, r3, #3
 8009e6a:	f003 0303 	and.w	r3, r3, #3
 8009e6e:	4a83      	ldr	r2, [pc, #524]	; (800a07c <UART_SetConfig+0x21ac>)
 8009e70:	40da      	lsrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d044      	beq.n	8009f04 <UART_SetConfig+0x2034>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d03e      	beq.n	8009f00 <UART_SetConfig+0x2030>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d038      	beq.n	8009efc <UART_SetConfig+0x202c>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d032      	beq.n	8009ef8 <UART_SetConfig+0x2028>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d02c      	beq.n	8009ef4 <UART_SetConfig+0x2024>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d026      	beq.n	8009ef0 <UART_SetConfig+0x2020>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	2b06      	cmp	r3, #6
 8009ea8:	d020      	beq.n	8009eec <UART_SetConfig+0x201c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	d01a      	beq.n	8009ee8 <UART_SetConfig+0x2018>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d014      	beq.n	8009ee4 <UART_SetConfig+0x2014>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	d00e      	beq.n	8009ee0 <UART_SetConfig+0x2010>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	2b0a      	cmp	r3, #10
 8009ec8:	d008      	beq.n	8009edc <UART_SetConfig+0x200c>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	2b0b      	cmp	r3, #11
 8009ed0:	d102      	bne.n	8009ed8 <UART_SetConfig+0x2008>
 8009ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed6:	e016      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e014      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	e012      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	e010      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	e00e      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	e00c      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009eec:	230c      	movs	r3, #12
 8009eee:	e00a      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ef0:	230a      	movs	r3, #10
 8009ef2:	e008      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	e006      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009ef8:	2306      	movs	r3, #6
 8009efa:	e004      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009efc:	2304      	movs	r3, #4
 8009efe:	e002      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e000      	b.n	8009f06 <UART_SetConfig+0x2036>
 8009f04:	2301      	movs	r3, #1
 8009f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	441a      	add	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009f1e:	e131      	b.n	800a184 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d043      	beq.n	8009fb0 <UART_SetConfig+0x20e0>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d03d      	beq.n	8009fac <UART_SetConfig+0x20dc>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d037      	beq.n	8009fa8 <UART_SetConfig+0x20d8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d031      	beq.n	8009fa4 <UART_SetConfig+0x20d4>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d02b      	beq.n	8009fa0 <UART_SetConfig+0x20d0>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d025      	beq.n	8009f9c <UART_SetConfig+0x20cc>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b06      	cmp	r3, #6
 8009f56:	d01f      	beq.n	8009f98 <UART_SetConfig+0x20c8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	d019      	beq.n	8009f94 <UART_SetConfig+0x20c4>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d013      	beq.n	8009f90 <UART_SetConfig+0x20c0>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	2b09      	cmp	r3, #9
 8009f6e:	d00d      	beq.n	8009f8c <UART_SetConfig+0x20bc>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2b0a      	cmp	r3, #10
 8009f76:	d007      	beq.n	8009f88 <UART_SetConfig+0x20b8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	2b0b      	cmp	r3, #11
 8009f7e:	d101      	bne.n	8009f84 <UART_SetConfig+0x20b4>
 8009f80:	4b3f      	ldr	r3, [pc, #252]	; (800a080 <UART_SetConfig+0x21b0>)
 8009f82:	e016      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f84:	4b3d      	ldr	r3, [pc, #244]	; (800a07c <UART_SetConfig+0x21ac>)
 8009f86:	e014      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f88:	4b3e      	ldr	r3, [pc, #248]	; (800a084 <UART_SetConfig+0x21b4>)
 8009f8a:	e012      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f8c:	4b3e      	ldr	r3, [pc, #248]	; (800a088 <UART_SetConfig+0x21b8>)
 8009f8e:	e010      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f90:	4b3e      	ldr	r3, [pc, #248]	; (800a08c <UART_SetConfig+0x21bc>)
 8009f92:	e00e      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f94:	4b3e      	ldr	r3, [pc, #248]	; (800a090 <UART_SetConfig+0x21c0>)
 8009f96:	e00c      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f98:	4b3e      	ldr	r3, [pc, #248]	; (800a094 <UART_SetConfig+0x21c4>)
 8009f9a:	e00a      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009f9c:	4b3e      	ldr	r3, [pc, #248]	; (800a098 <UART_SetConfig+0x21c8>)
 8009f9e:	e008      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009fa0:	4b3e      	ldr	r3, [pc, #248]	; (800a09c <UART_SetConfig+0x21cc>)
 8009fa2:	e006      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009fa4:	4b3e      	ldr	r3, [pc, #248]	; (800a0a0 <UART_SetConfig+0x21d0>)
 8009fa6:	e004      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009fa8:	4b3e      	ldr	r3, [pc, #248]	; (800a0a4 <UART_SetConfig+0x21d4>)
 8009faa:	e002      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009fac:	4b3e      	ldr	r3, [pc, #248]	; (800a0a8 <UART_SetConfig+0x21d8>)
 8009fae:	e000      	b.n	8009fb2 <UART_SetConfig+0x20e2>
 8009fb0:	4b32      	ldr	r3, [pc, #200]	; (800a07c <UART_SetConfig+0x21ac>)
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6852      	ldr	r2, [r2, #4]
 8009fb6:	0852      	lsrs	r2, r2, #1
 8009fb8:	441a      	add	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fc6:	e0dd      	b.n	800a184 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d046      	beq.n	800a05e <UART_SetConfig+0x218e>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d040      	beq.n	800a05a <UART_SetConfig+0x218a>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d03a      	beq.n	800a056 <UART_SetConfig+0x2186>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d034      	beq.n	800a052 <UART_SetConfig+0x2182>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d02e      	beq.n	800a04e <UART_SetConfig+0x217e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b05      	cmp	r3, #5
 8009ff6:	d028      	beq.n	800a04a <UART_SetConfig+0x217a>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b06      	cmp	r3, #6
 8009ffe:	d022      	beq.n	800a046 <UART_SetConfig+0x2176>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b07      	cmp	r3, #7
 800a006:	d01c      	beq.n	800a042 <UART_SetConfig+0x2172>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d016      	beq.n	800a03e <UART_SetConfig+0x216e>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b09      	cmp	r3, #9
 800a016:	d00f      	beq.n	800a038 <UART_SetConfig+0x2168>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b0a      	cmp	r3, #10
 800a01e:	d008      	beq.n	800a032 <UART_SetConfig+0x2162>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b0b      	cmp	r3, #11
 800a026:	d102      	bne.n	800a02e <UART_SetConfig+0x215e>
 800a028:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a02c:	e018      	b.n	800a060 <UART_SetConfig+0x2190>
 800a02e:	4b18      	ldr	r3, [pc, #96]	; (800a090 <UART_SetConfig+0x21c0>)
 800a030:	e016      	b.n	800a060 <UART_SetConfig+0x2190>
 800a032:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a036:	e013      	b.n	800a060 <UART_SetConfig+0x2190>
 800a038:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a03c:	e010      	b.n	800a060 <UART_SetConfig+0x2190>
 800a03e:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <UART_SetConfig+0x21dc>)
 800a040:	e00e      	b.n	800a060 <UART_SetConfig+0x2190>
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <UART_SetConfig+0x21b0>)
 800a044:	e00c      	b.n	800a060 <UART_SetConfig+0x2190>
 800a046:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <UART_SetConfig+0x21e0>)
 800a048:	e00a      	b.n	800a060 <UART_SetConfig+0x2190>
 800a04a:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <UART_SetConfig+0x21e4>)
 800a04c:	e008      	b.n	800a060 <UART_SetConfig+0x2190>
 800a04e:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <UART_SetConfig+0x21b4>)
 800a050:	e006      	b.n	800a060 <UART_SetConfig+0x2190>
 800a052:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <UART_SetConfig+0x21e8>)
 800a054:	e004      	b.n	800a060 <UART_SetConfig+0x2190>
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <UART_SetConfig+0x21b8>)
 800a058:	e002      	b.n	800a060 <UART_SetConfig+0x2190>
 800a05a:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <UART_SetConfig+0x21bc>)
 800a05c:	e000      	b.n	800a060 <UART_SetConfig+0x2190>
 800a05e:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <UART_SetConfig+0x21c0>)
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6852      	ldr	r2, [r2, #4]
 800a064:	0852      	lsrs	r2, r2, #1
 800a066:	441a      	add	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	b29b      	uxth	r3, r3
 800a072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a074:	e086      	b.n	800a184 <UART_SetConfig+0x22b4>
 800a076:	bf00      	nop
 800a078:	58024400 	.word	0x58024400
 800a07c:	03d09000 	.word	0x03d09000
 800a080:	0003d090 	.word	0x0003d090
 800a084:	0007a120 	.word	0x0007a120
 800a088:	000f4240 	.word	0x000f4240
 800a08c:	001e8480 	.word	0x001e8480
 800a090:	003d0900 	.word	0x003d0900
 800a094:	00516155 	.word	0x00516155
 800a098:	0061a800 	.word	0x0061a800
 800a09c:	007a1200 	.word	0x007a1200
 800a0a0:	00a2c2aa 	.word	0x00a2c2aa
 800a0a4:	00f42400 	.word	0x00f42400
 800a0a8:	01e84800 	.word	0x01e84800
 800a0ac:	0001e848 	.word	0x0001e848
 800a0b0:	00051615 	.word	0x00051615
 800a0b4:	00061a80 	.word	0x00061a80
 800a0b8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d04e      	beq.n	800a162 <UART_SetConfig+0x2292>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d047      	beq.n	800a15c <UART_SetConfig+0x228c>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d040      	beq.n	800a156 <UART_SetConfig+0x2286>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d039      	beq.n	800a150 <UART_SetConfig+0x2280>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d032      	beq.n	800a14a <UART_SetConfig+0x227a>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b05      	cmp	r3, #5
 800a0ea:	d02b      	beq.n	800a144 <UART_SetConfig+0x2274>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	2b06      	cmp	r3, #6
 800a0f2:	d024      	beq.n	800a13e <UART_SetConfig+0x226e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b07      	cmp	r3, #7
 800a0fa:	d01d      	beq.n	800a138 <UART_SetConfig+0x2268>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b08      	cmp	r3, #8
 800a102:	d016      	beq.n	800a132 <UART_SetConfig+0x2262>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d00f      	beq.n	800a12c <UART_SetConfig+0x225c>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b0a      	cmp	r3, #10
 800a112:	d008      	beq.n	800a126 <UART_SetConfig+0x2256>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b0b      	cmp	r3, #11
 800a11a:	d101      	bne.n	800a120 <UART_SetConfig+0x2250>
 800a11c:	2380      	movs	r3, #128	; 0x80
 800a11e:	e022      	b.n	800a166 <UART_SetConfig+0x2296>
 800a120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a124:	e01f      	b.n	800a166 <UART_SetConfig+0x2296>
 800a126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a12a:	e01c      	b.n	800a166 <UART_SetConfig+0x2296>
 800a12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a130:	e019      	b.n	800a166 <UART_SetConfig+0x2296>
 800a132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a136:	e016      	b.n	800a166 <UART_SetConfig+0x2296>
 800a138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a13c:	e013      	b.n	800a166 <UART_SetConfig+0x2296>
 800a13e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a142:	e010      	b.n	800a166 <UART_SetConfig+0x2296>
 800a144:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a148:	e00d      	b.n	800a166 <UART_SetConfig+0x2296>
 800a14a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a14e:	e00a      	b.n	800a166 <UART_SetConfig+0x2296>
 800a150:	f241 5355 	movw	r3, #5461	; 0x1555
 800a154:	e007      	b.n	800a166 <UART_SetConfig+0x2296>
 800a156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a15a:	e004      	b.n	800a166 <UART_SetConfig+0x2296>
 800a15c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a160:	e001      	b.n	800a166 <UART_SetConfig+0x2296>
 800a162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6852      	ldr	r2, [r2, #4]
 800a16a:	0852      	lsrs	r2, r2, #1
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	fbb2 f3f3 	udiv	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a17a:	e003      	b.n	800a184 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d908      	bls.n	800a19c <UART_SetConfig+0x22cc>
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a190:	d204      	bcs.n	800a19c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e002      	b.n	800a1a2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a1be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3740      	adds	r7, #64	; 0x40
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a1cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	f003 0320 	and.w	r3, r3, #32
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01a      	beq.n	800a2e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ca:	d10a      	bne.n	800a2e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00a      	beq.n	800a304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	605a      	str	r2, [r3, #4]
  }
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af02      	add	r7, sp, #8
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a320:	f7f7 fec4 	bl	80020ac <HAL_GetTick>
 800a324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0308 	and.w	r3, r3, #8
 800a330:	2b08      	cmp	r3, #8
 800a332:	d10e      	bne.n	800a352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f82c 	bl	800a3a0 <UART_WaitOnFlagUntilTimeout>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e022      	b.n	800a398 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d10e      	bne.n	800a37e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f816 	bl	800a3a0 <UART_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e00c      	b.n	800a398 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2220      	movs	r2, #32
 800a38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3b0:	e062      	b.n	800a478 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d05e      	beq.n	800a478 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ba:	f7f7 fe77 	bl	80020ac <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d302      	bcc.n	800a3d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11d      	bne.n	800a40c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f022 0201 	bic.w	r2, r2, #1
 800a3ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e045      	b.n	800a498 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0304 	and.w	r3, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	d02e      	beq.n	800a478 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a428:	d126      	bne.n	800a478 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a432:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a442:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0201 	bic.w	r2, r2, #1
 800a452:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e00f      	b.n	800a498 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	69da      	ldr	r2, [r3, #28]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	429a      	cmp	r2, r3
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	429a      	cmp	r2, r3
 800a494:	d08d      	beq.n	800a3b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e027      	b.n	800a506 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2224      	movs	r2, #36	; 0x24
 800a4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0201 	bic.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a522:	2b01      	cmp	r3, #1
 800a524:	d101      	bne.n	800a52a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a526:	2302      	movs	r3, #2
 800a528:	e02d      	b.n	800a586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2224      	movs	r2, #36	; 0x24
 800a536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0201 	bic.w	r2, r2, #1
 800a550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f850 	bl	800a60c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e02d      	b.n	800a602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2224      	movs	r2, #36	; 0x24
 800a5b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0201 	bic.w	r2, r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f812 	bl	800a60c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b089      	sub	sp, #36	; 0x24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a614:	4a2f      	ldr	r2, [pc, #188]	; (800a6d4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a616:	f107 0314 	add.w	r3, r7, #20
 800a61a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a61e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a622:	4a2d      	ldr	r2, [pc, #180]	; (800a6d8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a62c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a634:	2b00      	cmp	r3, #0
 800a636:	d108      	bne.n	800a64a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a648:	e03d      	b.n	800a6c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a64a:	2308      	movs	r3, #8
 800a64c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a64e:	2308      	movs	r3, #8
 800a650:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	0e5b      	lsrs	r3, r3, #25
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	0f5b      	lsrs	r3, r3, #29
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a672:	7fbb      	ldrb	r3, [r7, #30]
 800a674:	7f3a      	ldrb	r2, [r7, #28]
 800a676:	f107 0120 	add.w	r1, r7, #32
 800a67a:	440a      	add	r2, r1
 800a67c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a680:	fb02 f303 	mul.w	r3, r2, r3
 800a684:	7f3a      	ldrb	r2, [r7, #28]
 800a686:	f107 0120 	add.w	r1, r7, #32
 800a68a:	440a      	add	r2, r1
 800a68c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a690:	fb93 f3f2 	sdiv	r3, r3, r2
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a69c:	7ffb      	ldrb	r3, [r7, #31]
 800a69e:	7f7a      	ldrb	r2, [r7, #29]
 800a6a0:	f107 0120 	add.w	r1, r7, #32
 800a6a4:	440a      	add	r2, r1
 800a6a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
 800a6ae:	7f7a      	ldrb	r2, [r7, #29]
 800a6b0:	f107 0120 	add.w	r1, r7, #32
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a6ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6c6:	bf00      	nop
 800a6c8:	3724      	adds	r7, #36	; 0x24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	0800c8d4 	.word	0x0800c8d4
 800a6d8:	0800c8dc 	.word	0x0800c8dc

0800a6dc <__errno>:
 800a6dc:	4b01      	ldr	r3, [pc, #4]	; (800a6e4 <__errno+0x8>)
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	24000010 	.word	0x24000010

0800a6e8 <__libc_init_array>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	4e0d      	ldr	r6, [pc, #52]	; (800a720 <__libc_init_array+0x38>)
 800a6ec:	4c0d      	ldr	r4, [pc, #52]	; (800a724 <__libc_init_array+0x3c>)
 800a6ee:	1ba4      	subs	r4, r4, r6
 800a6f0:	10a4      	asrs	r4, r4, #2
 800a6f2:	2500      	movs	r5, #0
 800a6f4:	42a5      	cmp	r5, r4
 800a6f6:	d109      	bne.n	800a70c <__libc_init_array+0x24>
 800a6f8:	4e0b      	ldr	r6, [pc, #44]	; (800a728 <__libc_init_array+0x40>)
 800a6fa:	4c0c      	ldr	r4, [pc, #48]	; (800a72c <__libc_init_array+0x44>)
 800a6fc:	f002 f8b4 	bl	800c868 <_init>
 800a700:	1ba4      	subs	r4, r4, r6
 800a702:	10a4      	asrs	r4, r4, #2
 800a704:	2500      	movs	r5, #0
 800a706:	42a5      	cmp	r5, r4
 800a708:	d105      	bne.n	800a716 <__libc_init_array+0x2e>
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a710:	4798      	blx	r3
 800a712:	3501      	adds	r5, #1
 800a714:	e7ee      	b.n	800a6f4 <__libc_init_array+0xc>
 800a716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a71a:	4798      	blx	r3
 800a71c:	3501      	adds	r5, #1
 800a71e:	e7f2      	b.n	800a706 <__libc_init_array+0x1e>
 800a720:	0800cb88 	.word	0x0800cb88
 800a724:	0800cb88 	.word	0x0800cb88
 800a728:	0800cb88 	.word	0x0800cb88
 800a72c:	0800cb8c 	.word	0x0800cb8c

0800a730 <memcpy>:
 800a730:	b510      	push	{r4, lr}
 800a732:	1e43      	subs	r3, r0, #1
 800a734:	440a      	add	r2, r1
 800a736:	4291      	cmp	r1, r2
 800a738:	d100      	bne.n	800a73c <memcpy+0xc>
 800a73a:	bd10      	pop	{r4, pc}
 800a73c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a740:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a744:	e7f7      	b.n	800a736 <memcpy+0x6>

0800a746 <memset>:
 800a746:	4402      	add	r2, r0
 800a748:	4603      	mov	r3, r0
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d100      	bne.n	800a750 <memset+0xa>
 800a74e:	4770      	bx	lr
 800a750:	f803 1b01 	strb.w	r1, [r3], #1
 800a754:	e7f9      	b.n	800a74a <memset+0x4>

0800a756 <__cvt>:
 800a756:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a758:	ed2d 8b02 	vpush	{d8}
 800a75c:	eeb0 8b40 	vmov.f64	d8, d0
 800a760:	b085      	sub	sp, #20
 800a762:	4617      	mov	r7, r2
 800a764:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a766:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a768:	ee18 2a90 	vmov	r2, s17
 800a76c:	f025 0520 	bic.w	r5, r5, #32
 800a770:	2a00      	cmp	r2, #0
 800a772:	bfb6      	itet	lt
 800a774:	222d      	movlt	r2, #45	; 0x2d
 800a776:	2200      	movge	r2, #0
 800a778:	eeb1 8b40 	vneglt.f64	d8, d0
 800a77c:	2d46      	cmp	r5, #70	; 0x46
 800a77e:	460c      	mov	r4, r1
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	d004      	beq.n	800a78e <__cvt+0x38>
 800a784:	2d45      	cmp	r5, #69	; 0x45
 800a786:	d100      	bne.n	800a78a <__cvt+0x34>
 800a788:	3401      	adds	r4, #1
 800a78a:	2102      	movs	r1, #2
 800a78c:	e000      	b.n	800a790 <__cvt+0x3a>
 800a78e:	2103      	movs	r1, #3
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	ab02      	add	r3, sp, #8
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	4622      	mov	r2, r4
 800a79a:	4633      	mov	r3, r6
 800a79c:	eeb0 0b48 	vmov.f64	d0, d8
 800a7a0:	f000 fcb2 	bl	800b108 <_dtoa_r>
 800a7a4:	2d47      	cmp	r5, #71	; 0x47
 800a7a6:	d101      	bne.n	800a7ac <__cvt+0x56>
 800a7a8:	07fb      	lsls	r3, r7, #31
 800a7aa:	d51e      	bpl.n	800a7ea <__cvt+0x94>
 800a7ac:	2d46      	cmp	r5, #70	; 0x46
 800a7ae:	eb00 0304 	add.w	r3, r0, r4
 800a7b2:	d10c      	bne.n	800a7ce <__cvt+0x78>
 800a7b4:	7802      	ldrb	r2, [r0, #0]
 800a7b6:	2a30      	cmp	r2, #48	; 0x30
 800a7b8:	d107      	bne.n	800a7ca <__cvt+0x74>
 800a7ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c2:	bf1c      	itt	ne
 800a7c4:	f1c4 0401 	rsbne	r4, r4, #1
 800a7c8:	6034      	strne	r4, [r6, #0]
 800a7ca:	6832      	ldr	r2, [r6, #0]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d6:	d007      	beq.n	800a7e8 <__cvt+0x92>
 800a7d8:	2130      	movs	r1, #48	; 0x30
 800a7da:	9a03      	ldr	r2, [sp, #12]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d204      	bcs.n	800a7ea <__cvt+0x94>
 800a7e0:	1c54      	adds	r4, r2, #1
 800a7e2:	9403      	str	r4, [sp, #12]
 800a7e4:	7011      	strb	r1, [r2, #0]
 800a7e6:	e7f8      	b.n	800a7da <__cvt+0x84>
 800a7e8:	9303      	str	r3, [sp, #12]
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ee:	1a1b      	subs	r3, r3, r0
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	b005      	add	sp, #20
 800a7f4:	ecbd 8b02 	vpop	{d8}
 800a7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7fa <__exponent>:
 800a7fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	bfba      	itte	lt
 800a802:	4249      	neglt	r1, r1
 800a804:	232d      	movlt	r3, #45	; 0x2d
 800a806:	232b      	movge	r3, #43	; 0x2b
 800a808:	2909      	cmp	r1, #9
 800a80a:	f804 2b02 	strb.w	r2, [r4], #2
 800a80e:	7043      	strb	r3, [r0, #1]
 800a810:	dd20      	ble.n	800a854 <__exponent+0x5a>
 800a812:	f10d 0307 	add.w	r3, sp, #7
 800a816:	461f      	mov	r7, r3
 800a818:	260a      	movs	r6, #10
 800a81a:	fb91 f5f6 	sdiv	r5, r1, r6
 800a81e:	fb06 1115 	mls	r1, r6, r5, r1
 800a822:	3130      	adds	r1, #48	; 0x30
 800a824:	2d09      	cmp	r5, #9
 800a826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a82a:	f103 32ff 	add.w	r2, r3, #4294967295
 800a82e:	4629      	mov	r1, r5
 800a830:	dc09      	bgt.n	800a846 <__exponent+0x4c>
 800a832:	3130      	adds	r1, #48	; 0x30
 800a834:	3b02      	subs	r3, #2
 800a836:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a83a:	42bb      	cmp	r3, r7
 800a83c:	4622      	mov	r2, r4
 800a83e:	d304      	bcc.n	800a84a <__exponent+0x50>
 800a840:	1a10      	subs	r0, r2, r0
 800a842:	b003      	add	sp, #12
 800a844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a846:	4613      	mov	r3, r2
 800a848:	e7e7      	b.n	800a81a <__exponent+0x20>
 800a84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84e:	f804 2b01 	strb.w	r2, [r4], #1
 800a852:	e7f2      	b.n	800a83a <__exponent+0x40>
 800a854:	2330      	movs	r3, #48	; 0x30
 800a856:	4419      	add	r1, r3
 800a858:	7083      	strb	r3, [r0, #2]
 800a85a:	1d02      	adds	r2, r0, #4
 800a85c:	70c1      	strb	r1, [r0, #3]
 800a85e:	e7ef      	b.n	800a840 <__exponent+0x46>

0800a860 <_printf_float>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	b08d      	sub	sp, #52	; 0x34
 800a866:	460c      	mov	r4, r1
 800a868:	4616      	mov	r6, r2
 800a86a:	461f      	mov	r7, r3
 800a86c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a870:	4605      	mov	r5, r0
 800a872:	f001 fb0f 	bl	800be94 <_localeconv_r>
 800a876:	f8d0 b000 	ldr.w	fp, [r0]
 800a87a:	4658      	mov	r0, fp
 800a87c:	f7f5 fd2c 	bl	80002d8 <strlen>
 800a880:	2300      	movs	r3, #0
 800a882:	930a      	str	r3, [sp, #40]	; 0x28
 800a884:	f8d8 3000 	ldr.w	r3, [r8]
 800a888:	9005      	str	r0, [sp, #20]
 800a88a:	3307      	adds	r3, #7
 800a88c:	f023 0307 	bic.w	r3, r3, #7
 800a890:	f103 0108 	add.w	r1, r3, #8
 800a894:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a898:	6822      	ldr	r2, [r4, #0]
 800a89a:	f8c8 1000 	str.w	r1, [r8]
 800a89e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a8a6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800ab30 <_printf_float+0x2d0>
 800a8aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a8ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800a8b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ba:	dd24      	ble.n	800a906 <_printf_float+0xa6>
 800a8bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c4:	d502      	bpl.n	800a8cc <_printf_float+0x6c>
 800a8c6:	232d      	movs	r3, #45	; 0x2d
 800a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8cc:	499a      	ldr	r1, [pc, #616]	; (800ab38 <_printf_float+0x2d8>)
 800a8ce:	4b9b      	ldr	r3, [pc, #620]	; (800ab3c <_printf_float+0x2dc>)
 800a8d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a8d4:	bf8c      	ite	hi
 800a8d6:	4688      	movhi	r8, r1
 800a8d8:	4698      	movls	r8, r3
 800a8da:	f022 0204 	bic.w	r2, r2, #4
 800a8de:	2303      	movs	r3, #3
 800a8e0:	6123      	str	r3, [r4, #16]
 800a8e2:	6022      	str	r2, [r4, #0]
 800a8e4:	f04f 0a00 	mov.w	sl, #0
 800a8e8:	9700      	str	r7, [sp, #0]
 800a8ea:	4633      	mov	r3, r6
 800a8ec:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 f9e1 	bl	800acb8 <_printf_common>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f040 8089 	bne.w	800aa0e <_printf_float+0x1ae>
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	b00d      	add	sp, #52	; 0x34
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a906:	eeb4 0b40 	vcmp.f64	d0, d0
 800a90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90e:	d702      	bvc.n	800a916 <_printf_float+0xb6>
 800a910:	498b      	ldr	r1, [pc, #556]	; (800ab40 <_printf_float+0x2e0>)
 800a912:	4b8c      	ldr	r3, [pc, #560]	; (800ab44 <_printf_float+0x2e4>)
 800a914:	e7dc      	b.n	800a8d0 <_printf_float+0x70>
 800a916:	6861      	ldr	r1, [r4, #4]
 800a918:	1c4b      	adds	r3, r1, #1
 800a91a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a91e:	ab0a      	add	r3, sp, #40	; 0x28
 800a920:	a809      	add	r0, sp, #36	; 0x24
 800a922:	d13b      	bne.n	800a99c <_printf_float+0x13c>
 800a924:	2106      	movs	r1, #6
 800a926:	6061      	str	r1, [r4, #4]
 800a928:	f04f 0c00 	mov.w	ip, #0
 800a92c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a930:	e9cd 0900 	strd	r0, r9, [sp]
 800a934:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a938:	6022      	str	r2, [r4, #0]
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7ff ff0a 	bl	800a756 <__cvt>
 800a942:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800a946:	2b47      	cmp	r3, #71	; 0x47
 800a948:	4680      	mov	r8, r0
 800a94a:	d109      	bne.n	800a960 <_printf_float+0x100>
 800a94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94e:	1cd8      	adds	r0, r3, #3
 800a950:	db02      	blt.n	800a958 <_printf_float+0xf8>
 800a952:	6862      	ldr	r2, [r4, #4]
 800a954:	4293      	cmp	r3, r2
 800a956:	dd47      	ble.n	800a9e8 <_printf_float+0x188>
 800a958:	f1a9 0902 	sub.w	r9, r9, #2
 800a95c:	fa5f f989 	uxtb.w	r9, r9
 800a960:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a966:	d824      	bhi.n	800a9b2 <_printf_float+0x152>
 800a968:	3901      	subs	r1, #1
 800a96a:	464a      	mov	r2, r9
 800a96c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a970:	9109      	str	r1, [sp, #36]	; 0x24
 800a972:	f7ff ff42 	bl	800a7fa <__exponent>
 800a976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a978:	1813      	adds	r3, r2, r0
 800a97a:	2a01      	cmp	r2, #1
 800a97c:	4682      	mov	sl, r0
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	dc02      	bgt.n	800a988 <_printf_float+0x128>
 800a982:	6822      	ldr	r2, [r4, #0]
 800a984:	07d1      	lsls	r1, r2, #31
 800a986:	d501      	bpl.n	800a98c <_printf_float+0x12c>
 800a988:	3301      	adds	r3, #1
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0a9      	beq.n	800a8e8 <_printf_float+0x88>
 800a994:	232d      	movs	r3, #45	; 0x2d
 800a996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a99a:	e7a5      	b.n	800a8e8 <_printf_float+0x88>
 800a99c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800a9a0:	f000 8178 	beq.w	800ac94 <_printf_float+0x434>
 800a9a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a9a8:	d1be      	bne.n	800a928 <_printf_float+0xc8>
 800a9aa:	2900      	cmp	r1, #0
 800a9ac:	d1bc      	bne.n	800a928 <_printf_float+0xc8>
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	e7b9      	b.n	800a926 <_printf_float+0xc6>
 800a9b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a9b6:	d119      	bne.n	800a9ec <_printf_float+0x18c>
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	6863      	ldr	r3, [r4, #4]
 800a9bc:	dd0c      	ble.n	800a9d8 <_printf_float+0x178>
 800a9be:	6121      	str	r1, [r4, #16]
 800a9c0:	b913      	cbnz	r3, 800a9c8 <_printf_float+0x168>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	07d2      	lsls	r2, r2, #31
 800a9c6:	d502      	bpl.n	800a9ce <_printf_float+0x16e>
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	440b      	add	r3, r1
 800a9cc:	6123      	str	r3, [r4, #16]
 800a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9d2:	f04f 0a00 	mov.w	sl, #0
 800a9d6:	e7d9      	b.n	800a98c <_printf_float+0x12c>
 800a9d8:	b913      	cbnz	r3, 800a9e0 <_printf_float+0x180>
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	07d0      	lsls	r0, r2, #31
 800a9de:	d501      	bpl.n	800a9e4 <_printf_float+0x184>
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	e7f3      	b.n	800a9cc <_printf_float+0x16c>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e7f1      	b.n	800a9cc <_printf_float+0x16c>
 800a9e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a9ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	db05      	blt.n	800aa00 <_printf_float+0x1a0>
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	07d1      	lsls	r1, r2, #31
 800a9fa:	d5e8      	bpl.n	800a9ce <_printf_float+0x16e>
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	e7e5      	b.n	800a9cc <_printf_float+0x16c>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bfd4      	ite	le
 800aa04:	f1c3 0302 	rsble	r3, r3, #2
 800aa08:	2301      	movgt	r3, #1
 800aa0a:	4413      	add	r3, r2
 800aa0c:	e7de      	b.n	800a9cc <_printf_float+0x16c>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	055a      	lsls	r2, r3, #21
 800aa12:	d407      	bmi.n	800aa24 <_printf_float+0x1c4>
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	4642      	mov	r2, r8
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d12a      	bne.n	800aa78 <_printf_float+0x218>
 800aa22:	e76b      	b.n	800a8fc <_printf_float+0x9c>
 800aa24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aa28:	f240 80de 	bls.w	800abe8 <_printf_float+0x388>
 800aa2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aa30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa38:	d133      	bne.n	800aaa2 <_printf_float+0x242>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	4a42      	ldr	r2, [pc, #264]	; (800ab48 <_printf_float+0x2e8>)
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	f43f af59 	beq.w	800a8fc <_printf_float+0x9c>
 800aa4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	db02      	blt.n	800aa58 <_printf_float+0x1f8>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	07d8      	lsls	r0, r3, #31
 800aa56:	d50f      	bpl.n	800aa78 <_printf_float+0x218>
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	465a      	mov	r2, fp
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	f43f af4a 	beq.w	800a8fc <_printf_float+0x9c>
 800aa68:	f04f 0800 	mov.w	r8, #0
 800aa6c:	f104 091a 	add.w	r9, r4, #26
 800aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa72:	3b01      	subs	r3, #1
 800aa74:	4543      	cmp	r3, r8
 800aa76:	dc09      	bgt.n	800aa8c <_printf_float+0x22c>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	079b      	lsls	r3, r3, #30
 800aa7c:	f100 8105 	bmi.w	800ac8a <_printf_float+0x42a>
 800aa80:	68e0      	ldr	r0, [r4, #12]
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	4298      	cmp	r0, r3
 800aa86:	bfb8      	it	lt
 800aa88:	4618      	movlt	r0, r3
 800aa8a:	e739      	b.n	800a900 <_printf_float+0xa0>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	464a      	mov	r2, r9
 800aa90:	4631      	mov	r1, r6
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	f43f af30 	beq.w	800a8fc <_printf_float+0x9c>
 800aa9c:	f108 0801 	add.w	r8, r8, #1
 800aaa0:	e7e6      	b.n	800aa70 <_printf_float+0x210>
 800aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dc2b      	bgt.n	800ab00 <_printf_float+0x2a0>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	4a27      	ldr	r2, [pc, #156]	; (800ab48 <_printf_float+0x2e8>)
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af22 	beq.w	800a8fc <_printf_float+0x9c>
 800aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaba:	b923      	cbnz	r3, 800aac6 <_printf_float+0x266>
 800aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabe:	b913      	cbnz	r3, 800aac6 <_printf_float+0x266>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	d5d8      	bpl.n	800aa78 <_printf_float+0x218>
 800aac6:	9b05      	ldr	r3, [sp, #20]
 800aac8:	465a      	mov	r2, fp
 800aaca:	4631      	mov	r1, r6
 800aacc:	4628      	mov	r0, r5
 800aace:	47b8      	blx	r7
 800aad0:	3001      	adds	r0, #1
 800aad2:	f43f af13 	beq.w	800a8fc <_printf_float+0x9c>
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	f104 0a1a 	add.w	sl, r4, #26
 800aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae0:	425b      	negs	r3, r3
 800aae2:	454b      	cmp	r3, r9
 800aae4:	dc01      	bgt.n	800aaea <_printf_float+0x28a>
 800aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae8:	e795      	b.n	800aa16 <_printf_float+0x1b6>
 800aaea:	2301      	movs	r3, #1
 800aaec:	4652      	mov	r2, sl
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	f43f af01 	beq.w	800a8fc <_printf_float+0x9c>
 800aafa:	f109 0901 	add.w	r9, r9, #1
 800aafe:	e7ee      	b.n	800aade <_printf_float+0x27e>
 800ab00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab04:	429a      	cmp	r2, r3
 800ab06:	bfa8      	it	ge
 800ab08:	461a      	movge	r2, r3
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	4691      	mov	r9, r2
 800ab0e:	dd07      	ble.n	800ab20 <_printf_float+0x2c0>
 800ab10:	4613      	mov	r3, r2
 800ab12:	4631      	mov	r1, r6
 800ab14:	4642      	mov	r2, r8
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f aeee 	beq.w	800a8fc <_printf_float+0x9c>
 800ab20:	f104 031a 	add.w	r3, r4, #26
 800ab24:	f04f 0a00 	mov.w	sl, #0
 800ab28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	e017      	b.n	800ab60 <_printf_float+0x300>
 800ab30:	ffffffff 	.word	0xffffffff
 800ab34:	7fefffff 	.word	0x7fefffff
 800ab38:	0800c8fc 	.word	0x0800c8fc
 800ab3c:	0800c8f8 	.word	0x0800c8f8
 800ab40:	0800c904 	.word	0x0800c904
 800ab44:	0800c900 	.word	0x0800c900
 800ab48:	0800c908 	.word	0x0800c908
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9a07      	ldr	r2, [sp, #28]
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f aed0 	beq.w	800a8fc <_printf_float+0x9c>
 800ab5c:	f10a 0a01 	add.w	sl, sl, #1
 800ab60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab62:	9306      	str	r3, [sp, #24]
 800ab64:	eba3 0309 	sub.w	r3, r3, r9
 800ab68:	4553      	cmp	r3, sl
 800ab6a:	dcef      	bgt.n	800ab4c <_printf_float+0x2ec>
 800ab6c:	9b06      	ldr	r3, [sp, #24]
 800ab6e:	4498      	add	r8, r3
 800ab70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab74:	429a      	cmp	r2, r3
 800ab76:	db15      	blt.n	800aba4 <_printf_float+0x344>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07da      	lsls	r2, r3, #31
 800ab7c:	d412      	bmi.n	800aba4 <_printf_float+0x344>
 800ab7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab80:	9a06      	ldr	r2, [sp, #24]
 800ab82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab84:	1a9a      	subs	r2, r3, r2
 800ab86:	eba3 0a01 	sub.w	sl, r3, r1
 800ab8a:	4592      	cmp	sl, r2
 800ab8c:	bfa8      	it	ge
 800ab8e:	4692      	movge	sl, r2
 800ab90:	f1ba 0f00 	cmp.w	sl, #0
 800ab94:	dc0e      	bgt.n	800abb4 <_printf_float+0x354>
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab9e:	f104 091a 	add.w	r9, r4, #26
 800aba2:	e019      	b.n	800abd8 <_printf_float+0x378>
 800aba4:	9b05      	ldr	r3, [sp, #20]
 800aba6:	465a      	mov	r2, fp
 800aba8:	4631      	mov	r1, r6
 800abaa:	4628      	mov	r0, r5
 800abac:	47b8      	blx	r7
 800abae:	3001      	adds	r0, #1
 800abb0:	d1e5      	bne.n	800ab7e <_printf_float+0x31e>
 800abb2:	e6a3      	b.n	800a8fc <_printf_float+0x9c>
 800abb4:	4653      	mov	r3, sl
 800abb6:	4642      	mov	r2, r8
 800abb8:	4631      	mov	r1, r6
 800abba:	4628      	mov	r0, r5
 800abbc:	47b8      	blx	r7
 800abbe:	3001      	adds	r0, #1
 800abc0:	d1e9      	bne.n	800ab96 <_printf_float+0x336>
 800abc2:	e69b      	b.n	800a8fc <_printf_float+0x9c>
 800abc4:	2301      	movs	r3, #1
 800abc6:	464a      	mov	r2, r9
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	f43f ae94 	beq.w	800a8fc <_printf_float+0x9c>
 800abd4:	f108 0801 	add.w	r8, r8, #1
 800abd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abdc:	1a9b      	subs	r3, r3, r2
 800abde:	eba3 030a 	sub.w	r3, r3, sl
 800abe2:	4543      	cmp	r3, r8
 800abe4:	dcee      	bgt.n	800abc4 <_printf_float+0x364>
 800abe6:	e747      	b.n	800aa78 <_printf_float+0x218>
 800abe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abea:	2a01      	cmp	r2, #1
 800abec:	dc01      	bgt.n	800abf2 <_printf_float+0x392>
 800abee:	07db      	lsls	r3, r3, #31
 800abf0:	d539      	bpl.n	800ac66 <_printf_float+0x406>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4642      	mov	r2, r8
 800abf6:	4631      	mov	r1, r6
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b8      	blx	r7
 800abfc:	3001      	adds	r0, #1
 800abfe:	f43f ae7d 	beq.w	800a8fc <_printf_float+0x9c>
 800ac02:	9b05      	ldr	r3, [sp, #20]
 800ac04:	465a      	mov	r2, fp
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b8      	blx	r7
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	f108 0801 	add.w	r8, r8, #1
 800ac12:	f43f ae73 	beq.w	800a8fc <_printf_float+0x9c>
 800ac16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ac1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac24:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac28:	d018      	beq.n	800ac5c <_printf_float+0x3fc>
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b8      	blx	r7
 800ac32:	3001      	adds	r0, #1
 800ac34:	d10e      	bne.n	800ac54 <_printf_float+0x3f4>
 800ac36:	e661      	b.n	800a8fc <_printf_float+0x9c>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	464a      	mov	r2, r9
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4628      	mov	r0, r5
 800ac40:	47b8      	blx	r7
 800ac42:	3001      	adds	r0, #1
 800ac44:	f43f ae5a 	beq.w	800a8fc <_printf_float+0x9c>
 800ac48:	f108 0801 	add.w	r8, r8, #1
 800ac4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	4543      	cmp	r3, r8
 800ac52:	dcf1      	bgt.n	800ac38 <_printf_float+0x3d8>
 800ac54:	4653      	mov	r3, sl
 800ac56:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac5a:	e6dd      	b.n	800aa18 <_printf_float+0x1b8>
 800ac5c:	f04f 0800 	mov.w	r8, #0
 800ac60:	f104 091a 	add.w	r9, r4, #26
 800ac64:	e7f2      	b.n	800ac4c <_printf_float+0x3ec>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e7df      	b.n	800ac2a <_printf_float+0x3ca>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	464a      	mov	r2, r9
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f ae41 	beq.w	800a8fc <_printf_float+0x9c>
 800ac7a:	f108 0801 	add.w	r8, r8, #1
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	4543      	cmp	r3, r8
 800ac86:	dcf0      	bgt.n	800ac6a <_printf_float+0x40a>
 800ac88:	e6fa      	b.n	800aa80 <_printf_float+0x220>
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	f104 0919 	add.w	r9, r4, #25
 800ac92:	e7f4      	b.n	800ac7e <_printf_float+0x41e>
 800ac94:	2900      	cmp	r1, #0
 800ac96:	f43f ae8a 	beq.w	800a9ae <_printf_float+0x14e>
 800ac9a:	f04f 0c00 	mov.w	ip, #0
 800ac9e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800aca2:	e9cd 0900 	strd	r0, r9, [sp]
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff fd52 	bl	800a756 <__cvt>
 800acb2:	4680      	mov	r8, r0
 800acb4:	e64a      	b.n	800a94c <_printf_float+0xec>
 800acb6:	bf00      	nop

0800acb8 <_printf_common>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	4691      	mov	r9, r2
 800acbe:	461f      	mov	r7, r3
 800acc0:	688a      	ldr	r2, [r1, #8]
 800acc2:	690b      	ldr	r3, [r1, #16]
 800acc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acc8:	4293      	cmp	r3, r2
 800acca:	bfb8      	it	lt
 800accc:	4613      	movlt	r3, r2
 800acce:	f8c9 3000 	str.w	r3, [r9]
 800acd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acd6:	4606      	mov	r6, r0
 800acd8:	460c      	mov	r4, r1
 800acda:	b112      	cbz	r2, 800ace2 <_printf_common+0x2a>
 800acdc:	3301      	adds	r3, #1
 800acde:	f8c9 3000 	str.w	r3, [r9]
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	0699      	lsls	r1, r3, #26
 800ace6:	bf42      	ittt	mi
 800ace8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800acec:	3302      	addmi	r3, #2
 800acee:	f8c9 3000 	strmi.w	r3, [r9]
 800acf2:	6825      	ldr	r5, [r4, #0]
 800acf4:	f015 0506 	ands.w	r5, r5, #6
 800acf8:	d107      	bne.n	800ad0a <_printf_common+0x52>
 800acfa:	f104 0a19 	add.w	sl, r4, #25
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	f8d9 2000 	ldr.w	r2, [r9]
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	42ab      	cmp	r3, r5
 800ad08:	dc28      	bgt.n	800ad5c <_printf_common+0xa4>
 800ad0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad0e:	6822      	ldr	r2, [r4, #0]
 800ad10:	3300      	adds	r3, #0
 800ad12:	bf18      	it	ne
 800ad14:	2301      	movne	r3, #1
 800ad16:	0692      	lsls	r2, r2, #26
 800ad18:	d42d      	bmi.n	800ad76 <_printf_common+0xbe>
 800ad1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad1e:	4639      	mov	r1, r7
 800ad20:	4630      	mov	r0, r6
 800ad22:	47c0      	blx	r8
 800ad24:	3001      	adds	r0, #1
 800ad26:	d020      	beq.n	800ad6a <_printf_common+0xb2>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	68e5      	ldr	r5, [r4, #12]
 800ad2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad30:	f003 0306 	and.w	r3, r3, #6
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	bf08      	it	eq
 800ad38:	1aad      	subeq	r5, r5, r2
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	6922      	ldr	r2, [r4, #16]
 800ad3e:	bf0c      	ite	eq
 800ad40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad44:	2500      	movne	r5, #0
 800ad46:	4293      	cmp	r3, r2
 800ad48:	bfc4      	itt	gt
 800ad4a:	1a9b      	subgt	r3, r3, r2
 800ad4c:	18ed      	addgt	r5, r5, r3
 800ad4e:	f04f 0900 	mov.w	r9, #0
 800ad52:	341a      	adds	r4, #26
 800ad54:	454d      	cmp	r5, r9
 800ad56:	d11a      	bne.n	800ad8e <_printf_common+0xd6>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e008      	b.n	800ad6e <_printf_common+0xb6>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	4652      	mov	r2, sl
 800ad60:	4639      	mov	r1, r7
 800ad62:	4630      	mov	r0, r6
 800ad64:	47c0      	blx	r8
 800ad66:	3001      	adds	r0, #1
 800ad68:	d103      	bne.n	800ad72 <_printf_common+0xba>
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad72:	3501      	adds	r5, #1
 800ad74:	e7c3      	b.n	800acfe <_printf_common+0x46>
 800ad76:	18e1      	adds	r1, r4, r3
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	2030      	movs	r0, #48	; 0x30
 800ad7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad80:	4422      	add	r2, r4
 800ad82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	e7c5      	b.n	800ad1a <_printf_common+0x62>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	4622      	mov	r2, r4
 800ad92:	4639      	mov	r1, r7
 800ad94:	4630      	mov	r0, r6
 800ad96:	47c0      	blx	r8
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d0e6      	beq.n	800ad6a <_printf_common+0xb2>
 800ad9c:	f109 0901 	add.w	r9, r9, #1
 800ada0:	e7d8      	b.n	800ad54 <_printf_common+0x9c>
	...

0800ada4 <_puts_r>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	460e      	mov	r6, r1
 800ada8:	4605      	mov	r5, r0
 800adaa:	b118      	cbz	r0, 800adb4 <_puts_r+0x10>
 800adac:	6983      	ldr	r3, [r0, #24]
 800adae:	b90b      	cbnz	r3, 800adb4 <_puts_r+0x10>
 800adb0:	f000 ffe6 	bl	800bd80 <__sinit>
 800adb4:	69ab      	ldr	r3, [r5, #24]
 800adb6:	68ac      	ldr	r4, [r5, #8]
 800adb8:	b913      	cbnz	r3, 800adc0 <_puts_r+0x1c>
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 ffe0 	bl	800bd80 <__sinit>
 800adc0:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <_puts_r+0xac>)
 800adc2:	429c      	cmp	r4, r3
 800adc4:	d117      	bne.n	800adf6 <_puts_r+0x52>
 800adc6:	686c      	ldr	r4, [r5, #4]
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	071b      	lsls	r3, r3, #28
 800adcc:	d51d      	bpl.n	800ae0a <_puts_r+0x66>
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	b1db      	cbz	r3, 800ae0a <_puts_r+0x66>
 800add2:	3e01      	subs	r6, #1
 800add4:	68a3      	ldr	r3, [r4, #8]
 800add6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800adda:	3b01      	subs	r3, #1
 800addc:	60a3      	str	r3, [r4, #8]
 800adde:	b9e9      	cbnz	r1, 800ae1c <_puts_r+0x78>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da2e      	bge.n	800ae42 <_puts_r+0x9e>
 800ade4:	4622      	mov	r2, r4
 800ade6:	210a      	movs	r1, #10
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 f83f 	bl	800ae6c <__swbuf_r>
 800adee:	3001      	adds	r0, #1
 800adf0:	d011      	beq.n	800ae16 <_puts_r+0x72>
 800adf2:	200a      	movs	r0, #10
 800adf4:	e011      	b.n	800ae1a <_puts_r+0x76>
 800adf6:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <_puts_r+0xb0>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d101      	bne.n	800ae00 <_puts_r+0x5c>
 800adfc:	68ac      	ldr	r4, [r5, #8]
 800adfe:	e7e3      	b.n	800adc8 <_puts_r+0x24>
 800ae00:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <_puts_r+0xb4>)
 800ae02:	429c      	cmp	r4, r3
 800ae04:	bf08      	it	eq
 800ae06:	68ec      	ldreq	r4, [r5, #12]
 800ae08:	e7de      	b.n	800adc8 <_puts_r+0x24>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 f87f 	bl	800af10 <__swsetup_r>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d0dd      	beq.n	800add2 <_puts_r+0x2e>
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da04      	bge.n	800ae2a <_puts_r+0x86>
 800ae20:	69a2      	ldr	r2, [r4, #24]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	dc06      	bgt.n	800ae34 <_puts_r+0x90>
 800ae26:	290a      	cmp	r1, #10
 800ae28:	d004      	beq.n	800ae34 <_puts_r+0x90>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	6022      	str	r2, [r4, #0]
 800ae30:	7019      	strb	r1, [r3, #0]
 800ae32:	e7cf      	b.n	800add4 <_puts_r+0x30>
 800ae34:	4622      	mov	r2, r4
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 f818 	bl	800ae6c <__swbuf_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d1c9      	bne.n	800add4 <_puts_r+0x30>
 800ae40:	e7e9      	b.n	800ae16 <_puts_r+0x72>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	200a      	movs	r0, #10
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	7018      	strb	r0, [r3, #0]
 800ae4c:	e7e5      	b.n	800ae1a <_puts_r+0x76>
 800ae4e:	bf00      	nop
 800ae50:	0800c938 	.word	0x0800c938
 800ae54:	0800c958 	.word	0x0800c958
 800ae58:	0800c918 	.word	0x0800c918

0800ae5c <puts>:
 800ae5c:	4b02      	ldr	r3, [pc, #8]	; (800ae68 <puts+0xc>)
 800ae5e:	4601      	mov	r1, r0
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f7ff bf9f 	b.w	800ada4 <_puts_r>
 800ae66:	bf00      	nop
 800ae68:	24000010 	.word	0x24000010

0800ae6c <__swbuf_r>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	460e      	mov	r6, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	4605      	mov	r5, r0
 800ae74:	b118      	cbz	r0, 800ae7e <__swbuf_r+0x12>
 800ae76:	6983      	ldr	r3, [r0, #24]
 800ae78:	b90b      	cbnz	r3, 800ae7e <__swbuf_r+0x12>
 800ae7a:	f000 ff81 	bl	800bd80 <__sinit>
 800ae7e:	4b21      	ldr	r3, [pc, #132]	; (800af04 <__swbuf_r+0x98>)
 800ae80:	429c      	cmp	r4, r3
 800ae82:	d12a      	bne.n	800aeda <__swbuf_r+0x6e>
 800ae84:	686c      	ldr	r4, [r5, #4]
 800ae86:	69a3      	ldr	r3, [r4, #24]
 800ae88:	60a3      	str	r3, [r4, #8]
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	071a      	lsls	r2, r3, #28
 800ae8e:	d52e      	bpl.n	800aeee <__swbuf_r+0x82>
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	b363      	cbz	r3, 800aeee <__swbuf_r+0x82>
 800ae94:	6923      	ldr	r3, [r4, #16]
 800ae96:	6820      	ldr	r0, [r4, #0]
 800ae98:	1ac0      	subs	r0, r0, r3
 800ae9a:	6963      	ldr	r3, [r4, #20]
 800ae9c:	b2f6      	uxtb	r6, r6
 800ae9e:	4283      	cmp	r3, r0
 800aea0:	4637      	mov	r7, r6
 800aea2:	dc04      	bgt.n	800aeae <__swbuf_r+0x42>
 800aea4:	4621      	mov	r1, r4
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 ff00 	bl	800bcac <_fflush_r>
 800aeac:	bb28      	cbnz	r0, 800aefa <__swbuf_r+0x8e>
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	60a3      	str	r3, [r4, #8]
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	6022      	str	r2, [r4, #0]
 800aeba:	701e      	strb	r6, [r3, #0]
 800aebc:	6963      	ldr	r3, [r4, #20]
 800aebe:	3001      	adds	r0, #1
 800aec0:	4283      	cmp	r3, r0
 800aec2:	d004      	beq.n	800aece <__swbuf_r+0x62>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	07db      	lsls	r3, r3, #31
 800aec8:	d519      	bpl.n	800aefe <__swbuf_r+0x92>
 800aeca:	2e0a      	cmp	r6, #10
 800aecc:	d117      	bne.n	800aefe <__swbuf_r+0x92>
 800aece:	4621      	mov	r1, r4
 800aed0:	4628      	mov	r0, r5
 800aed2:	f000 feeb 	bl	800bcac <_fflush_r>
 800aed6:	b190      	cbz	r0, 800aefe <__swbuf_r+0x92>
 800aed8:	e00f      	b.n	800aefa <__swbuf_r+0x8e>
 800aeda:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <__swbuf_r+0x9c>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	d101      	bne.n	800aee4 <__swbuf_r+0x78>
 800aee0:	68ac      	ldr	r4, [r5, #8]
 800aee2:	e7d0      	b.n	800ae86 <__swbuf_r+0x1a>
 800aee4:	4b09      	ldr	r3, [pc, #36]	; (800af0c <__swbuf_r+0xa0>)
 800aee6:	429c      	cmp	r4, r3
 800aee8:	bf08      	it	eq
 800aeea:	68ec      	ldreq	r4, [r5, #12]
 800aeec:	e7cb      	b.n	800ae86 <__swbuf_r+0x1a>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f000 f80d 	bl	800af10 <__swsetup_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d0cc      	beq.n	800ae94 <__swbuf_r+0x28>
 800aefa:	f04f 37ff 	mov.w	r7, #4294967295
 800aefe:	4638      	mov	r0, r7
 800af00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af02:	bf00      	nop
 800af04:	0800c938 	.word	0x0800c938
 800af08:	0800c958 	.word	0x0800c958
 800af0c:	0800c918 	.word	0x0800c918

0800af10 <__swsetup_r>:
 800af10:	4b32      	ldr	r3, [pc, #200]	; (800afdc <__swsetup_r+0xcc>)
 800af12:	b570      	push	{r4, r5, r6, lr}
 800af14:	681d      	ldr	r5, [r3, #0]
 800af16:	4606      	mov	r6, r0
 800af18:	460c      	mov	r4, r1
 800af1a:	b125      	cbz	r5, 800af26 <__swsetup_r+0x16>
 800af1c:	69ab      	ldr	r3, [r5, #24]
 800af1e:	b913      	cbnz	r3, 800af26 <__swsetup_r+0x16>
 800af20:	4628      	mov	r0, r5
 800af22:	f000 ff2d 	bl	800bd80 <__sinit>
 800af26:	4b2e      	ldr	r3, [pc, #184]	; (800afe0 <__swsetup_r+0xd0>)
 800af28:	429c      	cmp	r4, r3
 800af2a:	d10f      	bne.n	800af4c <__swsetup_r+0x3c>
 800af2c:	686c      	ldr	r4, [r5, #4]
 800af2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af32:	b29a      	uxth	r2, r3
 800af34:	0715      	lsls	r5, r2, #28
 800af36:	d42c      	bmi.n	800af92 <__swsetup_r+0x82>
 800af38:	06d0      	lsls	r0, r2, #27
 800af3a:	d411      	bmi.n	800af60 <__swsetup_r+0x50>
 800af3c:	2209      	movs	r2, #9
 800af3e:	6032      	str	r2, [r6, #0]
 800af40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	e03e      	b.n	800afca <__swsetup_r+0xba>
 800af4c:	4b25      	ldr	r3, [pc, #148]	; (800afe4 <__swsetup_r+0xd4>)
 800af4e:	429c      	cmp	r4, r3
 800af50:	d101      	bne.n	800af56 <__swsetup_r+0x46>
 800af52:	68ac      	ldr	r4, [r5, #8]
 800af54:	e7eb      	b.n	800af2e <__swsetup_r+0x1e>
 800af56:	4b24      	ldr	r3, [pc, #144]	; (800afe8 <__swsetup_r+0xd8>)
 800af58:	429c      	cmp	r4, r3
 800af5a:	bf08      	it	eq
 800af5c:	68ec      	ldreq	r4, [r5, #12]
 800af5e:	e7e6      	b.n	800af2e <__swsetup_r+0x1e>
 800af60:	0751      	lsls	r1, r2, #29
 800af62:	d512      	bpl.n	800af8a <__swsetup_r+0x7a>
 800af64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af66:	b141      	cbz	r1, 800af7a <__swsetup_r+0x6a>
 800af68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af6c:	4299      	cmp	r1, r3
 800af6e:	d002      	beq.n	800af76 <__swsetup_r+0x66>
 800af70:	4630      	mov	r0, r6
 800af72:	f001 faf3 	bl	800c55c <_free_r>
 800af76:	2300      	movs	r3, #0
 800af78:	6363      	str	r3, [r4, #52]	; 0x34
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	2300      	movs	r3, #0
 800af84:	6063      	str	r3, [r4, #4]
 800af86:	6923      	ldr	r3, [r4, #16]
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f043 0308 	orr.w	r3, r3, #8
 800af90:	81a3      	strh	r3, [r4, #12]
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	b94b      	cbnz	r3, 800afaa <__swsetup_r+0x9a>
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa0:	d003      	beq.n	800afaa <__swsetup_r+0x9a>
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 ffa7 	bl	800bef8 <__smakebuf_r>
 800afaa:	89a2      	ldrh	r2, [r4, #12]
 800afac:	f012 0301 	ands.w	r3, r2, #1
 800afb0:	d00c      	beq.n	800afcc <__swsetup_r+0xbc>
 800afb2:	2300      	movs	r3, #0
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	6963      	ldr	r3, [r4, #20]
 800afb8:	425b      	negs	r3, r3
 800afba:	61a3      	str	r3, [r4, #24]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	b953      	cbnz	r3, 800afd6 <__swsetup_r+0xc6>
 800afc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800afc8:	d1ba      	bne.n	800af40 <__swsetup_r+0x30>
 800afca:	bd70      	pop	{r4, r5, r6, pc}
 800afcc:	0792      	lsls	r2, r2, #30
 800afce:	bf58      	it	pl
 800afd0:	6963      	ldrpl	r3, [r4, #20]
 800afd2:	60a3      	str	r3, [r4, #8]
 800afd4:	e7f2      	b.n	800afbc <__swsetup_r+0xac>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e7f7      	b.n	800afca <__swsetup_r+0xba>
 800afda:	bf00      	nop
 800afdc:	24000010 	.word	0x24000010
 800afe0:	0800c938 	.word	0x0800c938
 800afe4:	0800c958 	.word	0x0800c958
 800afe8:	0800c918 	.word	0x0800c918

0800afec <quorem>:
 800afec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff0:	6903      	ldr	r3, [r0, #16]
 800aff2:	690c      	ldr	r4, [r1, #16]
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	4680      	mov	r8, r0
 800aff8:	f2c0 8082 	blt.w	800b100 <quorem+0x114>
 800affc:	3c01      	subs	r4, #1
 800affe:	f101 0714 	add.w	r7, r1, #20
 800b002:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b006:	f100 0614 	add.w	r6, r0, #20
 800b00a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b00e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b012:	eb06 030c 	add.w	r3, r6, ip
 800b016:	3501      	adds	r5, #1
 800b018:	eb07 090c 	add.w	r9, r7, ip
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	fbb0 f5f5 	udiv	r5, r0, r5
 800b022:	b395      	cbz	r5, 800b08a <quorem+0x9e>
 800b024:	f04f 0a00 	mov.w	sl, #0
 800b028:	4638      	mov	r0, r7
 800b02a:	46b6      	mov	lr, r6
 800b02c:	46d3      	mov	fp, sl
 800b02e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b032:	b293      	uxth	r3, r2
 800b034:	fb05 a303 	mla	r3, r5, r3, sl
 800b038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	ebab 0303 	sub.w	r3, fp, r3
 800b042:	0c12      	lsrs	r2, r2, #16
 800b044:	f8de b000 	ldr.w	fp, [lr]
 800b048:	fb05 a202 	mla	r2, r5, r2, sl
 800b04c:	fa13 f38b 	uxtah	r3, r3, fp
 800b050:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b054:	fa1f fb82 	uxth.w	fp, r2
 800b058:	f8de 2000 	ldr.w	r2, [lr]
 800b05c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b064:	b29b      	uxth	r3, r3
 800b066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b06a:	4581      	cmp	r9, r0
 800b06c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b070:	f84e 3b04 	str.w	r3, [lr], #4
 800b074:	d2db      	bcs.n	800b02e <quorem+0x42>
 800b076:	f856 300c 	ldr.w	r3, [r6, ip]
 800b07a:	b933      	cbnz	r3, 800b08a <quorem+0x9e>
 800b07c:	9b01      	ldr	r3, [sp, #4]
 800b07e:	3b04      	subs	r3, #4
 800b080:	429e      	cmp	r6, r3
 800b082:	461a      	mov	r2, r3
 800b084:	d330      	bcc.n	800b0e8 <quorem+0xfc>
 800b086:	f8c8 4010 	str.w	r4, [r8, #16]
 800b08a:	4640      	mov	r0, r8
 800b08c:	f001 f992 	bl	800c3b4 <__mcmp>
 800b090:	2800      	cmp	r0, #0
 800b092:	db25      	blt.n	800b0e0 <quorem+0xf4>
 800b094:	3501      	adds	r5, #1
 800b096:	4630      	mov	r0, r6
 800b098:	f04f 0c00 	mov.w	ip, #0
 800b09c:	f857 2b04 	ldr.w	r2, [r7], #4
 800b0a0:	f8d0 e000 	ldr.w	lr, [r0]
 800b0a4:	b293      	uxth	r3, r2
 800b0a6:	ebac 0303 	sub.w	r3, ip, r3
 800b0aa:	0c12      	lsrs	r2, r2, #16
 800b0ac:	fa13 f38e 	uxtah	r3, r3, lr
 800b0b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0be:	45b9      	cmp	r9, r7
 800b0c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0c4:	f840 3b04 	str.w	r3, [r0], #4
 800b0c8:	d2e8      	bcs.n	800b09c <quorem+0xb0>
 800b0ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b0ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b0d2:	b92a      	cbnz	r2, 800b0e0 <quorem+0xf4>
 800b0d4:	3b04      	subs	r3, #4
 800b0d6:	429e      	cmp	r6, r3
 800b0d8:	461a      	mov	r2, r3
 800b0da:	d30b      	bcc.n	800b0f4 <quorem+0x108>
 800b0dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	b003      	add	sp, #12
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	6812      	ldr	r2, [r2, #0]
 800b0ea:	3b04      	subs	r3, #4
 800b0ec:	2a00      	cmp	r2, #0
 800b0ee:	d1ca      	bne.n	800b086 <quorem+0x9a>
 800b0f0:	3c01      	subs	r4, #1
 800b0f2:	e7c5      	b.n	800b080 <quorem+0x94>
 800b0f4:	6812      	ldr	r2, [r2, #0]
 800b0f6:	3b04      	subs	r3, #4
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	d1ef      	bne.n	800b0dc <quorem+0xf0>
 800b0fc:	3c01      	subs	r4, #1
 800b0fe:	e7ea      	b.n	800b0d6 <quorem+0xea>
 800b100:	2000      	movs	r0, #0
 800b102:	e7ee      	b.n	800b0e2 <quorem+0xf6>
 800b104:	0000      	movs	r0, r0
	...

0800b108 <_dtoa_r>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	ec57 6b10 	vmov	r6, r7, d0
 800b110:	b095      	sub	sp, #84	; 0x54
 800b112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b114:	9108      	str	r1, [sp, #32]
 800b116:	4604      	mov	r4, r0
 800b118:	920a      	str	r2, [sp, #40]	; 0x28
 800b11a:	9311      	str	r3, [sp, #68]	; 0x44
 800b11c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b120:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b124:	b93d      	cbnz	r5, 800b136 <_dtoa_r+0x2e>
 800b126:	2010      	movs	r0, #16
 800b128:	f000 ff26 	bl	800bf78 <malloc>
 800b12c:	6260      	str	r0, [r4, #36]	; 0x24
 800b12e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b132:	6005      	str	r5, [r0, #0]
 800b134:	60c5      	str	r5, [r0, #12]
 800b136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	b151      	cbz	r1, 800b152 <_dtoa_r+0x4a>
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	604a      	str	r2, [r1, #4]
 800b140:	2301      	movs	r3, #1
 800b142:	4093      	lsls	r3, r2
 800b144:	608b      	str	r3, [r1, #8]
 800b146:	4620      	mov	r0, r4
 800b148:	f000 ff52 	bl	800bff0 <_Bfree>
 800b14c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	1e3b      	subs	r3, r7, #0
 800b154:	bfb9      	ittee	lt
 800b156:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b15a:	9303      	strlt	r3, [sp, #12]
 800b15c:	2300      	movge	r3, #0
 800b15e:	f8c8 3000 	strge.w	r3, [r8]
 800b162:	9d03      	ldr	r5, [sp, #12]
 800b164:	4bac      	ldr	r3, [pc, #688]	; (800b418 <_dtoa_r+0x310>)
 800b166:	bfbc      	itt	lt
 800b168:	2201      	movlt	r2, #1
 800b16a:	f8c8 2000 	strlt.w	r2, [r8]
 800b16e:	43ab      	bics	r3, r5
 800b170:	d11b      	bne.n	800b1aa <_dtoa_r+0xa2>
 800b172:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b174:	f242 730f 	movw	r3, #9999	; 0x270f
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	9b02      	ldr	r3, [sp, #8]
 800b17c:	b923      	cbnz	r3, 800b188 <_dtoa_r+0x80>
 800b17e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b182:	2d00      	cmp	r5, #0
 800b184:	f000 84dd 	beq.w	800bb42 <_dtoa_r+0xa3a>
 800b188:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b18a:	b953      	cbnz	r3, 800b1a2 <_dtoa_r+0x9a>
 800b18c:	4ba3      	ldr	r3, [pc, #652]	; (800b41c <_dtoa_r+0x314>)
 800b18e:	e020      	b.n	800b1d2 <_dtoa_r+0xca>
 800b190:	4ba3      	ldr	r3, [pc, #652]	; (800b420 <_dtoa_r+0x318>)
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	3308      	adds	r3, #8
 800b196:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	9804      	ldr	r0, [sp, #16]
 800b19c:	b015      	add	sp, #84	; 0x54
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a2:	4b9e      	ldr	r3, [pc, #632]	; (800b41c <_dtoa_r+0x314>)
 800b1a4:	9304      	str	r3, [sp, #16]
 800b1a6:	3303      	adds	r3, #3
 800b1a8:	e7f5      	b.n	800b196 <_dtoa_r+0x8e>
 800b1aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b1ba:	d10c      	bne.n	800b1d6 <_dtoa_r+0xce>
 800b1bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1be:	2301      	movs	r3, #1
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 84b9 	beq.w	800bb3c <_dtoa_r+0xa34>
 800b1ca:	4b96      	ldr	r3, [pc, #600]	; (800b424 <_dtoa_r+0x31c>)
 800b1cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	e7e1      	b.n	800b19a <_dtoa_r+0x92>
 800b1d6:	a913      	add	r1, sp, #76	; 0x4c
 800b1d8:	aa12      	add	r2, sp, #72	; 0x48
 800b1da:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 f95f 	bl	800c4a2 <__d2b>
 800b1e4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800b1e8:	9001      	str	r0, [sp, #4]
 800b1ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	d046      	beq.n	800b27e <_dtoa_r+0x176>
 800b1f0:	9805      	ldr	r0, [sp, #20]
 800b1f2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800b1f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1fa:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b1fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b202:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800b206:	2700      	movs	r7, #0
 800b208:	ee07 aa90 	vmov	s15, sl
 800b20c:	ec43 2b16 	vmov	d6, r2, r3
 800b210:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b214:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800b400 <_dtoa_r+0x2f8>
 800b218:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b21c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b220:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800b408 <_dtoa_r+0x300>
 800b224:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b228:	eeb0 7b46 	vmov.f64	d7, d6
 800b22c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800b410 <_dtoa_r+0x308>
 800b230:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b234:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b238:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b240:	ee16 ba90 	vmov	fp, s13
 800b244:	d508      	bpl.n	800b258 <_dtoa_r+0x150>
 800b246:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b24a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b252:	bf18      	it	ne
 800b254:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b258:	f1bb 0f16 	cmp.w	fp, #22
 800b25c:	d834      	bhi.n	800b2c8 <_dtoa_r+0x1c0>
 800b25e:	4b72      	ldr	r3, [pc, #456]	; (800b428 <_dtoa_r+0x320>)
 800b260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b264:	ed93 7b00 	vldr	d7, [r3]
 800b268:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b26c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	dd01      	ble.n	800b27a <_dtoa_r+0x172>
 800b276:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b27a:	2300      	movs	r3, #0
 800b27c:	e025      	b.n	800b2ca <_dtoa_r+0x1c2>
 800b27e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b280:	eb01 0a03 	add.w	sl, r1, r3
 800b284:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800b288:	2b20      	cmp	r3, #32
 800b28a:	dd17      	ble.n	800b2bc <_dtoa_r+0x1b4>
 800b28c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b290:	9a02      	ldr	r2, [sp, #8]
 800b292:	409d      	lsls	r5, r3
 800b294:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800b298:	fa22 f303 	lsr.w	r3, r2, r3
 800b29c:	432b      	orrs	r3, r5
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b2a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2b4:	2701      	movs	r7, #1
 800b2b6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800b2ba:	e7a5      	b.n	800b208 <_dtoa_r+0x100>
 800b2bc:	9a02      	ldr	r2, [sp, #8]
 800b2be:	f1c3 0320 	rsb	r3, r3, #32
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	e7ea      	b.n	800b29e <_dtoa_r+0x196>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	eba1 0a0a 	sub.w	sl, r1, sl
 800b2ce:	9310      	str	r3, [sp, #64]	; 0x40
 800b2d0:	f1ba 0301 	subs.w	r3, sl, #1
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	bf43      	ittte	mi
 800b2d8:	2300      	movmi	r3, #0
 800b2da:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b2de:	9307      	strmi	r3, [sp, #28]
 800b2e0:	f04f 0a00 	movpl.w	sl, #0
 800b2e4:	f1bb 0f00 	cmp.w	fp, #0
 800b2e8:	db19      	blt.n	800b31e <_dtoa_r+0x216>
 800b2ea:	9b07      	ldr	r3, [sp, #28]
 800b2ec:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b2f0:	445b      	add	r3, fp
 800b2f2:	9307      	str	r3, [sp, #28]
 800b2f4:	f04f 0800 	mov.w	r8, #0
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d866      	bhi.n	800b3cc <_dtoa_r+0x2c4>
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	bfc4      	itt	gt
 800b302:	3b04      	subgt	r3, #4
 800b304:	9308      	strgt	r3, [sp, #32]
 800b306:	9b08      	ldr	r3, [sp, #32]
 800b308:	f1a3 0302 	sub.w	r3, r3, #2
 800b30c:	bfcc      	ite	gt
 800b30e:	2500      	movgt	r5, #0
 800b310:	2501      	movle	r5, #1
 800b312:	2b03      	cmp	r3, #3
 800b314:	d866      	bhi.n	800b3e4 <_dtoa_r+0x2dc>
 800b316:	e8df f003 	tbb	[pc, r3]
 800b31a:	5755      	.short	0x5755
 800b31c:	4909      	.short	0x4909
 800b31e:	2300      	movs	r3, #0
 800b320:	ebaa 0a0b 	sub.w	sl, sl, fp
 800b324:	f1cb 0800 	rsb	r8, fp, #0
 800b328:	930b      	str	r3, [sp, #44]	; 0x2c
 800b32a:	e7e5      	b.n	800b2f8 <_dtoa_r+0x1f0>
 800b32c:	2301      	movs	r3, #1
 800b32e:	9309      	str	r3, [sp, #36]	; 0x24
 800b330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b332:	2b00      	cmp	r3, #0
 800b334:	dd59      	ble.n	800b3ea <_dtoa_r+0x2e2>
 800b336:	9306      	str	r3, [sp, #24]
 800b338:	4699      	mov	r9, r3
 800b33a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b33c:	2200      	movs	r2, #0
 800b33e:	6072      	str	r2, [r6, #4]
 800b340:	2204      	movs	r2, #4
 800b342:	f102 0014 	add.w	r0, r2, #20
 800b346:	4298      	cmp	r0, r3
 800b348:	6871      	ldr	r1, [r6, #4]
 800b34a:	d953      	bls.n	800b3f4 <_dtoa_r+0x2ec>
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 fe1b 	bl	800bf88 <_Balloc>
 800b352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b354:	6030      	str	r0, [r6, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	f1b9 0f0e 	cmp.w	r9, #14
 800b35e:	f200 80c2 	bhi.w	800b4e6 <_dtoa_r+0x3de>
 800b362:	2d00      	cmp	r5, #0
 800b364:	f000 80bf 	beq.w	800b4e6 <_dtoa_r+0x3de>
 800b368:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b36c:	f1bb 0f00 	cmp.w	fp, #0
 800b370:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b374:	f340 80e6 	ble.w	800b544 <_dtoa_r+0x43c>
 800b378:	4a2b      	ldr	r2, [pc, #172]	; (800b428 <_dtoa_r+0x320>)
 800b37a:	f00b 030f 	and.w	r3, fp, #15
 800b37e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b382:	ed93 7b00 	vldr	d7, [r3]
 800b386:	ea4f 132b 	mov.w	r3, fp, asr #4
 800b38a:	06da      	lsls	r2, r3, #27
 800b38c:	f140 80d8 	bpl.w	800b540 <_dtoa_r+0x438>
 800b390:	4a26      	ldr	r2, [pc, #152]	; (800b42c <_dtoa_r+0x324>)
 800b392:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800b396:	ed92 6b08 	vldr	d6, [r2, #32]
 800b39a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b39e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	2203      	movs	r2, #3
 800b3a8:	4920      	ldr	r1, [pc, #128]	; (800b42c <_dtoa_r+0x324>)
 800b3aa:	e04a      	b.n	800b442 <_dtoa_r+0x33a>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b2:	445b      	add	r3, fp
 800b3b4:	f103 0901 	add.w	r9, r3, #1
 800b3b8:	9306      	str	r3, [sp, #24]
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	bfb8      	it	lt
 800b3c0:	2301      	movlt	r3, #1
 800b3c2:	e7ba      	b.n	800b33a <_dtoa_r+0x232>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e7b2      	b.n	800b32e <_dtoa_r+0x226>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e7f0      	b.n	800b3ae <_dtoa_r+0x2a6>
 800b3cc:	2501      	movs	r5, #1
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800b3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d8:	9306      	str	r3, [sp, #24]
 800b3da:	4699      	mov	r9, r3
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2312      	movs	r3, #18
 800b3e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b3e2:	e7aa      	b.n	800b33a <_dtoa_r+0x232>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e8:	e7f4      	b.n	800b3d4 <_dtoa_r+0x2cc>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	9306      	str	r3, [sp, #24]
 800b3ee:	4699      	mov	r9, r3
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	e7f5      	b.n	800b3e0 <_dtoa_r+0x2d8>
 800b3f4:	3101      	adds	r1, #1
 800b3f6:	6071      	str	r1, [r6, #4]
 800b3f8:	0052      	lsls	r2, r2, #1
 800b3fa:	e7a2      	b.n	800b342 <_dtoa_r+0x23a>
 800b3fc:	f3af 8000 	nop.w
 800b400:	636f4361 	.word	0x636f4361
 800b404:	3fd287a7 	.word	0x3fd287a7
 800b408:	8b60c8b3 	.word	0x8b60c8b3
 800b40c:	3fc68a28 	.word	0x3fc68a28
 800b410:	509f79fb 	.word	0x509f79fb
 800b414:	3fd34413 	.word	0x3fd34413
 800b418:	7ff00000 	.word	0x7ff00000
 800b41c:	0800c913 	.word	0x0800c913
 800b420:	0800c90a 	.word	0x0800c90a
 800b424:	0800c909 	.word	0x0800c909
 800b428:	0800c9a0 	.word	0x0800c9a0
 800b42c:	0800c978 	.word	0x0800c978
 800b430:	07de      	lsls	r6, r3, #31
 800b432:	d504      	bpl.n	800b43e <_dtoa_r+0x336>
 800b434:	ed91 6b00 	vldr	d6, [r1]
 800b438:	3201      	adds	r2, #1
 800b43a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b43e:	105b      	asrs	r3, r3, #1
 800b440:	3108      	adds	r1, #8
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1f4      	bne.n	800b430 <_dtoa_r+0x328>
 800b446:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b44a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b44e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 80a7 	beq.w	800b5a8 <_dtoa_r+0x4a0>
 800b45a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b45e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46a:	f140 809d 	bpl.w	800b5a8 <_dtoa_r+0x4a0>
 800b46e:	f1b9 0f00 	cmp.w	r9, #0
 800b472:	f000 8099 	beq.w	800b5a8 <_dtoa_r+0x4a0>
 800b476:	9b06      	ldr	r3, [sp, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dd30      	ble.n	800b4de <_dtoa_r+0x3d6>
 800b47c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b480:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b484:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b488:	9d06      	ldr	r5, [sp, #24]
 800b48a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b48e:	3201      	adds	r2, #1
 800b490:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b494:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b498:	ee07 2a90 	vmov	s15, r2
 800b49c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b4a0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b4a4:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b4a8:	9a03      	ldr	r2, [sp, #12]
 800b4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ae:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	d17b      	bne.n	800b5ae <_dtoa_r+0x4a6>
 800b4b6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b4ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b4be:	ec41 0b17 	vmov	d7, r0, r1
 800b4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	f300 8253 	bgt.w	800b974 <_dtoa_r+0x86c>
 800b4ce:	eeb1 7b47 	vneg.f64	d7, d7
 800b4d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4da:	f100 8249 	bmi.w	800b970 <_dtoa_r+0x868>
 800b4de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b4e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f2c0 8119 	blt.w	800b720 <_dtoa_r+0x618>
 800b4ee:	f1bb 0f0e 	cmp.w	fp, #14
 800b4f2:	f300 8115 	bgt.w	800b720 <_dtoa_r+0x618>
 800b4f6:	4bc3      	ldr	r3, [pc, #780]	; (800b804 <_dtoa_r+0x6fc>)
 800b4f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4fc:	ed93 6b00 	vldr	d6, [r3]
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	f280 80ba 	bge.w	800b67c <_dtoa_r+0x574>
 800b508:	f1b9 0f00 	cmp.w	r9, #0
 800b50c:	f300 80b6 	bgt.w	800b67c <_dtoa_r+0x574>
 800b510:	f040 822d 	bne.w	800b96e <_dtoa_r+0x866>
 800b514:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b518:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b51c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b520:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b528:	464d      	mov	r5, r9
 800b52a:	464f      	mov	r7, r9
 800b52c:	f280 8204 	bge.w	800b938 <_dtoa_r+0x830>
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	9a04      	ldr	r2, [sp, #16]
 800b534:	1c5e      	adds	r6, r3, #1
 800b536:	2331      	movs	r3, #49	; 0x31
 800b538:	7013      	strb	r3, [r2, #0]
 800b53a:	f10b 0b01 	add.w	fp, fp, #1
 800b53e:	e1ff      	b.n	800b940 <_dtoa_r+0x838>
 800b540:	2202      	movs	r2, #2
 800b542:	e731      	b.n	800b3a8 <_dtoa_r+0x2a0>
 800b544:	d02e      	beq.n	800b5a4 <_dtoa_r+0x49c>
 800b546:	f1cb 0300 	rsb	r3, fp, #0
 800b54a:	4aae      	ldr	r2, [pc, #696]	; (800b804 <_dtoa_r+0x6fc>)
 800b54c:	f003 010f 	and.w	r1, r3, #15
 800b550:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b554:	ed92 7b00 	vldr	d7, [r2]
 800b558:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800b55c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b560:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b564:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800b568:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b56c:	49a6      	ldr	r1, [pc, #664]	; (800b808 <_dtoa_r+0x700>)
 800b56e:	111b      	asrs	r3, r3, #4
 800b570:	2000      	movs	r0, #0
 800b572:	2202      	movs	r2, #2
 800b574:	b93b      	cbnz	r3, 800b586 <_dtoa_r+0x47e>
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f af6b 	beq.w	800b452 <_dtoa_r+0x34a>
 800b57c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b584:	e765      	b.n	800b452 <_dtoa_r+0x34a>
 800b586:	07dd      	lsls	r5, r3, #31
 800b588:	d509      	bpl.n	800b59e <_dtoa_r+0x496>
 800b58a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b58e:	ed91 7b00 	vldr	d7, [r1]
 800b592:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b596:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b59a:	3201      	adds	r2, #1
 800b59c:	2001      	movs	r0, #1
 800b59e:	105b      	asrs	r3, r3, #1
 800b5a0:	3108      	adds	r1, #8
 800b5a2:	e7e7      	b.n	800b574 <_dtoa_r+0x46c>
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	e754      	b.n	800b452 <_dtoa_r+0x34a>
 800b5a8:	465b      	mov	r3, fp
 800b5aa:	464d      	mov	r5, r9
 800b5ac:	e770      	b.n	800b490 <_dtoa_r+0x388>
 800b5ae:	4a95      	ldr	r2, [pc, #596]	; (800b804 <_dtoa_r+0x6fc>)
 800b5b0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800b5b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ba:	ec41 0b17 	vmov	d7, r0, r1
 800b5be:	b35a      	cbz	r2, 800b618 <_dtoa_r+0x510>
 800b5c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b5c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b5c8:	9e04      	ldr	r6, [sp, #16]
 800b5ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b5ce:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5da:	ee14 2a90 	vmov	r2, s9
 800b5de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5e2:	3230      	adds	r2, #48	; 0x30
 800b5e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f0:	f806 2b01 	strb.w	r2, [r6], #1
 800b5f4:	d43b      	bmi.n	800b66e <_dtoa_r+0x566>
 800b5f6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b5fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b602:	d472      	bmi.n	800b6ea <_dtoa_r+0x5e2>
 800b604:	9a04      	ldr	r2, [sp, #16]
 800b606:	1ab2      	subs	r2, r6, r2
 800b608:	4295      	cmp	r5, r2
 800b60a:	f77f af68 	ble.w	800b4de <_dtoa_r+0x3d6>
 800b60e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b612:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b616:	e7de      	b.n	800b5d6 <_dtoa_r+0x4ce>
 800b618:	9a04      	ldr	r2, [sp, #16]
 800b61a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b61e:	1956      	adds	r6, r2, r5
 800b620:	4611      	mov	r1, r2
 800b622:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b626:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b62a:	ee14 2a90 	vmov	r2, s9
 800b62e:	3230      	adds	r2, #48	; 0x30
 800b630:	f801 2b01 	strb.w	r2, [r1], #1
 800b634:	42b1      	cmp	r1, r6
 800b636:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b63a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b63e:	d11a      	bne.n	800b676 <_dtoa_r+0x56e>
 800b640:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b644:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b648:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	dc4b      	bgt.n	800b6ea <_dtoa_r+0x5e2>
 800b652:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65e:	f57f af3e 	bpl.w	800b4de <_dtoa_r+0x3d6>
 800b662:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b666:	2a30      	cmp	r2, #48	; 0x30
 800b668:	f106 31ff 	add.w	r1, r6, #4294967295
 800b66c:	d001      	beq.n	800b672 <_dtoa_r+0x56a>
 800b66e:	469b      	mov	fp, r3
 800b670:	e02a      	b.n	800b6c8 <_dtoa_r+0x5c0>
 800b672:	460e      	mov	r6, r1
 800b674:	e7f5      	b.n	800b662 <_dtoa_r+0x55a>
 800b676:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b67a:	e7d4      	b.n	800b626 <_dtoa_r+0x51e>
 800b67c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b680:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b684:	9e04      	ldr	r6, [sp, #16]
 800b686:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b68a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b68e:	ee15 3a10 	vmov	r3, s10
 800b692:	3330      	adds	r3, #48	; 0x30
 800b694:	f806 3b01 	strb.w	r3, [r6], #1
 800b698:	9b04      	ldr	r3, [sp, #16]
 800b69a:	1af3      	subs	r3, r6, r3
 800b69c:	4599      	cmp	r9, r3
 800b69e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b6a2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b6a6:	d133      	bne.n	800b710 <_dtoa_r+0x608>
 800b6a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b6ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b4:	dc18      	bgt.n	800b6e8 <_dtoa_r+0x5e0>
 800b6b6:	eeb4 7b46 	vcmp.f64	d7, d6
 800b6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6be:	d103      	bne.n	800b6c8 <_dtoa_r+0x5c0>
 800b6c0:	ee15 3a10 	vmov	r3, s10
 800b6c4:	07db      	lsls	r3, r3, #31
 800b6c6:	d40f      	bmi.n	800b6e8 <_dtoa_r+0x5e0>
 800b6c8:	9901      	ldr	r1, [sp, #4]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fc90 	bl	800bff0 <_Bfree>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6d4:	7033      	strb	r3, [r6, #0]
 800b6d6:	f10b 0301 	add.w	r3, fp, #1
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f43f ad5b 	beq.w	800b19a <_dtoa_r+0x92>
 800b6e4:	601e      	str	r6, [r3, #0]
 800b6e6:	e558      	b.n	800b19a <_dtoa_r+0x92>
 800b6e8:	465b      	mov	r3, fp
 800b6ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6ee:	2939      	cmp	r1, #57	; 0x39
 800b6f0:	f106 32ff 	add.w	r2, r6, #4294967295
 800b6f4:	d106      	bne.n	800b704 <_dtoa_r+0x5fc>
 800b6f6:	9904      	ldr	r1, [sp, #16]
 800b6f8:	4291      	cmp	r1, r2
 800b6fa:	d107      	bne.n	800b70c <_dtoa_r+0x604>
 800b6fc:	2230      	movs	r2, #48	; 0x30
 800b6fe:	700a      	strb	r2, [r1, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	460a      	mov	r2, r1
 800b704:	7811      	ldrb	r1, [r2, #0]
 800b706:	3101      	adds	r1, #1
 800b708:	7011      	strb	r1, [r2, #0]
 800b70a:	e7b0      	b.n	800b66e <_dtoa_r+0x566>
 800b70c:	4616      	mov	r6, r2
 800b70e:	e7ec      	b.n	800b6ea <_dtoa_r+0x5e2>
 800b710:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71c:	d1b3      	bne.n	800b686 <_dtoa_r+0x57e>
 800b71e:	e7d3      	b.n	800b6c8 <_dtoa_r+0x5c0>
 800b720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b722:	2a00      	cmp	r2, #0
 800b724:	f000 808d 	beq.w	800b842 <_dtoa_r+0x73a>
 800b728:	9a08      	ldr	r2, [sp, #32]
 800b72a:	2a01      	cmp	r2, #1
 800b72c:	dc72      	bgt.n	800b814 <_dtoa_r+0x70c>
 800b72e:	2f00      	cmp	r7, #0
 800b730:	d06c      	beq.n	800b80c <_dtoa_r+0x704>
 800b732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b736:	4645      	mov	r5, r8
 800b738:	4656      	mov	r6, sl
 800b73a:	9a07      	ldr	r2, [sp, #28]
 800b73c:	2101      	movs	r1, #1
 800b73e:	441a      	add	r2, r3
 800b740:	4620      	mov	r0, r4
 800b742:	449a      	add	sl, r3
 800b744:	9207      	str	r2, [sp, #28]
 800b746:	f000 fcf3 	bl	800c130 <__i2b>
 800b74a:	4607      	mov	r7, r0
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	dd0b      	ble.n	800b768 <_dtoa_r+0x660>
 800b750:	9b07      	ldr	r3, [sp, #28]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dd08      	ble.n	800b768 <_dtoa_r+0x660>
 800b756:	42b3      	cmp	r3, r6
 800b758:	9a07      	ldr	r2, [sp, #28]
 800b75a:	bfa8      	it	ge
 800b75c:	4633      	movge	r3, r6
 800b75e:	ebaa 0a03 	sub.w	sl, sl, r3
 800b762:	1af6      	subs	r6, r6, r3
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	9307      	str	r3, [sp, #28]
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d01d      	beq.n	800b7aa <_dtoa_r+0x6a2>
 800b76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b770:	2b00      	cmp	r3, #0
 800b772:	d06a      	beq.n	800b84a <_dtoa_r+0x742>
 800b774:	b18d      	cbz	r5, 800b79a <_dtoa_r+0x692>
 800b776:	4639      	mov	r1, r7
 800b778:	462a      	mov	r2, r5
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fd78 	bl	800c270 <__pow5mult>
 800b780:	9a01      	ldr	r2, [sp, #4]
 800b782:	4601      	mov	r1, r0
 800b784:	4607      	mov	r7, r0
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fcdb 	bl	800c142 <__multiply>
 800b78c:	9901      	ldr	r1, [sp, #4]
 800b78e:	900c      	str	r0, [sp, #48]	; 0x30
 800b790:	4620      	mov	r0, r4
 800b792:	f000 fc2d 	bl	800bff0 <_Bfree>
 800b796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	ebb8 0205 	subs.w	r2, r8, r5
 800b79e:	d004      	beq.n	800b7aa <_dtoa_r+0x6a2>
 800b7a0:	9901      	ldr	r1, [sp, #4]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fd64 	bl	800c270 <__pow5mult>
 800b7a8:	9001      	str	r0, [sp, #4]
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fcbf 	bl	800c130 <__i2b>
 800b7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 81ca 	beq.w	800bb50 <_dtoa_r+0xa48>
 800b7bc:	461a      	mov	r2, r3
 800b7be:	4601      	mov	r1, r0
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fd55 	bl	800c270 <__pow5mult>
 800b7c6:	9b08      	ldr	r3, [sp, #32]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	dc44      	bgt.n	800b858 <_dtoa_r+0x750>
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d13c      	bne.n	800b84e <_dtoa_r+0x746>
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d137      	bne.n	800b84e <_dtoa_r+0x746>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7e4:	0d1b      	lsrs	r3, r3, #20
 800b7e6:	051b      	lsls	r3, r3, #20
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d033      	beq.n	800b854 <_dtoa_r+0x74c>
 800b7ec:	9b07      	ldr	r3, [sp, #28]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	f10a 0a01 	add.w	sl, sl, #1
 800b7f4:	9307      	str	r3, [sp, #28]
 800b7f6:	f04f 0801 	mov.w	r8, #1
 800b7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fc:	bb73      	cbnz	r3, 800b85c <_dtoa_r+0x754>
 800b7fe:	2001      	movs	r0, #1
 800b800:	e034      	b.n	800b86c <_dtoa_r+0x764>
 800b802:	bf00      	nop
 800b804:	0800c9a0 	.word	0x0800c9a0
 800b808:	0800c978 	.word	0x0800c978
 800b80c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b812:	e790      	b.n	800b736 <_dtoa_r+0x62e>
 800b814:	f109 35ff 	add.w	r5, r9, #4294967295
 800b818:	45a8      	cmp	r8, r5
 800b81a:	bfbf      	itttt	lt
 800b81c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b81e:	eba5 0808 	sublt.w	r8, r5, r8
 800b822:	4443      	addlt	r3, r8
 800b824:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b826:	bfb6      	itet	lt
 800b828:	46a8      	movlt	r8, r5
 800b82a:	eba8 0505 	subge.w	r5, r8, r5
 800b82e:	2500      	movlt	r5, #0
 800b830:	f1b9 0f00 	cmp.w	r9, #0
 800b834:	bfb9      	ittee	lt
 800b836:	ebaa 0609 	sublt.w	r6, sl, r9
 800b83a:	2300      	movlt	r3, #0
 800b83c:	4656      	movge	r6, sl
 800b83e:	464b      	movge	r3, r9
 800b840:	e77b      	b.n	800b73a <_dtoa_r+0x632>
 800b842:	4645      	mov	r5, r8
 800b844:	4656      	mov	r6, sl
 800b846:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b848:	e780      	b.n	800b74c <_dtoa_r+0x644>
 800b84a:	4642      	mov	r2, r8
 800b84c:	e7a8      	b.n	800b7a0 <_dtoa_r+0x698>
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	e7d2      	b.n	800b7fa <_dtoa_r+0x6f2>
 800b854:	4698      	mov	r8, r3
 800b856:	e7d0      	b.n	800b7fa <_dtoa_r+0x6f2>
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	692b      	ldr	r3, [r5, #16]
 800b85e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b862:	6918      	ldr	r0, [r3, #16]
 800b864:	f000 fc16 	bl	800c094 <__hi0bits>
 800b868:	f1c0 0020 	rsb	r0, r0, #32
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	4418      	add	r0, r3
 800b870:	f010 001f 	ands.w	r0, r0, #31
 800b874:	d047      	beq.n	800b906 <_dtoa_r+0x7fe>
 800b876:	f1c0 0320 	rsb	r3, r0, #32
 800b87a:	2b04      	cmp	r3, #4
 800b87c:	dd3b      	ble.n	800b8f6 <_dtoa_r+0x7ee>
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	f1c0 001c 	rsb	r0, r0, #28
 800b884:	4482      	add	sl, r0
 800b886:	4406      	add	r6, r0
 800b888:	4403      	add	r3, r0
 800b88a:	9307      	str	r3, [sp, #28]
 800b88c:	f1ba 0f00 	cmp.w	sl, #0
 800b890:	dd05      	ble.n	800b89e <_dtoa_r+0x796>
 800b892:	4652      	mov	r2, sl
 800b894:	9901      	ldr	r1, [sp, #4]
 800b896:	4620      	mov	r0, r4
 800b898:	f000 fd38 	bl	800c30c <__lshift>
 800b89c:	9001      	str	r0, [sp, #4]
 800b89e:	9b07      	ldr	r3, [sp, #28]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dd05      	ble.n	800b8b0 <_dtoa_r+0x7a8>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 fd2f 	bl	800c30c <__lshift>
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8b2:	b353      	cbz	r3, 800b90a <_dtoa_r+0x802>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	9801      	ldr	r0, [sp, #4]
 800b8b8:	f000 fd7c 	bl	800c3b4 <__mcmp>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	da24      	bge.n	800b90a <_dtoa_r+0x802>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	9901      	ldr	r1, [sp, #4]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fba9 	bl	800c01e <__multadd>
 800b8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ce:	9001      	str	r0, [sp, #4]
 800b8d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8142 	beq.w	800bb5e <_dtoa_r+0xa56>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4639      	mov	r1, r7
 800b8de:	220a      	movs	r2, #10
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 fb9c 	bl	800c01e <__multadd>
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	dc4b      	bgt.n	800b986 <_dtoa_r+0x87e>
 800b8ee:	9b08      	ldr	r3, [sp, #32]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	dd48      	ble.n	800b986 <_dtoa_r+0x87e>
 800b8f4:	e011      	b.n	800b91a <_dtoa_r+0x812>
 800b8f6:	d0c9      	beq.n	800b88c <_dtoa_r+0x784>
 800b8f8:	9a07      	ldr	r2, [sp, #28]
 800b8fa:	331c      	adds	r3, #28
 800b8fc:	441a      	add	r2, r3
 800b8fe:	449a      	add	sl, r3
 800b900:	441e      	add	r6, r3
 800b902:	4613      	mov	r3, r2
 800b904:	e7c1      	b.n	800b88a <_dtoa_r+0x782>
 800b906:	4603      	mov	r3, r0
 800b908:	e7f6      	b.n	800b8f8 <_dtoa_r+0x7f0>
 800b90a:	f1b9 0f00 	cmp.w	r9, #0
 800b90e:	dc34      	bgt.n	800b97a <_dtoa_r+0x872>
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	2b02      	cmp	r3, #2
 800b914:	dd31      	ble.n	800b97a <_dtoa_r+0x872>
 800b916:	f8cd 9018 	str.w	r9, [sp, #24]
 800b91a:	9b06      	ldr	r3, [sp, #24]
 800b91c:	b963      	cbnz	r3, 800b938 <_dtoa_r+0x830>
 800b91e:	4629      	mov	r1, r5
 800b920:	2205      	movs	r2, #5
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fb7b 	bl	800c01e <__multadd>
 800b928:	4601      	mov	r1, r0
 800b92a:	4605      	mov	r5, r0
 800b92c:	9801      	ldr	r0, [sp, #4]
 800b92e:	f000 fd41 	bl	800c3b4 <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	f73f adfc 	bgt.w	800b530 <_dtoa_r+0x428>
 800b938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b93a:	9e04      	ldr	r6, [sp, #16]
 800b93c:	ea6f 0b03 	mvn.w	fp, r3
 800b940:	f04f 0900 	mov.w	r9, #0
 800b944:	4629      	mov	r1, r5
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fb52 	bl	800bff0 <_Bfree>
 800b94c:	2f00      	cmp	r7, #0
 800b94e:	f43f aebb 	beq.w	800b6c8 <_dtoa_r+0x5c0>
 800b952:	f1b9 0f00 	cmp.w	r9, #0
 800b956:	d005      	beq.n	800b964 <_dtoa_r+0x85c>
 800b958:	45b9      	cmp	r9, r7
 800b95a:	d003      	beq.n	800b964 <_dtoa_r+0x85c>
 800b95c:	4649      	mov	r1, r9
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fb46 	bl	800bff0 <_Bfree>
 800b964:	4639      	mov	r1, r7
 800b966:	4620      	mov	r0, r4
 800b968:	f000 fb42 	bl	800bff0 <_Bfree>
 800b96c:	e6ac      	b.n	800b6c8 <_dtoa_r+0x5c0>
 800b96e:	2500      	movs	r5, #0
 800b970:	462f      	mov	r7, r5
 800b972:	e7e1      	b.n	800b938 <_dtoa_r+0x830>
 800b974:	469b      	mov	fp, r3
 800b976:	462f      	mov	r7, r5
 800b978:	e5da      	b.n	800b530 <_dtoa_r+0x428>
 800b97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97c:	f8cd 9018 	str.w	r9, [sp, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 80f3 	beq.w	800bb6c <_dtoa_r+0xa64>
 800b986:	2e00      	cmp	r6, #0
 800b988:	dd05      	ble.n	800b996 <_dtoa_r+0x88e>
 800b98a:	4639      	mov	r1, r7
 800b98c:	4632      	mov	r2, r6
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 fcbc 	bl	800c30c <__lshift>
 800b994:	4607      	mov	r7, r0
 800b996:	f1b8 0f00 	cmp.w	r8, #0
 800b99a:	d04c      	beq.n	800ba36 <_dtoa_r+0x92e>
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 faf2 	bl	800bf88 <_Balloc>
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	3202      	adds	r2, #2
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	0092      	lsls	r2, r2, #2
 800b9ac:	f107 010c 	add.w	r1, r7, #12
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f7fe febd 	bl	800a730 <memcpy>
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fca6 	bl	800c30c <__lshift>
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	46b9      	mov	r9, r7
 800b9cc:	9307      	str	r3, [sp, #28]
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	9801      	ldr	r0, [sp, #4]
 800b9d4:	f7ff fb0a 	bl	800afec <quorem>
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4606      	mov	r6, r0
 800b9dc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b9e0:	9801      	ldr	r0, [sp, #4]
 800b9e2:	f000 fce7 	bl	800c3b4 <__mcmp>
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	9002      	str	r0, [sp, #8]
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 fcfb 	bl	800c3e8 <__mdiff>
 800b9f2:	68c3      	ldr	r3, [r0, #12]
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	bb03      	cbnz	r3, 800ba3a <_dtoa_r+0x932>
 800b9f8:	4601      	mov	r1, r0
 800b9fa:	9009      	str	r0, [sp, #36]	; 0x24
 800b9fc:	9801      	ldr	r0, [sp, #4]
 800b9fe:	f000 fcd9 	bl	800c3b4 <__mcmp>
 800ba02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba04:	4603      	mov	r3, r0
 800ba06:	4611      	mov	r1, r2
 800ba08:	4620      	mov	r0, r4
 800ba0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0c:	f000 faf0 	bl	800bff0 <_Bfree>
 800ba10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba12:	b9a3      	cbnz	r3, 800ba3e <_dtoa_r+0x936>
 800ba14:	9a08      	ldr	r2, [sp, #32]
 800ba16:	b992      	cbnz	r2, 800ba3e <_dtoa_r+0x936>
 800ba18:	9a07      	ldr	r2, [sp, #28]
 800ba1a:	b982      	cbnz	r2, 800ba3e <_dtoa_r+0x936>
 800ba1c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba20:	d029      	beq.n	800ba76 <_dtoa_r+0x96e>
 800ba22:	9b02      	ldr	r3, [sp, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd01      	ble.n	800ba2c <_dtoa_r+0x924>
 800ba28:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ba2c:	f10a 0601 	add.w	r6, sl, #1
 800ba30:	f88a 8000 	strb.w	r8, [sl]
 800ba34:	e786      	b.n	800b944 <_dtoa_r+0x83c>
 800ba36:	4638      	mov	r0, r7
 800ba38:	e7c2      	b.n	800b9c0 <_dtoa_r+0x8b8>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e7e3      	b.n	800ba06 <_dtoa_r+0x8fe>
 800ba3e:	9a02      	ldr	r2, [sp, #8]
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	db04      	blt.n	800ba4e <_dtoa_r+0x946>
 800ba44:	d124      	bne.n	800ba90 <_dtoa_r+0x988>
 800ba46:	9a08      	ldr	r2, [sp, #32]
 800ba48:	bb12      	cbnz	r2, 800ba90 <_dtoa_r+0x988>
 800ba4a:	9a07      	ldr	r2, [sp, #28]
 800ba4c:	bb02      	cbnz	r2, 800ba90 <_dtoa_r+0x988>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	ddec      	ble.n	800ba2c <_dtoa_r+0x924>
 800ba52:	2201      	movs	r2, #1
 800ba54:	9901      	ldr	r1, [sp, #4]
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 fc58 	bl	800c30c <__lshift>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	9001      	str	r0, [sp, #4]
 800ba60:	f000 fca8 	bl	800c3b4 <__mcmp>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	dc03      	bgt.n	800ba70 <_dtoa_r+0x968>
 800ba68:	d1e0      	bne.n	800ba2c <_dtoa_r+0x924>
 800ba6a:	f018 0f01 	tst.w	r8, #1
 800ba6e:	d0dd      	beq.n	800ba2c <_dtoa_r+0x924>
 800ba70:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba74:	d1d8      	bne.n	800ba28 <_dtoa_r+0x920>
 800ba76:	2339      	movs	r3, #57	; 0x39
 800ba78:	f10a 0601 	add.w	r6, sl, #1
 800ba7c:	f88a 3000 	strb.w	r3, [sl]
 800ba80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba84:	2b39      	cmp	r3, #57	; 0x39
 800ba86:	f106 32ff 	add.w	r2, r6, #4294967295
 800ba8a:	d04c      	beq.n	800bb26 <_dtoa_r+0xa1e>
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	e051      	b.n	800bb34 <_dtoa_r+0xa2c>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f10a 0601 	add.w	r6, sl, #1
 800ba96:	dd05      	ble.n	800baa4 <_dtoa_r+0x99c>
 800ba98:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba9c:	d0eb      	beq.n	800ba76 <_dtoa_r+0x96e>
 800ba9e:	f108 0801 	add.w	r8, r8, #1
 800baa2:	e7c5      	b.n	800ba30 <_dtoa_r+0x928>
 800baa4:	9b04      	ldr	r3, [sp, #16]
 800baa6:	9a06      	ldr	r2, [sp, #24]
 800baa8:	f806 8c01 	strb.w	r8, [r6, #-1]
 800baac:	1af3      	subs	r3, r6, r3
 800baae:	4293      	cmp	r3, r2
 800bab0:	d021      	beq.n	800baf6 <_dtoa_r+0x9ee>
 800bab2:	2300      	movs	r3, #0
 800bab4:	220a      	movs	r2, #10
 800bab6:	9901      	ldr	r1, [sp, #4]
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 fab0 	bl	800c01e <__multadd>
 800babe:	45b9      	cmp	r9, r7
 800bac0:	9001      	str	r0, [sp, #4]
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	f04f 020a 	mov.w	r2, #10
 800baca:	4649      	mov	r1, r9
 800bacc:	4620      	mov	r0, r4
 800bace:	d105      	bne.n	800badc <_dtoa_r+0x9d4>
 800bad0:	f000 faa5 	bl	800c01e <__multadd>
 800bad4:	4681      	mov	r9, r0
 800bad6:	4607      	mov	r7, r0
 800bad8:	46b2      	mov	sl, r6
 800bada:	e779      	b.n	800b9d0 <_dtoa_r+0x8c8>
 800badc:	f000 fa9f 	bl	800c01e <__multadd>
 800bae0:	4639      	mov	r1, r7
 800bae2:	4681      	mov	r9, r0
 800bae4:	2300      	movs	r3, #0
 800bae6:	220a      	movs	r2, #10
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fa98 	bl	800c01e <__multadd>
 800baee:	4607      	mov	r7, r0
 800baf0:	e7f2      	b.n	800bad8 <_dtoa_r+0x9d0>
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	2201      	movs	r2, #1
 800baf8:	9901      	ldr	r1, [sp, #4]
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 fc06 	bl	800c30c <__lshift>
 800bb00:	4629      	mov	r1, r5
 800bb02:	9001      	str	r0, [sp, #4]
 800bb04:	f000 fc56 	bl	800c3b4 <__mcmp>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dcb9      	bgt.n	800ba80 <_dtoa_r+0x978>
 800bb0c:	d102      	bne.n	800bb14 <_dtoa_r+0xa0c>
 800bb0e:	f018 0f01 	tst.w	r8, #1
 800bb12:	d1b5      	bne.n	800ba80 <_dtoa_r+0x978>
 800bb14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb18:	2b30      	cmp	r3, #48	; 0x30
 800bb1a:	f106 32ff 	add.w	r2, r6, #4294967295
 800bb1e:	f47f af11 	bne.w	800b944 <_dtoa_r+0x83c>
 800bb22:	4616      	mov	r6, r2
 800bb24:	e7f6      	b.n	800bb14 <_dtoa_r+0xa0c>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d105      	bne.n	800bb38 <_dtoa_r+0xa30>
 800bb2c:	9a04      	ldr	r2, [sp, #16]
 800bb2e:	f10b 0b01 	add.w	fp, fp, #1
 800bb32:	2331      	movs	r3, #49	; 0x31
 800bb34:	7013      	strb	r3, [r2, #0]
 800bb36:	e705      	b.n	800b944 <_dtoa_r+0x83c>
 800bb38:	4616      	mov	r6, r2
 800bb3a:	e7a1      	b.n	800ba80 <_dtoa_r+0x978>
 800bb3c:	4b16      	ldr	r3, [pc, #88]	; (800bb98 <_dtoa_r+0xa90>)
 800bb3e:	f7ff bb48 	b.w	800b1d2 <_dtoa_r+0xca>
 800bb42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f47f ab23 	bne.w	800b190 <_dtoa_r+0x88>
 800bb4a:	4b14      	ldr	r3, [pc, #80]	; (800bb9c <_dtoa_r+0xa94>)
 800bb4c:	f7ff bb41 	b.w	800b1d2 <_dtoa_r+0xca>
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	f77f ae3b 	ble.w	800b7ce <_dtoa_r+0x6c6>
 800bb58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800bb5c:	e64f      	b.n	800b7fe <_dtoa_r+0x6f6>
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dc03      	bgt.n	800bb6c <_dtoa_r+0xa64>
 800bb64:	9b08      	ldr	r3, [sp, #32]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	f73f aed7 	bgt.w	800b91a <_dtoa_r+0x812>
 800bb6c:	9e04      	ldr	r6, [sp, #16]
 800bb6e:	9801      	ldr	r0, [sp, #4]
 800bb70:	4629      	mov	r1, r5
 800bb72:	f7ff fa3b 	bl	800afec <quorem>
 800bb76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb7a:	f806 8b01 	strb.w	r8, [r6], #1
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	9a06      	ldr	r2, [sp, #24]
 800bb82:	1af3      	subs	r3, r6, r3
 800bb84:	429a      	cmp	r2, r3
 800bb86:	ddb4      	ble.n	800baf2 <_dtoa_r+0x9ea>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	220a      	movs	r2, #10
 800bb8c:	9901      	ldr	r1, [sp, #4]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 fa45 	bl	800c01e <__multadd>
 800bb94:	9001      	str	r0, [sp, #4]
 800bb96:	e7ea      	b.n	800bb6e <_dtoa_r+0xa66>
 800bb98:	0800c908 	.word	0x0800c908
 800bb9c:	0800c90a 	.word	0x0800c90a

0800bba0 <__sflush_r>:
 800bba0:	898a      	ldrh	r2, [r1, #12]
 800bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	4605      	mov	r5, r0
 800bba8:	0710      	lsls	r0, r2, #28
 800bbaa:	460c      	mov	r4, r1
 800bbac:	d458      	bmi.n	800bc60 <__sflush_r+0xc0>
 800bbae:	684b      	ldr	r3, [r1, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dc05      	bgt.n	800bbc0 <__sflush_r+0x20>
 800bbb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dc02      	bgt.n	800bbc0 <__sflush_r+0x20>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbc2:	2e00      	cmp	r6, #0
 800bbc4:	d0f9      	beq.n	800bbba <__sflush_r+0x1a>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbcc:	682f      	ldr	r7, [r5, #0]
 800bbce:	6a21      	ldr	r1, [r4, #32]
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	d032      	beq.n	800bc3a <__sflush_r+0x9a>
 800bbd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	075a      	lsls	r2, r3, #29
 800bbda:	d505      	bpl.n	800bbe8 <__sflush_r+0x48>
 800bbdc:	6863      	ldr	r3, [r4, #4]
 800bbde:	1ac0      	subs	r0, r0, r3
 800bbe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbe2:	b10b      	cbz	r3, 800bbe8 <__sflush_r+0x48>
 800bbe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe6:	1ac0      	subs	r0, r0, r3
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4602      	mov	r2, r0
 800bbec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbee:	6a21      	ldr	r1, [r4, #32]
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b0      	blx	r6
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	d106      	bne.n	800bc08 <__sflush_r+0x68>
 800bbfa:	6829      	ldr	r1, [r5, #0]
 800bbfc:	291d      	cmp	r1, #29
 800bbfe:	d848      	bhi.n	800bc92 <__sflush_r+0xf2>
 800bc00:	4a29      	ldr	r2, [pc, #164]	; (800bca8 <__sflush_r+0x108>)
 800bc02:	40ca      	lsrs	r2, r1
 800bc04:	07d6      	lsls	r6, r2, #31
 800bc06:	d544      	bpl.n	800bc92 <__sflush_r+0xf2>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	6062      	str	r2, [r4, #4]
 800bc0c:	04d9      	lsls	r1, r3, #19
 800bc0e:	6922      	ldr	r2, [r4, #16]
 800bc10:	6022      	str	r2, [r4, #0]
 800bc12:	d504      	bpl.n	800bc1e <__sflush_r+0x7e>
 800bc14:	1c42      	adds	r2, r0, #1
 800bc16:	d101      	bne.n	800bc1c <__sflush_r+0x7c>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b903      	cbnz	r3, 800bc1e <__sflush_r+0x7e>
 800bc1c:	6560      	str	r0, [r4, #84]	; 0x54
 800bc1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc20:	602f      	str	r7, [r5, #0]
 800bc22:	2900      	cmp	r1, #0
 800bc24:	d0c9      	beq.n	800bbba <__sflush_r+0x1a>
 800bc26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc2a:	4299      	cmp	r1, r3
 800bc2c:	d002      	beq.n	800bc34 <__sflush_r+0x94>
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 fc94 	bl	800c55c <_free_r>
 800bc34:	2000      	movs	r0, #0
 800bc36:	6360      	str	r0, [r4, #52]	; 0x34
 800bc38:	e7c0      	b.n	800bbbc <__sflush_r+0x1c>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	47b0      	blx	r6
 800bc40:	1c41      	adds	r1, r0, #1
 800bc42:	d1c8      	bne.n	800bbd6 <__sflush_r+0x36>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0c5      	beq.n	800bbd6 <__sflush_r+0x36>
 800bc4a:	2b1d      	cmp	r3, #29
 800bc4c:	d001      	beq.n	800bc52 <__sflush_r+0xb2>
 800bc4e:	2b16      	cmp	r3, #22
 800bc50:	d101      	bne.n	800bc56 <__sflush_r+0xb6>
 800bc52:	602f      	str	r7, [r5, #0]
 800bc54:	e7b1      	b.n	800bbba <__sflush_r+0x1a>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	e7ad      	b.n	800bbbc <__sflush_r+0x1c>
 800bc60:	690f      	ldr	r7, [r1, #16]
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d0a9      	beq.n	800bbba <__sflush_r+0x1a>
 800bc66:	0793      	lsls	r3, r2, #30
 800bc68:	680e      	ldr	r6, [r1, #0]
 800bc6a:	bf08      	it	eq
 800bc6c:	694b      	ldreq	r3, [r1, #20]
 800bc6e:	600f      	str	r7, [r1, #0]
 800bc70:	bf18      	it	ne
 800bc72:	2300      	movne	r3, #0
 800bc74:	eba6 0807 	sub.w	r8, r6, r7
 800bc78:	608b      	str	r3, [r1, #8]
 800bc7a:	f1b8 0f00 	cmp.w	r8, #0
 800bc7e:	dd9c      	ble.n	800bbba <__sflush_r+0x1a>
 800bc80:	4643      	mov	r3, r8
 800bc82:	463a      	mov	r2, r7
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc88:	4628      	mov	r0, r5
 800bc8a:	47b0      	blx	r6
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	dc06      	bgt.n	800bc9e <__sflush_r+0xfe>
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9c:	e78e      	b.n	800bbbc <__sflush_r+0x1c>
 800bc9e:	4407      	add	r7, r0
 800bca0:	eba8 0800 	sub.w	r8, r8, r0
 800bca4:	e7e9      	b.n	800bc7a <__sflush_r+0xda>
 800bca6:	bf00      	nop
 800bca8:	20400001 	.word	0x20400001

0800bcac <_fflush_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	690b      	ldr	r3, [r1, #16]
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	b1db      	cbz	r3, 800bcee <_fflush_r+0x42>
 800bcb6:	b118      	cbz	r0, 800bcc0 <_fflush_r+0x14>
 800bcb8:	6983      	ldr	r3, [r0, #24]
 800bcba:	b90b      	cbnz	r3, 800bcc0 <_fflush_r+0x14>
 800bcbc:	f000 f860 	bl	800bd80 <__sinit>
 800bcc0:	4b0c      	ldr	r3, [pc, #48]	; (800bcf4 <_fflush_r+0x48>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d109      	bne.n	800bcda <_fflush_r+0x2e>
 800bcc6:	686c      	ldr	r4, [r5, #4]
 800bcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bccc:	b17b      	cbz	r3, 800bcee <_fflush_r+0x42>
 800bcce:	4621      	mov	r1, r4
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcd6:	f7ff bf63 	b.w	800bba0 <__sflush_r>
 800bcda:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <_fflush_r+0x4c>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d101      	bne.n	800bce4 <_fflush_r+0x38>
 800bce0:	68ac      	ldr	r4, [r5, #8]
 800bce2:	e7f1      	b.n	800bcc8 <_fflush_r+0x1c>
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <_fflush_r+0x50>)
 800bce6:	429c      	cmp	r4, r3
 800bce8:	bf08      	it	eq
 800bcea:	68ec      	ldreq	r4, [r5, #12]
 800bcec:	e7ec      	b.n	800bcc8 <_fflush_r+0x1c>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0800c938 	.word	0x0800c938
 800bcf8:	0800c958 	.word	0x0800c958
 800bcfc:	0800c918 	.word	0x0800c918

0800bd00 <std>:
 800bd00:	2300      	movs	r3, #0
 800bd02:	b510      	push	{r4, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	e9c0 3300 	strd	r3, r3, [r0]
 800bd0a:	6083      	str	r3, [r0, #8]
 800bd0c:	8181      	strh	r1, [r0, #12]
 800bd0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd10:	81c2      	strh	r2, [r0, #14]
 800bd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd16:	6183      	str	r3, [r0, #24]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	305c      	adds	r0, #92	; 0x5c
 800bd1e:	f7fe fd12 	bl	800a746 <memset>
 800bd22:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <std+0x38>)
 800bd24:	6263      	str	r3, [r4, #36]	; 0x24
 800bd26:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <std+0x3c>)
 800bd28:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd2a:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <std+0x40>)
 800bd2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd2e:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <std+0x44>)
 800bd30:	6224      	str	r4, [r4, #32]
 800bd32:	6323      	str	r3, [r4, #48]	; 0x30
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	bf00      	nop
 800bd38:	0800c6cd 	.word	0x0800c6cd
 800bd3c:	0800c6ef 	.word	0x0800c6ef
 800bd40:	0800c727 	.word	0x0800c727
 800bd44:	0800c74b 	.word	0x0800c74b

0800bd48 <_cleanup_r>:
 800bd48:	4901      	ldr	r1, [pc, #4]	; (800bd50 <_cleanup_r+0x8>)
 800bd4a:	f000 b885 	b.w	800be58 <_fwalk_reent>
 800bd4e:	bf00      	nop
 800bd50:	0800bcad 	.word	0x0800bcad

0800bd54 <__sfmoreglue>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	1e4a      	subs	r2, r1, #1
 800bd58:	2568      	movs	r5, #104	; 0x68
 800bd5a:	4355      	muls	r5, r2
 800bd5c:	460e      	mov	r6, r1
 800bd5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd62:	f000 fc49 	bl	800c5f8 <_malloc_r>
 800bd66:	4604      	mov	r4, r0
 800bd68:	b140      	cbz	r0, 800bd7c <__sfmoreglue+0x28>
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd70:	300c      	adds	r0, #12
 800bd72:	60a0      	str	r0, [r4, #8]
 800bd74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd78:	f7fe fce5 	bl	800a746 <memset>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}

0800bd80 <__sinit>:
 800bd80:	6983      	ldr	r3, [r0, #24]
 800bd82:	b510      	push	{r4, lr}
 800bd84:	4604      	mov	r4, r0
 800bd86:	bb33      	cbnz	r3, 800bdd6 <__sinit+0x56>
 800bd88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bd8c:	6503      	str	r3, [r0, #80]	; 0x50
 800bd8e:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <__sinit+0x58>)
 800bd90:	4a12      	ldr	r2, [pc, #72]	; (800bddc <__sinit+0x5c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6282      	str	r2, [r0, #40]	; 0x28
 800bd96:	4298      	cmp	r0, r3
 800bd98:	bf04      	itt	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	6183      	streq	r3, [r0, #24]
 800bd9e:	f000 f81f 	bl	800bde0 <__sfp>
 800bda2:	6060      	str	r0, [r4, #4]
 800bda4:	4620      	mov	r0, r4
 800bda6:	f000 f81b 	bl	800bde0 <__sfp>
 800bdaa:	60a0      	str	r0, [r4, #8]
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 f817 	bl	800bde0 <__sfp>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	60e0      	str	r0, [r4, #12]
 800bdb6:	2104      	movs	r1, #4
 800bdb8:	6860      	ldr	r0, [r4, #4]
 800bdba:	f7ff ffa1 	bl	800bd00 <std>
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	2109      	movs	r1, #9
 800bdc2:	68a0      	ldr	r0, [r4, #8]
 800bdc4:	f7ff ff9c 	bl	800bd00 <std>
 800bdc8:	2202      	movs	r2, #2
 800bdca:	2112      	movs	r1, #18
 800bdcc:	68e0      	ldr	r0, [r4, #12]
 800bdce:	f7ff ff97 	bl	800bd00 <std>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	61a3      	str	r3, [r4, #24]
 800bdd6:	bd10      	pop	{r4, pc}
 800bdd8:	0800c8f4 	.word	0x0800c8f4
 800bddc:	0800bd49 	.word	0x0800bd49

0800bde0 <__sfp>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	4b1b      	ldr	r3, [pc, #108]	; (800be50 <__sfp+0x70>)
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	69b3      	ldr	r3, [r6, #24]
 800bde8:	4607      	mov	r7, r0
 800bdea:	b913      	cbnz	r3, 800bdf2 <__sfp+0x12>
 800bdec:	4630      	mov	r0, r6
 800bdee:	f7ff ffc7 	bl	800bd80 <__sinit>
 800bdf2:	3648      	adds	r6, #72	; 0x48
 800bdf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	d503      	bpl.n	800be04 <__sfp+0x24>
 800bdfc:	6833      	ldr	r3, [r6, #0]
 800bdfe:	b133      	cbz	r3, 800be0e <__sfp+0x2e>
 800be00:	6836      	ldr	r6, [r6, #0]
 800be02:	e7f7      	b.n	800bdf4 <__sfp+0x14>
 800be04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be08:	b16d      	cbz	r5, 800be26 <__sfp+0x46>
 800be0a:	3468      	adds	r4, #104	; 0x68
 800be0c:	e7f4      	b.n	800bdf8 <__sfp+0x18>
 800be0e:	2104      	movs	r1, #4
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ff9f 	bl	800bd54 <__sfmoreglue>
 800be16:	6030      	str	r0, [r6, #0]
 800be18:	2800      	cmp	r0, #0
 800be1a:	d1f1      	bne.n	800be00 <__sfp+0x20>
 800be1c:	230c      	movs	r3, #12
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	4604      	mov	r4, r0
 800be22:	4620      	mov	r0, r4
 800be24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <__sfp+0x74>)
 800be28:	6665      	str	r5, [r4, #100]	; 0x64
 800be2a:	e9c4 5500 	strd	r5, r5, [r4]
 800be2e:	60a5      	str	r5, [r4, #8]
 800be30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800be34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800be38:	2208      	movs	r2, #8
 800be3a:	4629      	mov	r1, r5
 800be3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be40:	f7fe fc81 	bl	800a746 <memset>
 800be44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be4c:	e7e9      	b.n	800be22 <__sfp+0x42>
 800be4e:	bf00      	nop
 800be50:	0800c8f4 	.word	0x0800c8f4
 800be54:	ffff0001 	.word	0xffff0001

0800be58 <_fwalk_reent>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be64:	2600      	movs	r6, #0
 800be66:	b914      	cbnz	r4, 800be6e <_fwalk_reent+0x16>
 800be68:	4630      	mov	r0, r6
 800be6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800be72:	3f01      	subs	r7, #1
 800be74:	d501      	bpl.n	800be7a <_fwalk_reent+0x22>
 800be76:	6824      	ldr	r4, [r4, #0]
 800be78:	e7f5      	b.n	800be66 <_fwalk_reent+0xe>
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d907      	bls.n	800be90 <_fwalk_reent+0x38>
 800be80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be84:	3301      	adds	r3, #1
 800be86:	d003      	beq.n	800be90 <_fwalk_reent+0x38>
 800be88:	4629      	mov	r1, r5
 800be8a:	4640      	mov	r0, r8
 800be8c:	47c8      	blx	r9
 800be8e:	4306      	orrs	r6, r0
 800be90:	3568      	adds	r5, #104	; 0x68
 800be92:	e7ee      	b.n	800be72 <_fwalk_reent+0x1a>

0800be94 <_localeconv_r>:
 800be94:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <_localeconv_r+0x14>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6a18      	ldr	r0, [r3, #32]
 800be9a:	4b04      	ldr	r3, [pc, #16]	; (800beac <_localeconv_r+0x18>)
 800be9c:	2800      	cmp	r0, #0
 800be9e:	bf08      	it	eq
 800bea0:	4618      	moveq	r0, r3
 800bea2:	30f0      	adds	r0, #240	; 0xf0
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	24000010 	.word	0x24000010
 800beac:	24000074 	.word	0x24000074

0800beb0 <__swhatbuf_r>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	460e      	mov	r6, r1
 800beb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb8:	2900      	cmp	r1, #0
 800beba:	b096      	sub	sp, #88	; 0x58
 800bebc:	4614      	mov	r4, r2
 800bebe:	461d      	mov	r5, r3
 800bec0:	da07      	bge.n	800bed2 <__swhatbuf_r+0x22>
 800bec2:	2300      	movs	r3, #0
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	89b3      	ldrh	r3, [r6, #12]
 800bec8:	061a      	lsls	r2, r3, #24
 800beca:	d410      	bmi.n	800beee <__swhatbuf_r+0x3e>
 800becc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed0:	e00e      	b.n	800bef0 <__swhatbuf_r+0x40>
 800bed2:	466a      	mov	r2, sp
 800bed4:	f000 fc60 	bl	800c798 <_fstat_r>
 800bed8:	2800      	cmp	r0, #0
 800beda:	dbf2      	blt.n	800bec2 <__swhatbuf_r+0x12>
 800bedc:	9a01      	ldr	r2, [sp, #4]
 800bede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bee6:	425a      	negs	r2, r3
 800bee8:	415a      	adcs	r2, r3
 800beea:	602a      	str	r2, [r5, #0]
 800beec:	e7ee      	b.n	800becc <__swhatbuf_r+0x1c>
 800beee:	2340      	movs	r3, #64	; 0x40
 800bef0:	2000      	movs	r0, #0
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	b016      	add	sp, #88	; 0x58
 800bef6:	bd70      	pop	{r4, r5, r6, pc}

0800bef8 <__smakebuf_r>:
 800bef8:	898b      	ldrh	r3, [r1, #12]
 800befa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800befc:	079d      	lsls	r5, r3, #30
 800befe:	4606      	mov	r6, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	d507      	bpl.n	800bf14 <__smakebuf_r+0x1c>
 800bf04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	6163      	str	r3, [r4, #20]
 800bf10:	b002      	add	sp, #8
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	ab01      	add	r3, sp, #4
 800bf16:	466a      	mov	r2, sp
 800bf18:	f7ff ffca 	bl	800beb0 <__swhatbuf_r>
 800bf1c:	9900      	ldr	r1, [sp, #0]
 800bf1e:	4605      	mov	r5, r0
 800bf20:	4630      	mov	r0, r6
 800bf22:	f000 fb69 	bl	800c5f8 <_malloc_r>
 800bf26:	b948      	cbnz	r0, 800bf3c <__smakebuf_r+0x44>
 800bf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2c:	059a      	lsls	r2, r3, #22
 800bf2e:	d4ef      	bmi.n	800bf10 <__smakebuf_r+0x18>
 800bf30:	f023 0303 	bic.w	r3, r3, #3
 800bf34:	f043 0302 	orr.w	r3, r3, #2
 800bf38:	81a3      	strh	r3, [r4, #12]
 800bf3a:	e7e3      	b.n	800bf04 <__smakebuf_r+0xc>
 800bf3c:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <__smakebuf_r+0x7c>)
 800bf3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	6020      	str	r0, [r4, #0]
 800bf44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	6163      	str	r3, [r4, #20]
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	6120      	str	r0, [r4, #16]
 800bf52:	b15b      	cbz	r3, 800bf6c <__smakebuf_r+0x74>
 800bf54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 fc2f 	bl	800c7bc <_isatty_r>
 800bf5e:	b128      	cbz	r0, 800bf6c <__smakebuf_r+0x74>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f023 0303 	bic.w	r3, r3, #3
 800bf66:	f043 0301 	orr.w	r3, r3, #1
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	431d      	orrs	r5, r3
 800bf70:	81a5      	strh	r5, [r4, #12]
 800bf72:	e7cd      	b.n	800bf10 <__smakebuf_r+0x18>
 800bf74:	0800bd49 	.word	0x0800bd49

0800bf78 <malloc>:
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <malloc+0xc>)
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	6818      	ldr	r0, [r3, #0]
 800bf7e:	f000 bb3b 	b.w	800c5f8 <_malloc_r>
 800bf82:	bf00      	nop
 800bf84:	24000010 	.word	0x24000010

0800bf88 <_Balloc>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460e      	mov	r6, r1
 800bf90:	b93d      	cbnz	r5, 800bfa2 <_Balloc+0x1a>
 800bf92:	2010      	movs	r0, #16
 800bf94:	f7ff fff0 	bl	800bf78 <malloc>
 800bf98:	6260      	str	r0, [r4, #36]	; 0x24
 800bf9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf9e:	6005      	str	r5, [r0, #0]
 800bfa0:	60c5      	str	r5, [r0, #12]
 800bfa2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bfa4:	68eb      	ldr	r3, [r5, #12]
 800bfa6:	b183      	cbz	r3, 800bfca <_Balloc+0x42>
 800bfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bfb0:	b9b8      	cbnz	r0, 800bfe2 <_Balloc+0x5a>
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	fa01 f506 	lsl.w	r5, r1, r6
 800bfb8:	1d6a      	adds	r2, r5, #5
 800bfba:	0092      	lsls	r2, r2, #2
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 fabf 	bl	800c540 <_calloc_r>
 800bfc2:	b160      	cbz	r0, 800bfde <_Balloc+0x56>
 800bfc4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bfc8:	e00e      	b.n	800bfe8 <_Balloc+0x60>
 800bfca:	2221      	movs	r2, #33	; 0x21
 800bfcc:	2104      	movs	r1, #4
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 fab6 	bl	800c540 <_calloc_r>
 800bfd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd6:	60e8      	str	r0, [r5, #12]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e4      	bne.n	800bfa8 <_Balloc+0x20>
 800bfde:	2000      	movs	r0, #0
 800bfe0:	bd70      	pop	{r4, r5, r6, pc}
 800bfe2:	6802      	ldr	r2, [r0, #0]
 800bfe4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfee:	e7f7      	b.n	800bfe0 <_Balloc+0x58>

0800bff0 <_Bfree>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bff4:	4606      	mov	r6, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	b93c      	cbnz	r4, 800c00a <_Bfree+0x1a>
 800bffa:	2010      	movs	r0, #16
 800bffc:	f7ff ffbc 	bl	800bf78 <malloc>
 800c000:	6270      	str	r0, [r6, #36]	; 0x24
 800c002:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c006:	6004      	str	r4, [r0, #0]
 800c008:	60c4      	str	r4, [r0, #12]
 800c00a:	b13d      	cbz	r5, 800c01c <_Bfree+0x2c>
 800c00c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c00e:	686a      	ldr	r2, [r5, #4]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c016:	6029      	str	r1, [r5, #0]
 800c018:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c01c:	bd70      	pop	{r4, r5, r6, pc}

0800c01e <__multadd>:
 800c01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c022:	690d      	ldr	r5, [r1, #16]
 800c024:	461f      	mov	r7, r3
 800c026:	4606      	mov	r6, r0
 800c028:	460c      	mov	r4, r1
 800c02a:	f101 0c14 	add.w	ip, r1, #20
 800c02e:	2300      	movs	r3, #0
 800c030:	f8dc 0000 	ldr.w	r0, [ip]
 800c034:	b281      	uxth	r1, r0
 800c036:	fb02 7101 	mla	r1, r2, r1, r7
 800c03a:	0c0f      	lsrs	r7, r1, #16
 800c03c:	0c00      	lsrs	r0, r0, #16
 800c03e:	fb02 7000 	mla	r0, r2, r0, r7
 800c042:	b289      	uxth	r1, r1
 800c044:	3301      	adds	r3, #1
 800c046:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c04a:	429d      	cmp	r5, r3
 800c04c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c050:	f84c 1b04 	str.w	r1, [ip], #4
 800c054:	dcec      	bgt.n	800c030 <__multadd+0x12>
 800c056:	b1d7      	cbz	r7, 800c08e <__multadd+0x70>
 800c058:	68a3      	ldr	r3, [r4, #8]
 800c05a:	42ab      	cmp	r3, r5
 800c05c:	dc12      	bgt.n	800c084 <__multadd+0x66>
 800c05e:	6861      	ldr	r1, [r4, #4]
 800c060:	4630      	mov	r0, r6
 800c062:	3101      	adds	r1, #1
 800c064:	f7ff ff90 	bl	800bf88 <_Balloc>
 800c068:	6922      	ldr	r2, [r4, #16]
 800c06a:	3202      	adds	r2, #2
 800c06c:	f104 010c 	add.w	r1, r4, #12
 800c070:	4680      	mov	r8, r0
 800c072:	0092      	lsls	r2, r2, #2
 800c074:	300c      	adds	r0, #12
 800c076:	f7fe fb5b 	bl	800a730 <memcpy>
 800c07a:	4621      	mov	r1, r4
 800c07c:	4630      	mov	r0, r6
 800c07e:	f7ff ffb7 	bl	800bff0 <_Bfree>
 800c082:	4644      	mov	r4, r8
 800c084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c088:	3501      	adds	r5, #1
 800c08a:	615f      	str	r7, [r3, #20]
 800c08c:	6125      	str	r5, [r4, #16]
 800c08e:	4620      	mov	r0, r4
 800c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c094 <__hi0bits>:
 800c094:	0c02      	lsrs	r2, r0, #16
 800c096:	0412      	lsls	r2, r2, #16
 800c098:	4603      	mov	r3, r0
 800c09a:	b9b2      	cbnz	r2, 800c0ca <__hi0bits+0x36>
 800c09c:	0403      	lsls	r3, r0, #16
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c0a4:	bf04      	itt	eq
 800c0a6:	021b      	lsleq	r3, r3, #8
 800c0a8:	3008      	addeq	r0, #8
 800c0aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c0ae:	bf04      	itt	eq
 800c0b0:	011b      	lsleq	r3, r3, #4
 800c0b2:	3004      	addeq	r0, #4
 800c0b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c0b8:	bf04      	itt	eq
 800c0ba:	009b      	lsleq	r3, r3, #2
 800c0bc:	3002      	addeq	r0, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	db06      	blt.n	800c0d0 <__hi0bits+0x3c>
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	d503      	bpl.n	800c0ce <__hi0bits+0x3a>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	4770      	bx	lr
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e7e8      	b.n	800c0a0 <__hi0bits+0xc>
 800c0ce:	2020      	movs	r0, #32
 800c0d0:	4770      	bx	lr

0800c0d2 <__lo0bits>:
 800c0d2:	6803      	ldr	r3, [r0, #0]
 800c0d4:	f013 0207 	ands.w	r2, r3, #7
 800c0d8:	4601      	mov	r1, r0
 800c0da:	d00b      	beq.n	800c0f4 <__lo0bits+0x22>
 800c0dc:	07da      	lsls	r2, r3, #31
 800c0de:	d423      	bmi.n	800c128 <__lo0bits+0x56>
 800c0e0:	0798      	lsls	r0, r3, #30
 800c0e2:	bf49      	itett	mi
 800c0e4:	085b      	lsrmi	r3, r3, #1
 800c0e6:	089b      	lsrpl	r3, r3, #2
 800c0e8:	2001      	movmi	r0, #1
 800c0ea:	600b      	strmi	r3, [r1, #0]
 800c0ec:	bf5c      	itt	pl
 800c0ee:	600b      	strpl	r3, [r1, #0]
 800c0f0:	2002      	movpl	r0, #2
 800c0f2:	4770      	bx	lr
 800c0f4:	b298      	uxth	r0, r3
 800c0f6:	b9a8      	cbnz	r0, 800c124 <__lo0bits+0x52>
 800c0f8:	0c1b      	lsrs	r3, r3, #16
 800c0fa:	2010      	movs	r0, #16
 800c0fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c100:	bf04      	itt	eq
 800c102:	0a1b      	lsreq	r3, r3, #8
 800c104:	3008      	addeq	r0, #8
 800c106:	071a      	lsls	r2, r3, #28
 800c108:	bf04      	itt	eq
 800c10a:	091b      	lsreq	r3, r3, #4
 800c10c:	3004      	addeq	r0, #4
 800c10e:	079a      	lsls	r2, r3, #30
 800c110:	bf04      	itt	eq
 800c112:	089b      	lsreq	r3, r3, #2
 800c114:	3002      	addeq	r0, #2
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d402      	bmi.n	800c120 <__lo0bits+0x4e>
 800c11a:	085b      	lsrs	r3, r3, #1
 800c11c:	d006      	beq.n	800c12c <__lo0bits+0x5a>
 800c11e:	3001      	adds	r0, #1
 800c120:	600b      	str	r3, [r1, #0]
 800c122:	4770      	bx	lr
 800c124:	4610      	mov	r0, r2
 800c126:	e7e9      	b.n	800c0fc <__lo0bits+0x2a>
 800c128:	2000      	movs	r0, #0
 800c12a:	4770      	bx	lr
 800c12c:	2020      	movs	r0, #32
 800c12e:	4770      	bx	lr

0800c130 <__i2b>:
 800c130:	b510      	push	{r4, lr}
 800c132:	460c      	mov	r4, r1
 800c134:	2101      	movs	r1, #1
 800c136:	f7ff ff27 	bl	800bf88 <_Balloc>
 800c13a:	2201      	movs	r2, #1
 800c13c:	6144      	str	r4, [r0, #20]
 800c13e:	6102      	str	r2, [r0, #16]
 800c140:	bd10      	pop	{r4, pc}

0800c142 <__multiply>:
 800c142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c146:	4614      	mov	r4, r2
 800c148:	690a      	ldr	r2, [r1, #16]
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	bfb8      	it	lt
 800c150:	460b      	movlt	r3, r1
 800c152:	4688      	mov	r8, r1
 800c154:	bfbc      	itt	lt
 800c156:	46a0      	movlt	r8, r4
 800c158:	461c      	movlt	r4, r3
 800c15a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c15e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c166:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c16a:	eb07 0609 	add.w	r6, r7, r9
 800c16e:	42b3      	cmp	r3, r6
 800c170:	bfb8      	it	lt
 800c172:	3101      	addlt	r1, #1
 800c174:	f7ff ff08 	bl	800bf88 <_Balloc>
 800c178:	f100 0514 	add.w	r5, r0, #20
 800c17c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c180:	462b      	mov	r3, r5
 800c182:	2200      	movs	r2, #0
 800c184:	4573      	cmp	r3, lr
 800c186:	d316      	bcc.n	800c1b6 <__multiply+0x74>
 800c188:	f104 0214 	add.w	r2, r4, #20
 800c18c:	f108 0114 	add.w	r1, r8, #20
 800c190:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c194:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	9201      	str	r2, [sp, #4]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d80c      	bhi.n	800c1bc <__multiply+0x7a>
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	dd03      	ble.n	800c1ae <__multiply+0x6c>
 800c1a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d05d      	beq.n	800c26a <__multiply+0x128>
 800c1ae:	6106      	str	r6, [r0, #16]
 800c1b0:	b003      	add	sp, #12
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	f843 2b04 	str.w	r2, [r3], #4
 800c1ba:	e7e3      	b.n	800c184 <__multiply+0x42>
 800c1bc:	f8b2 b000 	ldrh.w	fp, [r2]
 800c1c0:	f1bb 0f00 	cmp.w	fp, #0
 800c1c4:	d023      	beq.n	800c20e <__multiply+0xcc>
 800c1c6:	4689      	mov	r9, r1
 800c1c8:	46ac      	mov	ip, r5
 800c1ca:	f04f 0800 	mov.w	r8, #0
 800c1ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1d2:	f8dc a000 	ldr.w	sl, [ip]
 800c1d6:	b2a3      	uxth	r3, r4
 800c1d8:	fa1f fa8a 	uxth.w	sl, sl
 800c1dc:	fb0b a303 	mla	r3, fp, r3, sl
 800c1e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c1e4:	f8dc 4000 	ldr.w	r4, [ip]
 800c1e8:	4443      	add	r3, r8
 800c1ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1ee:	fb0b 840a 	mla	r4, fp, sl, r8
 800c1f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c1f6:	46e2      	mov	sl, ip
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1fe:	454f      	cmp	r7, r9
 800c200:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c204:	f84a 3b04 	str.w	r3, [sl], #4
 800c208:	d82b      	bhi.n	800c262 <__multiply+0x120>
 800c20a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c214:	3204      	adds	r2, #4
 800c216:	f1ba 0f00 	cmp.w	sl, #0
 800c21a:	d020      	beq.n	800c25e <__multiply+0x11c>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	4689      	mov	r9, r1
 800c220:	46a8      	mov	r8, r5
 800c222:	f04f 0b00 	mov.w	fp, #0
 800c226:	f8b9 c000 	ldrh.w	ip, [r9]
 800c22a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c22e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c232:	445c      	add	r4, fp
 800c234:	46c4      	mov	ip, r8
 800c236:	b29b      	uxth	r3, r3
 800c238:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c23c:	f84c 3b04 	str.w	r3, [ip], #4
 800c240:	f859 3b04 	ldr.w	r3, [r9], #4
 800c244:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c248:	0c1b      	lsrs	r3, r3, #16
 800c24a:	fb0a b303 	mla	r3, sl, r3, fp
 800c24e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c252:	454f      	cmp	r7, r9
 800c254:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c258:	d805      	bhi.n	800c266 <__multiply+0x124>
 800c25a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c25e:	3504      	adds	r5, #4
 800c260:	e79b      	b.n	800c19a <__multiply+0x58>
 800c262:	46d4      	mov	ip, sl
 800c264:	e7b3      	b.n	800c1ce <__multiply+0x8c>
 800c266:	46e0      	mov	r8, ip
 800c268:	e7dd      	b.n	800c226 <__multiply+0xe4>
 800c26a:	3e01      	subs	r6, #1
 800c26c:	e799      	b.n	800c1a2 <__multiply+0x60>
	...

0800c270 <__pow5mult>:
 800c270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c274:	4615      	mov	r5, r2
 800c276:	f012 0203 	ands.w	r2, r2, #3
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	d007      	beq.n	800c290 <__pow5mult+0x20>
 800c280:	3a01      	subs	r2, #1
 800c282:	4c21      	ldr	r4, [pc, #132]	; (800c308 <__pow5mult+0x98>)
 800c284:	2300      	movs	r3, #0
 800c286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c28a:	f7ff fec8 	bl	800c01e <__multadd>
 800c28e:	4607      	mov	r7, r0
 800c290:	10ad      	asrs	r5, r5, #2
 800c292:	d035      	beq.n	800c300 <__pow5mult+0x90>
 800c294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c296:	b93c      	cbnz	r4, 800c2a8 <__pow5mult+0x38>
 800c298:	2010      	movs	r0, #16
 800c29a:	f7ff fe6d 	bl	800bf78 <malloc>
 800c29e:	6270      	str	r0, [r6, #36]	; 0x24
 800c2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	60c4      	str	r4, [r0, #12]
 800c2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b0:	b94c      	cbnz	r4, 800c2c6 <__pow5mult+0x56>
 800c2b2:	f240 2171 	movw	r1, #625	; 0x271
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff3a 	bl	800c130 <__i2b>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	07eb      	lsls	r3, r5, #31
 800c2cc:	d50a      	bpl.n	800c2e4 <__pow5mult+0x74>
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff35 	bl	800c142 <__multiply>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4681      	mov	r9, r0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff fe87 	bl	800bff0 <_Bfree>
 800c2e2:	464f      	mov	r7, r9
 800c2e4:	106d      	asrs	r5, r5, #1
 800c2e6:	d00b      	beq.n	800c300 <__pow5mult+0x90>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	b938      	cbnz	r0, 800c2fc <__pow5mult+0x8c>
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ff26 	bl	800c142 <__multiply>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	f8c0 8000 	str.w	r8, [r0]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	e7e4      	b.n	800c2ca <__pow5mult+0x5a>
 800c300:	4638      	mov	r0, r7
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	bf00      	nop
 800c308:	0800ca68 	.word	0x0800ca68

0800c30c <__lshift>:
 800c30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c310:	460c      	mov	r4, r1
 800c312:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c316:	6923      	ldr	r3, [r4, #16]
 800c318:	6849      	ldr	r1, [r1, #4]
 800c31a:	eb0a 0903 	add.w	r9, sl, r3
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	4607      	mov	r7, r0
 800c322:	4616      	mov	r6, r2
 800c324:	f109 0501 	add.w	r5, r9, #1
 800c328:	42ab      	cmp	r3, r5
 800c32a:	db32      	blt.n	800c392 <__lshift+0x86>
 800c32c:	4638      	mov	r0, r7
 800c32e:	f7ff fe2b 	bl	800bf88 <_Balloc>
 800c332:	2300      	movs	r3, #0
 800c334:	4680      	mov	r8, r0
 800c336:	f100 0114 	add.w	r1, r0, #20
 800c33a:	461a      	mov	r2, r3
 800c33c:	4553      	cmp	r3, sl
 800c33e:	db2b      	blt.n	800c398 <__lshift+0x8c>
 800c340:	6920      	ldr	r0, [r4, #16]
 800c342:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c346:	f104 0314 	add.w	r3, r4, #20
 800c34a:	f016 021f 	ands.w	r2, r6, #31
 800c34e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c352:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c356:	d025      	beq.n	800c3a4 <__lshift+0x98>
 800c358:	f1c2 0e20 	rsb	lr, r2, #32
 800c35c:	2000      	movs	r0, #0
 800c35e:	681e      	ldr	r6, [r3, #0]
 800c360:	468a      	mov	sl, r1
 800c362:	4096      	lsls	r6, r2
 800c364:	4330      	orrs	r0, r6
 800c366:	f84a 0b04 	str.w	r0, [sl], #4
 800c36a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c36e:	459c      	cmp	ip, r3
 800c370:	fa20 f00e 	lsr.w	r0, r0, lr
 800c374:	d814      	bhi.n	800c3a0 <__lshift+0x94>
 800c376:	6048      	str	r0, [r1, #4]
 800c378:	b108      	cbz	r0, 800c37e <__lshift+0x72>
 800c37a:	f109 0502 	add.w	r5, r9, #2
 800c37e:	3d01      	subs	r5, #1
 800c380:	4638      	mov	r0, r7
 800c382:	f8c8 5010 	str.w	r5, [r8, #16]
 800c386:	4621      	mov	r1, r4
 800c388:	f7ff fe32 	bl	800bff0 <_Bfree>
 800c38c:	4640      	mov	r0, r8
 800c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c392:	3101      	adds	r1, #1
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	e7c7      	b.n	800c328 <__lshift+0x1c>
 800c398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c39c:	3301      	adds	r3, #1
 800c39e:	e7cd      	b.n	800c33c <__lshift+0x30>
 800c3a0:	4651      	mov	r1, sl
 800c3a2:	e7dc      	b.n	800c35e <__lshift+0x52>
 800c3a4:	3904      	subs	r1, #4
 800c3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3ae:	459c      	cmp	ip, r3
 800c3b0:	d8f9      	bhi.n	800c3a6 <__lshift+0x9a>
 800c3b2:	e7e4      	b.n	800c37e <__lshift+0x72>

0800c3b4 <__mcmp>:
 800c3b4:	6903      	ldr	r3, [r0, #16]
 800c3b6:	690a      	ldr	r2, [r1, #16]
 800c3b8:	1a9b      	subs	r3, r3, r2
 800c3ba:	b530      	push	{r4, r5, lr}
 800c3bc:	d10c      	bne.n	800c3d8 <__mcmp+0x24>
 800c3be:	0092      	lsls	r2, r2, #2
 800c3c0:	3014      	adds	r0, #20
 800c3c2:	3114      	adds	r1, #20
 800c3c4:	1884      	adds	r4, r0, r2
 800c3c6:	4411      	add	r1, r2
 800c3c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3d0:	4295      	cmp	r5, r2
 800c3d2:	d003      	beq.n	800c3dc <__mcmp+0x28>
 800c3d4:	d305      	bcc.n	800c3e2 <__mcmp+0x2e>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	4618      	mov	r0, r3
 800c3da:	bd30      	pop	{r4, r5, pc}
 800c3dc:	42a0      	cmp	r0, r4
 800c3de:	d3f3      	bcc.n	800c3c8 <__mcmp+0x14>
 800c3e0:	e7fa      	b.n	800c3d8 <__mcmp+0x24>
 800c3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e6:	e7f7      	b.n	800c3d8 <__mcmp+0x24>

0800c3e8 <__mdiff>:
 800c3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	f7ff ffdd 	bl	800c3b4 <__mcmp>
 800c3fa:	1e06      	subs	r6, r0, #0
 800c3fc:	d108      	bne.n	800c410 <__mdiff+0x28>
 800c3fe:	4631      	mov	r1, r6
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff fdc1 	bl	800bf88 <_Balloc>
 800c406:	2301      	movs	r3, #1
 800c408:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c410:	bfa4      	itt	ge
 800c412:	4623      	movge	r3, r4
 800c414:	462c      	movge	r4, r5
 800c416:	4638      	mov	r0, r7
 800c418:	6861      	ldr	r1, [r4, #4]
 800c41a:	bfa6      	itte	ge
 800c41c:	461d      	movge	r5, r3
 800c41e:	2600      	movge	r6, #0
 800c420:	2601      	movlt	r6, #1
 800c422:	f7ff fdb1 	bl	800bf88 <_Balloc>
 800c426:	692b      	ldr	r3, [r5, #16]
 800c428:	60c6      	str	r6, [r0, #12]
 800c42a:	6926      	ldr	r6, [r4, #16]
 800c42c:	f105 0914 	add.w	r9, r5, #20
 800c430:	f104 0214 	add.w	r2, r4, #20
 800c434:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c438:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c43c:	f100 0514 	add.w	r5, r0, #20
 800c440:	f04f 0e00 	mov.w	lr, #0
 800c444:	f852 ab04 	ldr.w	sl, [r2], #4
 800c448:	f859 4b04 	ldr.w	r4, [r9], #4
 800c44c:	fa1e f18a 	uxtah	r1, lr, sl
 800c450:	b2a3      	uxth	r3, r4
 800c452:	1ac9      	subs	r1, r1, r3
 800c454:	0c23      	lsrs	r3, r4, #16
 800c456:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c45a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c45e:	b289      	uxth	r1, r1
 800c460:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c464:	45c8      	cmp	r8, r9
 800c466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c46a:	4694      	mov	ip, r2
 800c46c:	f845 3b04 	str.w	r3, [r5], #4
 800c470:	d8e8      	bhi.n	800c444 <__mdiff+0x5c>
 800c472:	45bc      	cmp	ip, r7
 800c474:	d304      	bcc.n	800c480 <__mdiff+0x98>
 800c476:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c47a:	b183      	cbz	r3, 800c49e <__mdiff+0xb6>
 800c47c:	6106      	str	r6, [r0, #16]
 800c47e:	e7c5      	b.n	800c40c <__mdiff+0x24>
 800c480:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c484:	fa1e f381 	uxtah	r3, lr, r1
 800c488:	141a      	asrs	r2, r3, #16
 800c48a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c48e:	b29b      	uxth	r3, r3
 800c490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c494:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c498:	f845 3b04 	str.w	r3, [r5], #4
 800c49c:	e7e9      	b.n	800c472 <__mdiff+0x8a>
 800c49e:	3e01      	subs	r6, #1
 800c4a0:	e7e9      	b.n	800c476 <__mdiff+0x8e>

0800c4a2 <__d2b>:
 800c4a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4a6:	460e      	mov	r6, r1
 800c4a8:	2101      	movs	r1, #1
 800c4aa:	ec59 8b10 	vmov	r8, r9, d0
 800c4ae:	4615      	mov	r5, r2
 800c4b0:	f7ff fd6a 	bl	800bf88 <_Balloc>
 800c4b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4be:	bb34      	cbnz	r4, 800c50e <__d2b+0x6c>
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	f1b8 0300 	subs.w	r3, r8, #0
 800c4c6:	d027      	beq.n	800c518 <__d2b+0x76>
 800c4c8:	a802      	add	r0, sp, #8
 800c4ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c4ce:	f7ff fe00 	bl	800c0d2 <__lo0bits>
 800c4d2:	9900      	ldr	r1, [sp, #0]
 800c4d4:	b1f0      	cbz	r0, 800c514 <__d2b+0x72>
 800c4d6:	9a01      	ldr	r2, [sp, #4]
 800c4d8:	f1c0 0320 	rsb	r3, r0, #32
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	430b      	orrs	r3, r1
 800c4e2:	40c2      	lsrs	r2, r0
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	9201      	str	r2, [sp, #4]
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bf14      	ite	ne
 800c4f0:	2102      	movne	r1, #2
 800c4f2:	2101      	moveq	r1, #1
 800c4f4:	6139      	str	r1, [r7, #16]
 800c4f6:	b1c4      	cbz	r4, 800c52a <__d2b+0x88>
 800c4f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c4fc:	4404      	add	r4, r0
 800c4fe:	6034      	str	r4, [r6, #0]
 800c500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c504:	6028      	str	r0, [r5, #0]
 800c506:	4638      	mov	r0, r7
 800c508:	b003      	add	sp, #12
 800c50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c512:	e7d5      	b.n	800c4c0 <__d2b+0x1e>
 800c514:	6179      	str	r1, [r7, #20]
 800c516:	e7e7      	b.n	800c4e8 <__d2b+0x46>
 800c518:	a801      	add	r0, sp, #4
 800c51a:	f7ff fdda 	bl	800c0d2 <__lo0bits>
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	2101      	movs	r1, #1
 800c524:	6139      	str	r1, [r7, #16]
 800c526:	3020      	adds	r0, #32
 800c528:	e7e5      	b.n	800c4f6 <__d2b+0x54>
 800c52a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c52e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c532:	6030      	str	r0, [r6, #0]
 800c534:	6918      	ldr	r0, [r3, #16]
 800c536:	f7ff fdad 	bl	800c094 <__hi0bits>
 800c53a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c53e:	e7e1      	b.n	800c504 <__d2b+0x62>

0800c540 <_calloc_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	fb02 f401 	mul.w	r4, r2, r1
 800c546:	4621      	mov	r1, r4
 800c548:	f000 f856 	bl	800c5f8 <_malloc_r>
 800c54c:	4605      	mov	r5, r0
 800c54e:	b118      	cbz	r0, 800c558 <_calloc_r+0x18>
 800c550:	4622      	mov	r2, r4
 800c552:	2100      	movs	r1, #0
 800c554:	f7fe f8f7 	bl	800a746 <memset>
 800c558:	4628      	mov	r0, r5
 800c55a:	bd38      	pop	{r3, r4, r5, pc}

0800c55c <_free_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4605      	mov	r5, r0
 800c560:	2900      	cmp	r1, #0
 800c562:	d045      	beq.n	800c5f0 <_free_r+0x94>
 800c564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c568:	1f0c      	subs	r4, r1, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	bfb8      	it	lt
 800c56e:	18e4      	addlt	r4, r4, r3
 800c570:	f000 f958 	bl	800c824 <__malloc_lock>
 800c574:	4a1f      	ldr	r2, [pc, #124]	; (800c5f4 <_free_r+0x98>)
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	4610      	mov	r0, r2
 800c57a:	b933      	cbnz	r3, 800c58a <_free_r+0x2e>
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	6014      	str	r4, [r2, #0]
 800c580:	4628      	mov	r0, r5
 800c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c586:	f000 b94e 	b.w	800c826 <__malloc_unlock>
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	d90c      	bls.n	800c5a8 <_free_r+0x4c>
 800c58e:	6821      	ldr	r1, [r4, #0]
 800c590:	1862      	adds	r2, r4, r1
 800c592:	4293      	cmp	r3, r2
 800c594:	bf04      	itt	eq
 800c596:	681a      	ldreq	r2, [r3, #0]
 800c598:	685b      	ldreq	r3, [r3, #4]
 800c59a:	6063      	str	r3, [r4, #4]
 800c59c:	bf04      	itt	eq
 800c59e:	1852      	addeq	r2, r2, r1
 800c5a0:	6022      	streq	r2, [r4, #0]
 800c5a2:	6004      	str	r4, [r0, #0]
 800c5a4:	e7ec      	b.n	800c580 <_free_r+0x24>
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	b10a      	cbz	r2, 800c5b0 <_free_r+0x54>
 800c5ac:	42a2      	cmp	r2, r4
 800c5ae:	d9fa      	bls.n	800c5a6 <_free_r+0x4a>
 800c5b0:	6819      	ldr	r1, [r3, #0]
 800c5b2:	1858      	adds	r0, r3, r1
 800c5b4:	42a0      	cmp	r0, r4
 800c5b6:	d10b      	bne.n	800c5d0 <_free_r+0x74>
 800c5b8:	6820      	ldr	r0, [r4, #0]
 800c5ba:	4401      	add	r1, r0
 800c5bc:	1858      	adds	r0, r3, r1
 800c5be:	4282      	cmp	r2, r0
 800c5c0:	6019      	str	r1, [r3, #0]
 800c5c2:	d1dd      	bne.n	800c580 <_free_r+0x24>
 800c5c4:	6810      	ldr	r0, [r2, #0]
 800c5c6:	6852      	ldr	r2, [r2, #4]
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	4401      	add	r1, r0
 800c5cc:	6019      	str	r1, [r3, #0]
 800c5ce:	e7d7      	b.n	800c580 <_free_r+0x24>
 800c5d0:	d902      	bls.n	800c5d8 <_free_r+0x7c>
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	e7d3      	b.n	800c580 <_free_r+0x24>
 800c5d8:	6820      	ldr	r0, [r4, #0]
 800c5da:	1821      	adds	r1, r4, r0
 800c5dc:	428a      	cmp	r2, r1
 800c5de:	bf04      	itt	eq
 800c5e0:	6811      	ldreq	r1, [r2, #0]
 800c5e2:	6852      	ldreq	r2, [r2, #4]
 800c5e4:	6062      	str	r2, [r4, #4]
 800c5e6:	bf04      	itt	eq
 800c5e8:	1809      	addeq	r1, r1, r0
 800c5ea:	6021      	streq	r1, [r4, #0]
 800c5ec:	605c      	str	r4, [r3, #4]
 800c5ee:	e7c7      	b.n	800c580 <_free_r+0x24>
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
 800c5f2:	bf00      	nop
 800c5f4:	24000204 	.word	0x24000204

0800c5f8 <_malloc_r>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	1ccd      	adds	r5, r1, #3
 800c5fc:	f025 0503 	bic.w	r5, r5, #3
 800c600:	3508      	adds	r5, #8
 800c602:	2d0c      	cmp	r5, #12
 800c604:	bf38      	it	cc
 800c606:	250c      	movcc	r5, #12
 800c608:	2d00      	cmp	r5, #0
 800c60a:	4606      	mov	r6, r0
 800c60c:	db01      	blt.n	800c612 <_malloc_r+0x1a>
 800c60e:	42a9      	cmp	r1, r5
 800c610:	d903      	bls.n	800c61a <_malloc_r+0x22>
 800c612:	230c      	movs	r3, #12
 800c614:	6033      	str	r3, [r6, #0]
 800c616:	2000      	movs	r0, #0
 800c618:	bd70      	pop	{r4, r5, r6, pc}
 800c61a:	f000 f903 	bl	800c824 <__malloc_lock>
 800c61e:	4a21      	ldr	r2, [pc, #132]	; (800c6a4 <_malloc_r+0xac>)
 800c620:	6814      	ldr	r4, [r2, #0]
 800c622:	4621      	mov	r1, r4
 800c624:	b991      	cbnz	r1, 800c64c <_malloc_r+0x54>
 800c626:	4c20      	ldr	r4, [pc, #128]	; (800c6a8 <_malloc_r+0xb0>)
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	b91b      	cbnz	r3, 800c634 <_malloc_r+0x3c>
 800c62c:	4630      	mov	r0, r6
 800c62e:	f000 f83d 	bl	800c6ac <_sbrk_r>
 800c632:	6020      	str	r0, [r4, #0]
 800c634:	4629      	mov	r1, r5
 800c636:	4630      	mov	r0, r6
 800c638:	f000 f838 	bl	800c6ac <_sbrk_r>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d124      	bne.n	800c68a <_malloc_r+0x92>
 800c640:	230c      	movs	r3, #12
 800c642:	6033      	str	r3, [r6, #0]
 800c644:	4630      	mov	r0, r6
 800c646:	f000 f8ee 	bl	800c826 <__malloc_unlock>
 800c64a:	e7e4      	b.n	800c616 <_malloc_r+0x1e>
 800c64c:	680b      	ldr	r3, [r1, #0]
 800c64e:	1b5b      	subs	r3, r3, r5
 800c650:	d418      	bmi.n	800c684 <_malloc_r+0x8c>
 800c652:	2b0b      	cmp	r3, #11
 800c654:	d90f      	bls.n	800c676 <_malloc_r+0x7e>
 800c656:	600b      	str	r3, [r1, #0]
 800c658:	50cd      	str	r5, [r1, r3]
 800c65a:	18cc      	adds	r4, r1, r3
 800c65c:	4630      	mov	r0, r6
 800c65e:	f000 f8e2 	bl	800c826 <__malloc_unlock>
 800c662:	f104 000b 	add.w	r0, r4, #11
 800c666:	1d23      	adds	r3, r4, #4
 800c668:	f020 0007 	bic.w	r0, r0, #7
 800c66c:	1ac3      	subs	r3, r0, r3
 800c66e:	d0d3      	beq.n	800c618 <_malloc_r+0x20>
 800c670:	425a      	negs	r2, r3
 800c672:	50e2      	str	r2, [r4, r3]
 800c674:	e7d0      	b.n	800c618 <_malloc_r+0x20>
 800c676:	428c      	cmp	r4, r1
 800c678:	684b      	ldr	r3, [r1, #4]
 800c67a:	bf16      	itet	ne
 800c67c:	6063      	strne	r3, [r4, #4]
 800c67e:	6013      	streq	r3, [r2, #0]
 800c680:	460c      	movne	r4, r1
 800c682:	e7eb      	b.n	800c65c <_malloc_r+0x64>
 800c684:	460c      	mov	r4, r1
 800c686:	6849      	ldr	r1, [r1, #4]
 800c688:	e7cc      	b.n	800c624 <_malloc_r+0x2c>
 800c68a:	1cc4      	adds	r4, r0, #3
 800c68c:	f024 0403 	bic.w	r4, r4, #3
 800c690:	42a0      	cmp	r0, r4
 800c692:	d005      	beq.n	800c6a0 <_malloc_r+0xa8>
 800c694:	1a21      	subs	r1, r4, r0
 800c696:	4630      	mov	r0, r6
 800c698:	f000 f808 	bl	800c6ac <_sbrk_r>
 800c69c:	3001      	adds	r0, #1
 800c69e:	d0cf      	beq.n	800c640 <_malloc_r+0x48>
 800c6a0:	6025      	str	r5, [r4, #0]
 800c6a2:	e7db      	b.n	800c65c <_malloc_r+0x64>
 800c6a4:	24000204 	.word	0x24000204
 800c6a8:	24000208 	.word	0x24000208

0800c6ac <_sbrk_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4c06      	ldr	r4, [pc, #24]	; (800c6c8 <_sbrk_r+0x1c>)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	6023      	str	r3, [r4, #0]
 800c6b8:	f7f5 fbba 	bl	8001e30 <_sbrk>
 800c6bc:	1c43      	adds	r3, r0, #1
 800c6be:	d102      	bne.n	800c6c6 <_sbrk_r+0x1a>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	b103      	cbz	r3, 800c6c6 <_sbrk_r+0x1a>
 800c6c4:	602b      	str	r3, [r5, #0]
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	24000844 	.word	0x24000844

0800c6cc <__sread>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	f000 f8a8 	bl	800c828 <_read_r>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	bfab      	itete	ge
 800c6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6de:	89a3      	ldrhlt	r3, [r4, #12]
 800c6e0:	181b      	addge	r3, r3, r0
 800c6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6e6:	bfac      	ite	ge
 800c6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6ea:	81a3      	strhlt	r3, [r4, #12]
 800c6ec:	bd10      	pop	{r4, pc}

0800c6ee <__swrite>:
 800c6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f2:	461f      	mov	r7, r3
 800c6f4:	898b      	ldrh	r3, [r1, #12]
 800c6f6:	05db      	lsls	r3, r3, #23
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	d505      	bpl.n	800c70c <__swrite+0x1e>
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c708:	f000 f868 	bl	800c7dc <_lseek_r>
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c716:	81a3      	strh	r3, [r4, #12]
 800c718:	4632      	mov	r2, r6
 800c71a:	463b      	mov	r3, r7
 800c71c:	4628      	mov	r0, r5
 800c71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c722:	f000 b817 	b.w	800c754 <_write_r>

0800c726 <__sseek>:
 800c726:	b510      	push	{r4, lr}
 800c728:	460c      	mov	r4, r1
 800c72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72e:	f000 f855 	bl	800c7dc <_lseek_r>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	bf15      	itete	ne
 800c738:	6560      	strne	r0, [r4, #84]	; 0x54
 800c73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c742:	81a3      	strheq	r3, [r4, #12]
 800c744:	bf18      	it	ne
 800c746:	81a3      	strhne	r3, [r4, #12]
 800c748:	bd10      	pop	{r4, pc}

0800c74a <__sclose>:
 800c74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74e:	f000 b813 	b.w	800c778 <_close_r>
	...

0800c754 <_write_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4c07      	ldr	r4, [pc, #28]	; (800c774 <_write_r+0x20>)
 800c758:	4605      	mov	r5, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	4611      	mov	r1, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	6022      	str	r2, [r4, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	f7f5 fb13 	bl	8001d8e <_write>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_write_r+0x1e>
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_write_r+0x1e>
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	24000844 	.word	0x24000844

0800c778 <_close_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4c06      	ldr	r4, [pc, #24]	; (800c794 <_close_r+0x1c>)
 800c77c:	2300      	movs	r3, #0
 800c77e:	4605      	mov	r5, r0
 800c780:	4608      	mov	r0, r1
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	f7f5 fb1f 	bl	8001dc6 <_close>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_close_r+0x1a>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_close_r+0x1a>
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	24000844 	.word	0x24000844

0800c798 <_fstat_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4c07      	ldr	r4, [pc, #28]	; (800c7b8 <_fstat_r+0x20>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4605      	mov	r5, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	f7f5 fb1a 	bl	8001dde <_fstat>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d102      	bne.n	800c7b4 <_fstat_r+0x1c>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	b103      	cbz	r3, 800c7b4 <_fstat_r+0x1c>
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	24000844 	.word	0x24000844

0800c7bc <_isatty_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4c06      	ldr	r4, [pc, #24]	; (800c7d8 <_isatty_r+0x1c>)
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	f7f5 fb19 	bl	8001dfe <_isatty>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_isatty_r+0x1a>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_isatty_r+0x1a>
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	24000844 	.word	0x24000844

0800c7dc <_lseek_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4c07      	ldr	r4, [pc, #28]	; (800c7fc <_lseek_r+0x20>)
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	6022      	str	r2, [r4, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f7f5 fb12 	bl	8001e14 <_lseek>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_lseek_r+0x1e>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_lseek_r+0x1e>
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	24000844 	.word	0x24000844

0800c800 <__ascii_mbtowc>:
 800c800:	b082      	sub	sp, #8
 800c802:	b901      	cbnz	r1, 800c806 <__ascii_mbtowc+0x6>
 800c804:	a901      	add	r1, sp, #4
 800c806:	b142      	cbz	r2, 800c81a <__ascii_mbtowc+0x1a>
 800c808:	b14b      	cbz	r3, 800c81e <__ascii_mbtowc+0x1e>
 800c80a:	7813      	ldrb	r3, [r2, #0]
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	7812      	ldrb	r2, [r2, #0]
 800c810:	1c10      	adds	r0, r2, #0
 800c812:	bf18      	it	ne
 800c814:	2001      	movne	r0, #1
 800c816:	b002      	add	sp, #8
 800c818:	4770      	bx	lr
 800c81a:	4610      	mov	r0, r2
 800c81c:	e7fb      	b.n	800c816 <__ascii_mbtowc+0x16>
 800c81e:	f06f 0001 	mvn.w	r0, #1
 800c822:	e7f8      	b.n	800c816 <__ascii_mbtowc+0x16>

0800c824 <__malloc_lock>:
 800c824:	4770      	bx	lr

0800c826 <__malloc_unlock>:
 800c826:	4770      	bx	lr

0800c828 <_read_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4c07      	ldr	r4, [pc, #28]	; (800c848 <_read_r+0x20>)
 800c82c:	4605      	mov	r5, r0
 800c82e:	4608      	mov	r0, r1
 800c830:	4611      	mov	r1, r2
 800c832:	2200      	movs	r2, #0
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	461a      	mov	r2, r3
 800c838:	f7f5 fa8c 	bl	8001d54 <_read>
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	d102      	bne.n	800c846 <_read_r+0x1e>
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	b103      	cbz	r3, 800c846 <_read_r+0x1e>
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	bd38      	pop	{r3, r4, r5, pc}
 800c848:	24000844 	.word	0x24000844

0800c84c <__ascii_wctomb>:
 800c84c:	b149      	cbz	r1, 800c862 <__ascii_wctomb+0x16>
 800c84e:	2aff      	cmp	r2, #255	; 0xff
 800c850:	bf85      	ittet	hi
 800c852:	238a      	movhi	r3, #138	; 0x8a
 800c854:	6003      	strhi	r3, [r0, #0]
 800c856:	700a      	strbls	r2, [r1, #0]
 800c858:	f04f 30ff 	movhi.w	r0, #4294967295
 800c85c:	bf98      	it	ls
 800c85e:	2001      	movls	r0, #1
 800c860:	4770      	bx	lr
 800c862:	4608      	mov	r0, r1
 800c864:	4770      	bx	lr
	...

0800c868 <_init>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	bf00      	nop
 800c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86e:	bc08      	pop	{r3}
 800c870:	469e      	mov	lr, r3
 800c872:	4770      	bx	lr

0800c874 <_fini>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	bf00      	nop
 800c878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87a:	bc08      	pop	{r3}
 800c87c:	469e      	mov	lr, r3
 800c87e:	4770      	bx	lr
